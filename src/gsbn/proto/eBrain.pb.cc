// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: eBrain.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "eBrain.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace eb {

namespace {

const ::google::protobuf::Descriptor* NetParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* NetParam_PopParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetParam_PopParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* NetParam_HcuParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetParam_HcuParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* NetParam_McuParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetParam_McuParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* NetParam_ProjParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetParam_ProjParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* NetParam_StimParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetParam_StimParam_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_eBrain_2eproto() {
  protobuf_AddDesc_eBrain_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "eBrain.proto");
  GOOGLE_CHECK(file != NULL);
  NetParam_descriptor_ = file->message_type(0);
  static const int NetParam_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParam, pop_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParam, hcu_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParam, hcu_slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParam, mcu_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParam, mcu_fanout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParam, stim_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParam, proj_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParam, pop_param_),
  };
  NetParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetParam_descriptor_,
      NetParam::default_instance_,
      NetParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetParam));
  NetParam_PopParam_descriptor_ = NetParam_descriptor_->nested_type(0);
  static const int NetParam_PopParam_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParam_PopParam, hcu_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParam_PopParam, hcu_slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParam_PopParam, mcu_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParam_PopParam, mcu_fanout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParam_PopParam, hcu_param_),
  };
  NetParam_PopParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetParam_PopParam_descriptor_,
      NetParam_PopParam::default_instance_,
      NetParam_PopParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParam_PopParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParam_PopParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetParam_PopParam));
  NetParam_HcuParam_descriptor_ = NetParam_descriptor_->nested_type(1);
  static const int NetParam_HcuParam_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParam_HcuParam, mcu_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParam_HcuParam, mcu_fanout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParam_HcuParam, mcu_param_),
  };
  NetParam_HcuParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetParam_HcuParam_descriptor_,
      NetParam_HcuParam::default_instance_,
      NetParam_HcuParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParam_HcuParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParam_HcuParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetParam_HcuParam));
  NetParam_McuParam_descriptor_ = NetParam_descriptor_->nested_type(2);
  static const int NetParam_McuParam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParam_McuParam, mcu_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParam_McuParam, mcu_fanout_),
  };
  NetParam_McuParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetParam_McuParam_descriptor_,
      NetParam_McuParam::default_instance_,
      NetParam_McuParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParam_McuParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParam_McuParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetParam_McuParam));
  NetParam_ProjParam_descriptor_ = NetParam_descriptor_->nested_type(3);
  static const int NetParam_ProjParam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParam_ProjParam, src_pop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParam_ProjParam, desc_pop_),
  };
  NetParam_ProjParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetParam_ProjParam_descriptor_,
      NetParam_ProjParam::default_instance_,
      NetParam_ProjParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParam_ProjParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParam_ProjParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetParam_ProjParam));
  NetParam_StimParam_descriptor_ = NetParam_descriptor_->nested_type(4);
  static const int NetParam_StimParam_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParam_StimParam, stim_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParam_StimParam, stim_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParam_StimParam, stim_type_),
  };
  NetParam_StimParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetParam_StimParam_descriptor_,
      NetParam_StimParam::default_instance_,
      NetParam_StimParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParam_StimParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParam_StimParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetParam_StimParam));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_eBrain_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetParam_descriptor_, &NetParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetParam_PopParam_descriptor_, &NetParam_PopParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetParam_HcuParam_descriptor_, &NetParam_HcuParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetParam_McuParam_descriptor_, &NetParam_McuParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetParam_ProjParam_descriptor_, &NetParam_ProjParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetParam_StimParam_descriptor_, &NetParam_StimParam::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_eBrain_2eproto() {
  delete NetParam::default_instance_;
  delete NetParam_reflection_;
  delete NetParam_PopParam::default_instance_;
  delete NetParam_PopParam_reflection_;
  delete NetParam_HcuParam::default_instance_;
  delete NetParam_HcuParam_reflection_;
  delete NetParam_McuParam::default_instance_;
  delete NetParam_McuParam_reflection_;
  delete NetParam_ProjParam::default_instance_;
  delete NetParam_ProjParam_reflection_;
  delete NetParam_StimParam::default_instance_;
  delete NetParam_StimParam_reflection_;
}

void protobuf_AddDesc_eBrain_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014eBrain.proto\022\002eb\"\344\004\n\010NetParam\022\017\n\007pop_n"
    "um\030\001 \001(\r\022\017\n\007hcu_num\030\002 \001(\r\022\020\n\010hcu_slot\030\003 "
    "\001(\r\022\017\n\007mcu_num\030\004 \001(\r\022\022\n\nmcu_fanout\030\005 \001(\r"
    "\022*\n\nstim_param\030\n \002(\0132\026.eb.NetParam.StimP"
    "aram\022*\n\nproj_param\030\013 \003(\0132\026.eb.NetParam.P"
    "rojParam\022(\n\tpop_param\030\024 \003(\0132\025.eb.NetPara"
    "m.PopParam\032|\n\010PopParam\022\017\n\007hcu_num\030\001 \001(\r\022"
    "\020\n\010hcu_slot\030\002 \001(\r\022\017\n\007mcu_num\030\003 \001(\r\022\022\n\nmc"
    "u_fanout\030\004 \001(\r\022(\n\thcu_param\030\n \003(\0132\025.eb.N"
    "etParam.HcuParam\032Y\n\010HcuParam\022\017\n\007mcu_num\030"
    "\001 \001(\r\022\022\n\nmcu_fanout\030\002 \001(\r\022(\n\tmcu_param\030\n"
    " \003(\0132\025.eb.NetParam.McuParam\032/\n\010McuParam\022"
    "\017\n\007mcu_num\030\001 \002(\r\022\022\n\nmcu_fanout\030\002 \002(\r\032.\n\t"
    "ProjParam\022\017\n\007src_pop\030\001 \002(\r\022\020\n\010desc_pop\030\002"
    " \002(\r\032C\n\tStimParam\022\020\n\010stim_num\030\001 \002(\r\022\021\n\ts"
    "tim_size\030\002 \002(\r\022\021\n\tstim_type\030\003 \002(\r", 633);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "eBrain.proto", &protobuf_RegisterTypes);
  NetParam::default_instance_ = new NetParam();
  NetParam_PopParam::default_instance_ = new NetParam_PopParam();
  NetParam_HcuParam::default_instance_ = new NetParam_HcuParam();
  NetParam_McuParam::default_instance_ = new NetParam_McuParam();
  NetParam_ProjParam::default_instance_ = new NetParam_ProjParam();
  NetParam_StimParam::default_instance_ = new NetParam_StimParam();
  NetParam::default_instance_->InitAsDefaultInstance();
  NetParam_PopParam::default_instance_->InitAsDefaultInstance();
  NetParam_HcuParam::default_instance_->InitAsDefaultInstance();
  NetParam_McuParam::default_instance_->InitAsDefaultInstance();
  NetParam_ProjParam::default_instance_->InitAsDefaultInstance();
  NetParam_StimParam::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_eBrain_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_eBrain_2eproto {
  StaticDescriptorInitializer_eBrain_2eproto() {
    protobuf_AddDesc_eBrain_2eproto();
  }
} static_descriptor_initializer_eBrain_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int NetParam_PopParam::kHcuNumFieldNumber;
const int NetParam_PopParam::kHcuSlotFieldNumber;
const int NetParam_PopParam::kMcuNumFieldNumber;
const int NetParam_PopParam::kMcuFanoutFieldNumber;
const int NetParam_PopParam::kHcuParamFieldNumber;
#endif  // !_MSC_VER

NetParam_PopParam::NetParam_PopParam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:eb.NetParam.PopParam)
}

void NetParam_PopParam::InitAsDefaultInstance() {
}

NetParam_PopParam::NetParam_PopParam(const NetParam_PopParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:eb.NetParam.PopParam)
}

void NetParam_PopParam::SharedCtor() {
  _cached_size_ = 0;
  hcu_num_ = 0u;
  hcu_slot_ = 0u;
  mcu_num_ = 0u;
  mcu_fanout_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetParam_PopParam::~NetParam_PopParam() {
  // @@protoc_insertion_point(destructor:eb.NetParam.PopParam)
  SharedDtor();
}

void NetParam_PopParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetParam_PopParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetParam_PopParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetParam_PopParam_descriptor_;
}

const NetParam_PopParam& NetParam_PopParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_eBrain_2eproto();
  return *default_instance_;
}

NetParam_PopParam* NetParam_PopParam::default_instance_ = NULL;

NetParam_PopParam* NetParam_PopParam::New() const {
  return new NetParam_PopParam;
}

void NetParam_PopParam::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NetParam_PopParam*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(hcu_num_, mcu_fanout_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  hcu_param_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetParam_PopParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:eb.NetParam.PopParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 hcu_num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hcu_num_)));
          set_has_hcu_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_hcu_slot;
        break;
      }

      // optional uint32 hcu_slot = 2;
      case 2: {
        if (tag == 16) {
         parse_hcu_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hcu_slot_)));
          set_has_hcu_slot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mcu_num;
        break;
      }

      // optional uint32 mcu_num = 3;
      case 3: {
        if (tag == 24) {
         parse_mcu_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcu_num_)));
          set_has_mcu_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_mcu_fanout;
        break;
      }

      // optional uint32 mcu_fanout = 4;
      case 4: {
        if (tag == 32) {
         parse_mcu_fanout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcu_fanout_)));
          set_has_mcu_fanout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_hcu_param;
        break;
      }

      // repeated .eb.NetParam.HcuParam hcu_param = 10;
      case 10: {
        if (tag == 82) {
         parse_hcu_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hcu_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_hcu_param;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:eb.NetParam.PopParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:eb.NetParam.PopParam)
  return false;
#undef DO_
}

void NetParam_PopParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:eb.NetParam.PopParam)
  // optional uint32 hcu_num = 1;
  if (has_hcu_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hcu_num(), output);
  }

  // optional uint32 hcu_slot = 2;
  if (has_hcu_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hcu_slot(), output);
  }

  // optional uint32 mcu_num = 3;
  if (has_mcu_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mcu_num(), output);
  }

  // optional uint32 mcu_fanout = 4;
  if (has_mcu_fanout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->mcu_fanout(), output);
  }

  // repeated .eb.NetParam.HcuParam hcu_param = 10;
  for (int i = 0; i < this->hcu_param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->hcu_param(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:eb.NetParam.PopParam)
}

::google::protobuf::uint8* NetParam_PopParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:eb.NetParam.PopParam)
  // optional uint32 hcu_num = 1;
  if (has_hcu_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hcu_num(), target);
  }

  // optional uint32 hcu_slot = 2;
  if (has_hcu_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hcu_slot(), target);
  }

  // optional uint32 mcu_num = 3;
  if (has_mcu_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mcu_num(), target);
  }

  // optional uint32 mcu_fanout = 4;
  if (has_mcu_fanout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->mcu_fanout(), target);
  }

  // repeated .eb.NetParam.HcuParam hcu_param = 10;
  for (int i = 0; i < this->hcu_param_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->hcu_param(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:eb.NetParam.PopParam)
  return target;
}

int NetParam_PopParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 hcu_num = 1;
    if (has_hcu_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hcu_num());
    }

    // optional uint32 hcu_slot = 2;
    if (has_hcu_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hcu_slot());
    }

    // optional uint32 mcu_num = 3;
    if (has_mcu_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcu_num());
    }

    // optional uint32 mcu_fanout = 4;
    if (has_mcu_fanout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcu_fanout());
    }

  }
  // repeated .eb.NetParam.HcuParam hcu_param = 10;
  total_size += 1 * this->hcu_param_size();
  for (int i = 0; i < this->hcu_param_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hcu_param(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetParam_PopParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetParam_PopParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetParam_PopParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetParam_PopParam::MergeFrom(const NetParam_PopParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  hcu_param_.MergeFrom(from.hcu_param_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hcu_num()) {
      set_hcu_num(from.hcu_num());
    }
    if (from.has_hcu_slot()) {
      set_hcu_slot(from.hcu_slot());
    }
    if (from.has_mcu_num()) {
      set_mcu_num(from.mcu_num());
    }
    if (from.has_mcu_fanout()) {
      set_mcu_fanout(from.mcu_fanout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetParam_PopParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetParam_PopParam::CopyFrom(const NetParam_PopParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetParam_PopParam::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->hcu_param())) return false;
  return true;
}

void NetParam_PopParam::Swap(NetParam_PopParam* other) {
  if (other != this) {
    std::swap(hcu_num_, other->hcu_num_);
    std::swap(hcu_slot_, other->hcu_slot_);
    std::swap(mcu_num_, other->mcu_num_);
    std::swap(mcu_fanout_, other->mcu_fanout_);
    hcu_param_.Swap(&other->hcu_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetParam_PopParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetParam_PopParam_descriptor_;
  metadata.reflection = NetParam_PopParam_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int NetParam_HcuParam::kMcuNumFieldNumber;
const int NetParam_HcuParam::kMcuFanoutFieldNumber;
const int NetParam_HcuParam::kMcuParamFieldNumber;
#endif  // !_MSC_VER

NetParam_HcuParam::NetParam_HcuParam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:eb.NetParam.HcuParam)
}

void NetParam_HcuParam::InitAsDefaultInstance() {
}

NetParam_HcuParam::NetParam_HcuParam(const NetParam_HcuParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:eb.NetParam.HcuParam)
}

void NetParam_HcuParam::SharedCtor() {
  _cached_size_ = 0;
  mcu_num_ = 0u;
  mcu_fanout_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetParam_HcuParam::~NetParam_HcuParam() {
  // @@protoc_insertion_point(destructor:eb.NetParam.HcuParam)
  SharedDtor();
}

void NetParam_HcuParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetParam_HcuParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetParam_HcuParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetParam_HcuParam_descriptor_;
}

const NetParam_HcuParam& NetParam_HcuParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_eBrain_2eproto();
  return *default_instance_;
}

NetParam_HcuParam* NetParam_HcuParam::default_instance_ = NULL;

NetParam_HcuParam* NetParam_HcuParam::New() const {
  return new NetParam_HcuParam;
}

void NetParam_HcuParam::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NetParam_HcuParam*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(mcu_num_, mcu_fanout_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  mcu_param_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetParam_HcuParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:eb.NetParam.HcuParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mcu_num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcu_num_)));
          set_has_mcu_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcu_fanout;
        break;
      }

      // optional uint32 mcu_fanout = 2;
      case 2: {
        if (tag == 16) {
         parse_mcu_fanout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcu_fanout_)));
          set_has_mcu_fanout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_mcu_param;
        break;
      }

      // repeated .eb.NetParam.McuParam mcu_param = 10;
      case 10: {
        if (tag == 82) {
         parse_mcu_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mcu_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_mcu_param;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:eb.NetParam.HcuParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:eb.NetParam.HcuParam)
  return false;
#undef DO_
}

void NetParam_HcuParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:eb.NetParam.HcuParam)
  // optional uint32 mcu_num = 1;
  if (has_mcu_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mcu_num(), output);
  }

  // optional uint32 mcu_fanout = 2;
  if (has_mcu_fanout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcu_fanout(), output);
  }

  // repeated .eb.NetParam.McuParam mcu_param = 10;
  for (int i = 0; i < this->mcu_param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->mcu_param(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:eb.NetParam.HcuParam)
}

::google::protobuf::uint8* NetParam_HcuParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:eb.NetParam.HcuParam)
  // optional uint32 mcu_num = 1;
  if (has_mcu_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mcu_num(), target);
  }

  // optional uint32 mcu_fanout = 2;
  if (has_mcu_fanout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcu_fanout(), target);
  }

  // repeated .eb.NetParam.McuParam mcu_param = 10;
  for (int i = 0; i < this->mcu_param_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->mcu_param(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:eb.NetParam.HcuParam)
  return target;
}

int NetParam_HcuParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 mcu_num = 1;
    if (has_mcu_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcu_num());
    }

    // optional uint32 mcu_fanout = 2;
    if (has_mcu_fanout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcu_fanout());
    }

  }
  // repeated .eb.NetParam.McuParam mcu_param = 10;
  total_size += 1 * this->mcu_param_size();
  for (int i = 0; i < this->mcu_param_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mcu_param(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetParam_HcuParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetParam_HcuParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetParam_HcuParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetParam_HcuParam::MergeFrom(const NetParam_HcuParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  mcu_param_.MergeFrom(from.mcu_param_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mcu_num()) {
      set_mcu_num(from.mcu_num());
    }
    if (from.has_mcu_fanout()) {
      set_mcu_fanout(from.mcu_fanout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetParam_HcuParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetParam_HcuParam::CopyFrom(const NetParam_HcuParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetParam_HcuParam::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->mcu_param())) return false;
  return true;
}

void NetParam_HcuParam::Swap(NetParam_HcuParam* other) {
  if (other != this) {
    std::swap(mcu_num_, other->mcu_num_);
    std::swap(mcu_fanout_, other->mcu_fanout_);
    mcu_param_.Swap(&other->mcu_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetParam_HcuParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetParam_HcuParam_descriptor_;
  metadata.reflection = NetParam_HcuParam_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int NetParam_McuParam::kMcuNumFieldNumber;
const int NetParam_McuParam::kMcuFanoutFieldNumber;
#endif  // !_MSC_VER

NetParam_McuParam::NetParam_McuParam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:eb.NetParam.McuParam)
}

void NetParam_McuParam::InitAsDefaultInstance() {
}

NetParam_McuParam::NetParam_McuParam(const NetParam_McuParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:eb.NetParam.McuParam)
}

void NetParam_McuParam::SharedCtor() {
  _cached_size_ = 0;
  mcu_num_ = 0u;
  mcu_fanout_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetParam_McuParam::~NetParam_McuParam() {
  // @@protoc_insertion_point(destructor:eb.NetParam.McuParam)
  SharedDtor();
}

void NetParam_McuParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetParam_McuParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetParam_McuParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetParam_McuParam_descriptor_;
}

const NetParam_McuParam& NetParam_McuParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_eBrain_2eproto();
  return *default_instance_;
}

NetParam_McuParam* NetParam_McuParam::default_instance_ = NULL;

NetParam_McuParam* NetParam_McuParam::New() const {
  return new NetParam_McuParam;
}

void NetParam_McuParam::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NetParam_McuParam*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(mcu_num_, mcu_fanout_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetParam_McuParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:eb.NetParam.McuParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mcu_num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcu_num_)));
          set_has_mcu_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcu_fanout;
        break;
      }

      // required uint32 mcu_fanout = 2;
      case 2: {
        if (tag == 16) {
         parse_mcu_fanout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcu_fanout_)));
          set_has_mcu_fanout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:eb.NetParam.McuParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:eb.NetParam.McuParam)
  return false;
#undef DO_
}

void NetParam_McuParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:eb.NetParam.McuParam)
  // required uint32 mcu_num = 1;
  if (has_mcu_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mcu_num(), output);
  }

  // required uint32 mcu_fanout = 2;
  if (has_mcu_fanout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcu_fanout(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:eb.NetParam.McuParam)
}

::google::protobuf::uint8* NetParam_McuParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:eb.NetParam.McuParam)
  // required uint32 mcu_num = 1;
  if (has_mcu_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mcu_num(), target);
  }

  // required uint32 mcu_fanout = 2;
  if (has_mcu_fanout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcu_fanout(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:eb.NetParam.McuParam)
  return target;
}

int NetParam_McuParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 mcu_num = 1;
    if (has_mcu_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcu_num());
    }

    // required uint32 mcu_fanout = 2;
    if (has_mcu_fanout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcu_fanout());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetParam_McuParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetParam_McuParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetParam_McuParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetParam_McuParam::MergeFrom(const NetParam_McuParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mcu_num()) {
      set_mcu_num(from.mcu_num());
    }
    if (from.has_mcu_fanout()) {
      set_mcu_fanout(from.mcu_fanout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetParam_McuParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetParam_McuParam::CopyFrom(const NetParam_McuParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetParam_McuParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void NetParam_McuParam::Swap(NetParam_McuParam* other) {
  if (other != this) {
    std::swap(mcu_num_, other->mcu_num_);
    std::swap(mcu_fanout_, other->mcu_fanout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetParam_McuParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetParam_McuParam_descriptor_;
  metadata.reflection = NetParam_McuParam_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int NetParam_ProjParam::kSrcPopFieldNumber;
const int NetParam_ProjParam::kDescPopFieldNumber;
#endif  // !_MSC_VER

NetParam_ProjParam::NetParam_ProjParam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:eb.NetParam.ProjParam)
}

void NetParam_ProjParam::InitAsDefaultInstance() {
}

NetParam_ProjParam::NetParam_ProjParam(const NetParam_ProjParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:eb.NetParam.ProjParam)
}

void NetParam_ProjParam::SharedCtor() {
  _cached_size_ = 0;
  src_pop_ = 0u;
  desc_pop_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetParam_ProjParam::~NetParam_ProjParam() {
  // @@protoc_insertion_point(destructor:eb.NetParam.ProjParam)
  SharedDtor();
}

void NetParam_ProjParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetParam_ProjParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetParam_ProjParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetParam_ProjParam_descriptor_;
}

const NetParam_ProjParam& NetParam_ProjParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_eBrain_2eproto();
  return *default_instance_;
}

NetParam_ProjParam* NetParam_ProjParam::default_instance_ = NULL;

NetParam_ProjParam* NetParam_ProjParam::New() const {
  return new NetParam_ProjParam;
}

void NetParam_ProjParam::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NetParam_ProjParam*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(src_pop_, desc_pop_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetParam_ProjParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:eb.NetParam.ProjParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 src_pop = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &src_pop_)));
          set_has_src_pop();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_desc_pop;
        break;
      }

      // required uint32 desc_pop = 2;
      case 2: {
        if (tag == 16) {
         parse_desc_pop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &desc_pop_)));
          set_has_desc_pop();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:eb.NetParam.ProjParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:eb.NetParam.ProjParam)
  return false;
#undef DO_
}

void NetParam_ProjParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:eb.NetParam.ProjParam)
  // required uint32 src_pop = 1;
  if (has_src_pop()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->src_pop(), output);
  }

  // required uint32 desc_pop = 2;
  if (has_desc_pop()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->desc_pop(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:eb.NetParam.ProjParam)
}

::google::protobuf::uint8* NetParam_ProjParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:eb.NetParam.ProjParam)
  // required uint32 src_pop = 1;
  if (has_src_pop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->src_pop(), target);
  }

  // required uint32 desc_pop = 2;
  if (has_desc_pop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->desc_pop(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:eb.NetParam.ProjParam)
  return target;
}

int NetParam_ProjParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 src_pop = 1;
    if (has_src_pop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->src_pop());
    }

    // required uint32 desc_pop = 2;
    if (has_desc_pop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->desc_pop());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetParam_ProjParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetParam_ProjParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetParam_ProjParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetParam_ProjParam::MergeFrom(const NetParam_ProjParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src_pop()) {
      set_src_pop(from.src_pop());
    }
    if (from.has_desc_pop()) {
      set_desc_pop(from.desc_pop());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetParam_ProjParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetParam_ProjParam::CopyFrom(const NetParam_ProjParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetParam_ProjParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void NetParam_ProjParam::Swap(NetParam_ProjParam* other) {
  if (other != this) {
    std::swap(src_pop_, other->src_pop_);
    std::swap(desc_pop_, other->desc_pop_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetParam_ProjParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetParam_ProjParam_descriptor_;
  metadata.reflection = NetParam_ProjParam_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int NetParam_StimParam::kStimNumFieldNumber;
const int NetParam_StimParam::kStimSizeFieldNumber;
const int NetParam_StimParam::kStimTypeFieldNumber;
#endif  // !_MSC_VER

NetParam_StimParam::NetParam_StimParam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:eb.NetParam.StimParam)
}

void NetParam_StimParam::InitAsDefaultInstance() {
}

NetParam_StimParam::NetParam_StimParam(const NetParam_StimParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:eb.NetParam.StimParam)
}

void NetParam_StimParam::SharedCtor() {
  _cached_size_ = 0;
  stim_num_ = 0u;
  stim_size_ = 0u;
  stim_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetParam_StimParam::~NetParam_StimParam() {
  // @@protoc_insertion_point(destructor:eb.NetParam.StimParam)
  SharedDtor();
}

void NetParam_StimParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetParam_StimParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetParam_StimParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetParam_StimParam_descriptor_;
}

const NetParam_StimParam& NetParam_StimParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_eBrain_2eproto();
  return *default_instance_;
}

NetParam_StimParam* NetParam_StimParam::default_instance_ = NULL;

NetParam_StimParam* NetParam_StimParam::New() const {
  return new NetParam_StimParam;
}

void NetParam_StimParam::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NetParam_StimParam*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(stim_num_, stim_type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetParam_StimParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:eb.NetParam.StimParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 stim_num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stim_num_)));
          set_has_stim_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_stim_size;
        break;
      }

      // required uint32 stim_size = 2;
      case 2: {
        if (tag == 16) {
         parse_stim_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stim_size_)));
          set_has_stim_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_stim_type;
        break;
      }

      // required uint32 stim_type = 3;
      case 3: {
        if (tag == 24) {
         parse_stim_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stim_type_)));
          set_has_stim_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:eb.NetParam.StimParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:eb.NetParam.StimParam)
  return false;
#undef DO_
}

void NetParam_StimParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:eb.NetParam.StimParam)
  // required uint32 stim_num = 1;
  if (has_stim_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stim_num(), output);
  }

  // required uint32 stim_size = 2;
  if (has_stim_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stim_size(), output);
  }

  // required uint32 stim_type = 3;
  if (has_stim_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->stim_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:eb.NetParam.StimParam)
}

::google::protobuf::uint8* NetParam_StimParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:eb.NetParam.StimParam)
  // required uint32 stim_num = 1;
  if (has_stim_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stim_num(), target);
  }

  // required uint32 stim_size = 2;
  if (has_stim_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->stim_size(), target);
  }

  // required uint32 stim_type = 3;
  if (has_stim_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->stim_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:eb.NetParam.StimParam)
  return target;
}

int NetParam_StimParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 stim_num = 1;
    if (has_stim_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stim_num());
    }

    // required uint32 stim_size = 2;
    if (has_stim_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stim_size());
    }

    // required uint32 stim_type = 3;
    if (has_stim_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stim_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetParam_StimParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetParam_StimParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetParam_StimParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetParam_StimParam::MergeFrom(const NetParam_StimParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stim_num()) {
      set_stim_num(from.stim_num());
    }
    if (from.has_stim_size()) {
      set_stim_size(from.stim_size());
    }
    if (from.has_stim_type()) {
      set_stim_type(from.stim_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetParam_StimParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetParam_StimParam::CopyFrom(const NetParam_StimParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetParam_StimParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void NetParam_StimParam::Swap(NetParam_StimParam* other) {
  if (other != this) {
    std::swap(stim_num_, other->stim_num_);
    std::swap(stim_size_, other->stim_size_);
    std::swap(stim_type_, other->stim_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetParam_StimParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetParam_StimParam_descriptor_;
  metadata.reflection = NetParam_StimParam_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int NetParam::kPopNumFieldNumber;
const int NetParam::kHcuNumFieldNumber;
const int NetParam::kHcuSlotFieldNumber;
const int NetParam::kMcuNumFieldNumber;
const int NetParam::kMcuFanoutFieldNumber;
const int NetParam::kStimParamFieldNumber;
const int NetParam::kProjParamFieldNumber;
const int NetParam::kPopParamFieldNumber;
#endif  // !_MSC_VER

NetParam::NetParam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:eb.NetParam)
}

void NetParam::InitAsDefaultInstance() {
  stim_param_ = const_cast< ::eb::NetParam_StimParam*>(&::eb::NetParam_StimParam::default_instance());
}

NetParam::NetParam(const NetParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:eb.NetParam)
}

void NetParam::SharedCtor() {
  _cached_size_ = 0;
  pop_num_ = 0u;
  hcu_num_ = 0u;
  hcu_slot_ = 0u;
  mcu_num_ = 0u;
  mcu_fanout_ = 0u;
  stim_param_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetParam::~NetParam() {
  // @@protoc_insertion_point(destructor:eb.NetParam)
  SharedDtor();
}

void NetParam::SharedDtor() {
  if (this != default_instance_) {
    delete stim_param_;
  }
}

void NetParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetParam_descriptor_;
}

const NetParam& NetParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_eBrain_2eproto();
  return *default_instance_;
}

NetParam* NetParam::default_instance_ = NULL;

NetParam* NetParam::New() const {
  return new NetParam;
}

void NetParam::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NetParam*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(pop_num_, mcu_num_);
    mcu_fanout_ = 0u;
    if (has_stim_param()) {
      if (stim_param_ != NULL) stim_param_->::eb::NetParam_StimParam::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  proj_param_.Clear();
  pop_param_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:eb.NetParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pop_num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pop_num_)));
          set_has_pop_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_hcu_num;
        break;
      }

      // optional uint32 hcu_num = 2;
      case 2: {
        if (tag == 16) {
         parse_hcu_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hcu_num_)));
          set_has_hcu_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hcu_slot;
        break;
      }

      // optional uint32 hcu_slot = 3;
      case 3: {
        if (tag == 24) {
         parse_hcu_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hcu_slot_)));
          set_has_hcu_slot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_mcu_num;
        break;
      }

      // optional uint32 mcu_num = 4;
      case 4: {
        if (tag == 32) {
         parse_mcu_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcu_num_)));
          set_has_mcu_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_mcu_fanout;
        break;
      }

      // optional uint32 mcu_fanout = 5;
      case 5: {
        if (tag == 40) {
         parse_mcu_fanout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcu_fanout_)));
          set_has_mcu_fanout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_stim_param;
        break;
      }

      // required .eb.NetParam.StimParam stim_param = 10;
      case 10: {
        if (tag == 82) {
         parse_stim_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stim_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_proj_param;
        break;
      }

      // repeated .eb.NetParam.ProjParam proj_param = 11;
      case 11: {
        if (tag == 90) {
         parse_proj_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_proj_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_proj_param;
        if (input->ExpectTag(162)) goto parse_pop_param;
        break;
      }

      // repeated .eb.NetParam.PopParam pop_param = 20;
      case 20: {
        if (tag == 162) {
         parse_pop_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pop_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_pop_param;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:eb.NetParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:eb.NetParam)
  return false;
#undef DO_
}

void NetParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:eb.NetParam)
  // optional uint32 pop_num = 1;
  if (has_pop_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pop_num(), output);
  }

  // optional uint32 hcu_num = 2;
  if (has_hcu_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hcu_num(), output);
  }

  // optional uint32 hcu_slot = 3;
  if (has_hcu_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hcu_slot(), output);
  }

  // optional uint32 mcu_num = 4;
  if (has_mcu_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->mcu_num(), output);
  }

  // optional uint32 mcu_fanout = 5;
  if (has_mcu_fanout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->mcu_fanout(), output);
  }

  // required .eb.NetParam.StimParam stim_param = 10;
  if (has_stim_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->stim_param(), output);
  }

  // repeated .eb.NetParam.ProjParam proj_param = 11;
  for (int i = 0; i < this->proj_param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->proj_param(i), output);
  }

  // repeated .eb.NetParam.PopParam pop_param = 20;
  for (int i = 0; i < this->pop_param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->pop_param(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:eb.NetParam)
}

::google::protobuf::uint8* NetParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:eb.NetParam)
  // optional uint32 pop_num = 1;
  if (has_pop_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pop_num(), target);
  }

  // optional uint32 hcu_num = 2;
  if (has_hcu_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hcu_num(), target);
  }

  // optional uint32 hcu_slot = 3;
  if (has_hcu_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hcu_slot(), target);
  }

  // optional uint32 mcu_num = 4;
  if (has_mcu_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->mcu_num(), target);
  }

  // optional uint32 mcu_fanout = 5;
  if (has_mcu_fanout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->mcu_fanout(), target);
  }

  // required .eb.NetParam.StimParam stim_param = 10;
  if (has_stim_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->stim_param(), target);
  }

  // repeated .eb.NetParam.ProjParam proj_param = 11;
  for (int i = 0; i < this->proj_param_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->proj_param(i), target);
  }

  // repeated .eb.NetParam.PopParam pop_param = 20;
  for (int i = 0; i < this->pop_param_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->pop_param(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:eb.NetParam)
  return target;
}

int NetParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 pop_num = 1;
    if (has_pop_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pop_num());
    }

    // optional uint32 hcu_num = 2;
    if (has_hcu_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hcu_num());
    }

    // optional uint32 hcu_slot = 3;
    if (has_hcu_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hcu_slot());
    }

    // optional uint32 mcu_num = 4;
    if (has_mcu_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcu_num());
    }

    // optional uint32 mcu_fanout = 5;
    if (has_mcu_fanout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcu_fanout());
    }

    // required .eb.NetParam.StimParam stim_param = 10;
    if (has_stim_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stim_param());
    }

  }
  // repeated .eb.NetParam.ProjParam proj_param = 11;
  total_size += 1 * this->proj_param_size();
  for (int i = 0; i < this->proj_param_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->proj_param(i));
  }

  // repeated .eb.NetParam.PopParam pop_param = 20;
  total_size += 2 * this->pop_param_size();
  for (int i = 0; i < this->pop_param_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pop_param(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetParam::MergeFrom(const NetParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  proj_param_.MergeFrom(from.proj_param_);
  pop_param_.MergeFrom(from.pop_param_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pop_num()) {
      set_pop_num(from.pop_num());
    }
    if (from.has_hcu_num()) {
      set_hcu_num(from.hcu_num());
    }
    if (from.has_hcu_slot()) {
      set_hcu_slot(from.hcu_slot());
    }
    if (from.has_mcu_num()) {
      set_mcu_num(from.mcu_num());
    }
    if (from.has_mcu_fanout()) {
      set_mcu_fanout(from.mcu_fanout());
    }
    if (from.has_stim_param()) {
      mutable_stim_param()->::eb::NetParam_StimParam::MergeFrom(from.stim_param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetParam::CopyFrom(const NetParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000020) != 0x00000020) return false;

  if (has_stim_param()) {
    if (!this->stim_param().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->proj_param())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->pop_param())) return false;
  return true;
}

void NetParam::Swap(NetParam* other) {
  if (other != this) {
    std::swap(pop_num_, other->pop_num_);
    std::swap(hcu_num_, other->hcu_num_);
    std::swap(hcu_slot_, other->hcu_slot_);
    std::swap(mcu_num_, other->mcu_num_);
    std::swap(mcu_fanout_, other->mcu_fanout_);
    std::swap(stim_param_, other->stim_param_);
    proj_param_.Swap(&other->proj_param_);
    pop_param_.Swap(&other->pop_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetParam_descriptor_;
  metadata.reflection = NetParam_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace eb

// @@protoc_insertion_point(global_scope)
