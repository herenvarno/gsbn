// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gsbn.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gsbn.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gsbn {

namespace {

const ::google::protobuf::Descriptor* SolverParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SolverParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* TimerParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimerParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecorderParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecorderParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* StimmerParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StimmerParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* NetParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* PopParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PopParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* HcuParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HcuParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* McuParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  McuParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProjParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProjParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* SolverState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SolverState_reflection_ = NULL;
const ::google::protobuf::Descriptor* TableState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TableState_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_gsbn_2eproto() {
  protobuf_AddDesc_gsbn_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "gsbn.proto");
  GOOGLE_CHECK(file != NULL);
  SolverParam_descriptor_ = file->message_type(0);
  static const int SolverParam_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParam, timer_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParam, recorder_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParam, stimmer_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParam, net_param_),
  };
  SolverParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SolverParam_descriptor_,
      SolverParam::default_instance_,
      SolverParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SolverParam));
  TimerParam_descriptor_ = file->message_type(1);
  static const int TimerParam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimerParam, sim_step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimerParam, sim_time_),
  };
  TimerParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TimerParam_descriptor_,
      TimerParam::default_instance_,
      TimerParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimerParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimerParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TimerParam));
  RecorderParam_descriptor_ = file->message_type(2);
  static const int RecorderParam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecorderParam, record_freq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecorderParam, record_dir_),
  };
  RecorderParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecorderParam_descriptor_,
      RecorderParam::default_instance_,
      RecorderParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecorderParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecorderParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecorderParam));
  StimmerParam_descriptor_ = file->message_type(3);
  static const int StimmerParam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StimmerParam, rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StimmerParam, cols_),
  };
  StimmerParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StimmerParam_descriptor_,
      StimmerParam::default_instance_,
      StimmerParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StimmerParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StimmerParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StimmerParam));
  NetParam_descriptor_ = file->message_type(4);
  static const int NetParam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParam, pop_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParam, proj_param_),
  };
  NetParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetParam_descriptor_,
      NetParam::default_instance_,
      NetParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetParam));
  PopParam_descriptor_ = file->message_type(5);
  static const int PopParam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopParam, pop_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopParam, hcu_param_),
  };
  PopParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PopParam_descriptor_,
      PopParam::default_instance_,
      PopParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PopParam));
  HcuParam_descriptor_ = file->message_type(6);
  static const int HcuParam_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HcuParam, hcu_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HcuParam, slot_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HcuParam, mcu_param_),
  };
  HcuParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HcuParam_descriptor_,
      HcuParam::default_instance_,
      HcuParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HcuParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HcuParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HcuParam));
  McuParam_descriptor_ = file->message_type(7);
  static const int McuParam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(McuParam, mcu_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(McuParam, mcu_fanout_),
  };
  McuParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      McuParam_descriptor_,
      McuParam::default_instance_,
      McuParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(McuParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(McuParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(McuParam));
  ProjParam_descriptor_ = file->message_type(8);
  static const int ProjParam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjParam, src_pop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjParam, desc_pop_),
  };
  ProjParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProjParam_descriptor_,
      ProjParam::default_instance_,
      ProjParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProjParam));
  SolverState_descriptor_ = file->message_type(9);
  static const int SolverState_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverState, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverState, table_state_),
  };
  SolverState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SolverState_descriptor_,
      SolverState::default_instance_,
      SolverState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SolverState));
  TableState_descriptor_ = file->message_type(10);
  static const int TableState_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableState, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableState, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableState, data_),
  };
  TableState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TableState_descriptor_,
      TableState::default_instance_,
      TableState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TableState));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_gsbn_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SolverParam_descriptor_, &SolverParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TimerParam_descriptor_, &TimerParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecorderParam_descriptor_, &RecorderParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StimmerParam_descriptor_, &StimmerParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetParam_descriptor_, &NetParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PopParam_descriptor_, &PopParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HcuParam_descriptor_, &HcuParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    McuParam_descriptor_, &McuParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProjParam_descriptor_, &ProjParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SolverState_descriptor_, &SolverState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TableState_descriptor_, &TableState::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_gsbn_2eproto() {
  delete SolverParam::default_instance_;
  delete SolverParam_reflection_;
  delete TimerParam::default_instance_;
  delete TimerParam_reflection_;
  delete RecorderParam::default_instance_;
  delete RecorderParam_reflection_;
  delete StimmerParam::default_instance_;
  delete StimmerParam_reflection_;
  delete NetParam::default_instance_;
  delete NetParam_reflection_;
  delete PopParam::default_instance_;
  delete PopParam_reflection_;
  delete HcuParam::default_instance_;
  delete HcuParam_reflection_;
  delete McuParam::default_instance_;
  delete McuParam_reflection_;
  delete ProjParam::default_instance_;
  delete ProjParam_reflection_;
  delete SolverState::default_instance_;
  delete SolverState_reflection_;
  delete TableState::default_instance_;
  delete TableState_reflection_;
}

void protobuf_AddDesc_gsbn_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ngsbn.proto\022\004gsbn\"\257\001\n\013SolverParam\022%\n\013ti"
    "mer_param\030\001 \002(\0132\020.gsbn.TimerParam\022+\n\016rec"
    "order_param\030\002 \002(\0132\023.gsbn.RecorderParam\022)"
    "\n\rstimmer_param\030\003 \002(\0132\022.gsbn.StimmerPara"
    "m\022!\n\tnet_param\030\004 \002(\0132\016.gsbn.NetParam\"3\n\n"
    "TimerParam\022\023\n\010sim_step\030\001 \002(\r:\0011\022\020\n\010sim_t"
    "ime\030\002 \002(\r\"8\n\rRecorderParam\022\023\n\013record_fre"
    "q\030\001 \002(\r\022\022\n\nrecord_dir\030\002 \002(\t\"*\n\014StimmerPa"
    "ram\022\014\n\004rows\030\001 \002(\r\022\014\n\004cols\030\002 \002(\r\"R\n\010NetPa"
    "ram\022!\n\tpop_param\030\001 \003(\0132\016.gsbn.PopParam\022#"
    "\n\nproj_param\030\002 \003(\0132\017.gsbn.ProjParam\">\n\010P"
    "opParam\022\017\n\007pop_num\030\001 \002(\r\022!\n\thcu_param\030\002 "
    "\003(\0132\016.gsbn.HcuParam\"P\n\010HcuParam\022\017\n\007hcu_n"
    "um\030\001 \002(\r\022\020\n\010slot_num\030\002 \002(\r\022!\n\tmcu_param\030"
    "\003 \003(\0132\016.gsbn.McuParam\"/\n\010McuParam\022\017\n\007mcu"
    "_num\030\001 \002(\r\022\022\n\nmcu_fanout\030\002 \002(\r\".\n\tProjPa"
    "ram\022\017\n\007src_pop\030\001 \002(\r\022\020\n\010desc_pop\030\002 \002(\r\"G"
    "\n\013SolverState\022\021\n\ttimestamp\030\001 \002(\r\022%\n\013tabl"
    "e_state\030\002 \003(\0132\020.gsbn.TableState\"6\n\nTable"
    "State\022\014\n\004name\030\001 \002(\t\022\014\n\004desc\030\002 \002(\014\022\014\n\004dat"
    "a\030\003 \002(\014", 807);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gsbn.proto", &protobuf_RegisterTypes);
  SolverParam::default_instance_ = new SolverParam();
  TimerParam::default_instance_ = new TimerParam();
  RecorderParam::default_instance_ = new RecorderParam();
  StimmerParam::default_instance_ = new StimmerParam();
  NetParam::default_instance_ = new NetParam();
  PopParam::default_instance_ = new PopParam();
  HcuParam::default_instance_ = new HcuParam();
  McuParam::default_instance_ = new McuParam();
  ProjParam::default_instance_ = new ProjParam();
  SolverState::default_instance_ = new SolverState();
  TableState::default_instance_ = new TableState();
  SolverParam::default_instance_->InitAsDefaultInstance();
  TimerParam::default_instance_->InitAsDefaultInstance();
  RecorderParam::default_instance_->InitAsDefaultInstance();
  StimmerParam::default_instance_->InitAsDefaultInstance();
  NetParam::default_instance_->InitAsDefaultInstance();
  PopParam::default_instance_->InitAsDefaultInstance();
  HcuParam::default_instance_->InitAsDefaultInstance();
  McuParam::default_instance_->InitAsDefaultInstance();
  ProjParam::default_instance_->InitAsDefaultInstance();
  SolverState::default_instance_->InitAsDefaultInstance();
  TableState::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_gsbn_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_gsbn_2eproto {
  StaticDescriptorInitializer_gsbn_2eproto() {
    protobuf_AddDesc_gsbn_2eproto();
  }
} static_descriptor_initializer_gsbn_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SolverParam::kTimerParamFieldNumber;
const int SolverParam::kRecorderParamFieldNumber;
const int SolverParam::kStimmerParamFieldNumber;
const int SolverParam::kNetParamFieldNumber;
#endif  // !_MSC_VER

SolverParam::SolverParam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gsbn.SolverParam)
}

void SolverParam::InitAsDefaultInstance() {
  timer_param_ = const_cast< ::gsbn::TimerParam*>(&::gsbn::TimerParam::default_instance());
  recorder_param_ = const_cast< ::gsbn::RecorderParam*>(&::gsbn::RecorderParam::default_instance());
  stimmer_param_ = const_cast< ::gsbn::StimmerParam*>(&::gsbn::StimmerParam::default_instance());
  net_param_ = const_cast< ::gsbn::NetParam*>(&::gsbn::NetParam::default_instance());
}

SolverParam::SolverParam(const SolverParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gsbn.SolverParam)
}

void SolverParam::SharedCtor() {
  _cached_size_ = 0;
  timer_param_ = NULL;
  recorder_param_ = NULL;
  stimmer_param_ = NULL;
  net_param_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SolverParam::~SolverParam() {
  // @@protoc_insertion_point(destructor:gsbn.SolverParam)
  SharedDtor();
}

void SolverParam::SharedDtor() {
  if (this != default_instance_) {
    delete timer_param_;
    delete recorder_param_;
    delete stimmer_param_;
    delete net_param_;
  }
}

void SolverParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SolverParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SolverParam_descriptor_;
}

const SolverParam& SolverParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gsbn_2eproto();
  return *default_instance_;
}

SolverParam* SolverParam::default_instance_ = NULL;

SolverParam* SolverParam::New() const {
  return new SolverParam;
}

void SolverParam::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_timer_param()) {
      if (timer_param_ != NULL) timer_param_->::gsbn::TimerParam::Clear();
    }
    if (has_recorder_param()) {
      if (recorder_param_ != NULL) recorder_param_->::gsbn::RecorderParam::Clear();
    }
    if (has_stimmer_param()) {
      if (stimmer_param_ != NULL) stimmer_param_->::gsbn::StimmerParam::Clear();
    }
    if (has_net_param()) {
      if (net_param_ != NULL) net_param_->::gsbn::NetParam::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SolverParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gsbn.SolverParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gsbn.TimerParam timer_param = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timer_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_recorder_param;
        break;
      }

      // required .gsbn.RecorderParam recorder_param = 2;
      case 2: {
        if (tag == 18) {
         parse_recorder_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recorder_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_stimmer_param;
        break;
      }

      // required .gsbn.StimmerParam stimmer_param = 3;
      case 3: {
        if (tag == 26) {
         parse_stimmer_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stimmer_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_net_param;
        break;
      }

      // required .gsbn.NetParam net_param = 4;
      case 4: {
        if (tag == 34) {
         parse_net_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_net_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gsbn.SolverParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gsbn.SolverParam)
  return false;
#undef DO_
}

void SolverParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gsbn.SolverParam)
  // required .gsbn.TimerParam timer_param = 1;
  if (has_timer_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->timer_param(), output);
  }

  // required .gsbn.RecorderParam recorder_param = 2;
  if (has_recorder_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->recorder_param(), output);
  }

  // required .gsbn.StimmerParam stimmer_param = 3;
  if (has_stimmer_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->stimmer_param(), output);
  }

  // required .gsbn.NetParam net_param = 4;
  if (has_net_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->net_param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gsbn.SolverParam)
}

::google::protobuf::uint8* SolverParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gsbn.SolverParam)
  // required .gsbn.TimerParam timer_param = 1;
  if (has_timer_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->timer_param(), target);
  }

  // required .gsbn.RecorderParam recorder_param = 2;
  if (has_recorder_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->recorder_param(), target);
  }

  // required .gsbn.StimmerParam stimmer_param = 3;
  if (has_stimmer_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->stimmer_param(), target);
  }

  // required .gsbn.NetParam net_param = 4;
  if (has_net_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->net_param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gsbn.SolverParam)
  return target;
}

int SolverParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .gsbn.TimerParam timer_param = 1;
    if (has_timer_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->timer_param());
    }

    // required .gsbn.RecorderParam recorder_param = 2;
    if (has_recorder_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->recorder_param());
    }

    // required .gsbn.StimmerParam stimmer_param = 3;
    if (has_stimmer_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stimmer_param());
    }

    // required .gsbn.NetParam net_param = 4;
    if (has_net_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->net_param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SolverParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SolverParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SolverParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SolverParam::MergeFrom(const SolverParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timer_param()) {
      mutable_timer_param()->::gsbn::TimerParam::MergeFrom(from.timer_param());
    }
    if (from.has_recorder_param()) {
      mutable_recorder_param()->::gsbn::RecorderParam::MergeFrom(from.recorder_param());
    }
    if (from.has_stimmer_param()) {
      mutable_stimmer_param()->::gsbn::StimmerParam::MergeFrom(from.stimmer_param());
    }
    if (from.has_net_param()) {
      mutable_net_param()->::gsbn::NetParam::MergeFrom(from.net_param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SolverParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SolverParam::CopyFrom(const SolverParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SolverParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_timer_param()) {
    if (!this->timer_param().IsInitialized()) return false;
  }
  if (has_recorder_param()) {
    if (!this->recorder_param().IsInitialized()) return false;
  }
  if (has_stimmer_param()) {
    if (!this->stimmer_param().IsInitialized()) return false;
  }
  if (has_net_param()) {
    if (!this->net_param().IsInitialized()) return false;
  }
  return true;
}

void SolverParam::Swap(SolverParam* other) {
  if (other != this) {
    std::swap(timer_param_, other->timer_param_);
    std::swap(recorder_param_, other->recorder_param_);
    std::swap(stimmer_param_, other->stimmer_param_);
    std::swap(net_param_, other->net_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SolverParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SolverParam_descriptor_;
  metadata.reflection = SolverParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TimerParam::kSimStepFieldNumber;
const int TimerParam::kSimTimeFieldNumber;
#endif  // !_MSC_VER

TimerParam::TimerParam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gsbn.TimerParam)
}

void TimerParam::InitAsDefaultInstance() {
}

TimerParam::TimerParam(const TimerParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gsbn.TimerParam)
}

void TimerParam::SharedCtor() {
  _cached_size_ = 0;
  sim_step_ = 1u;
  sim_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimerParam::~TimerParam() {
  // @@protoc_insertion_point(destructor:gsbn.TimerParam)
  SharedDtor();
}

void TimerParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TimerParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimerParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimerParam_descriptor_;
}

const TimerParam& TimerParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gsbn_2eproto();
  return *default_instance_;
}

TimerParam* TimerParam::default_instance_ = NULL;

TimerParam* TimerParam::New() const {
  return new TimerParam;
}

void TimerParam::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    sim_step_ = 1u;
    sim_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TimerParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gsbn.TimerParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 sim_step = 1 [default = 1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sim_step_)));
          set_has_sim_step();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sim_time;
        break;
      }

      // required uint32 sim_time = 2;
      case 2: {
        if (tag == 16) {
         parse_sim_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sim_time_)));
          set_has_sim_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gsbn.TimerParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gsbn.TimerParam)
  return false;
#undef DO_
}

void TimerParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gsbn.TimerParam)
  // required uint32 sim_step = 1 [default = 1];
  if (has_sim_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sim_step(), output);
  }

  // required uint32 sim_time = 2;
  if (has_sim_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sim_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gsbn.TimerParam)
}

::google::protobuf::uint8* TimerParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gsbn.TimerParam)
  // required uint32 sim_step = 1 [default = 1];
  if (has_sim_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sim_step(), target);
  }

  // required uint32 sim_time = 2;
  if (has_sim_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sim_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gsbn.TimerParam)
  return target;
}

int TimerParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 sim_step = 1 [default = 1];
    if (has_sim_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sim_step());
    }

    // required uint32 sim_time = 2;
    if (has_sim_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sim_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimerParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TimerParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TimerParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TimerParam::MergeFrom(const TimerParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sim_step()) {
      set_sim_step(from.sim_step());
    }
    if (from.has_sim_time()) {
      set_sim_time(from.sim_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TimerParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimerParam::CopyFrom(const TimerParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimerParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TimerParam::Swap(TimerParam* other) {
  if (other != this) {
    std::swap(sim_step_, other->sim_step_);
    std::swap(sim_time_, other->sim_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TimerParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimerParam_descriptor_;
  metadata.reflection = TimerParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecorderParam::kRecordFreqFieldNumber;
const int RecorderParam::kRecordDirFieldNumber;
#endif  // !_MSC_VER

RecorderParam::RecorderParam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gsbn.RecorderParam)
}

void RecorderParam::InitAsDefaultInstance() {
}

RecorderParam::RecorderParam(const RecorderParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gsbn.RecorderParam)
}

void RecorderParam::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  record_freq_ = 0u;
  record_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecorderParam::~RecorderParam() {
  // @@protoc_insertion_point(destructor:gsbn.RecorderParam)
  SharedDtor();
}

void RecorderParam::SharedDtor() {
  if (record_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete record_dir_;
  }
  if (this != default_instance_) {
  }
}

void RecorderParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecorderParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecorderParam_descriptor_;
}

const RecorderParam& RecorderParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gsbn_2eproto();
  return *default_instance_;
}

RecorderParam* RecorderParam::default_instance_ = NULL;

RecorderParam* RecorderParam::New() const {
  return new RecorderParam;
}

void RecorderParam::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    record_freq_ = 0u;
    if (has_record_dir()) {
      if (record_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        record_dir_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecorderParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gsbn.RecorderParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 record_freq = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &record_freq_)));
          set_has_record_freq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_record_dir;
        break;
      }

      // required string record_dir = 2;
      case 2: {
        if (tag == 18) {
         parse_record_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_record_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->record_dir().data(), this->record_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "record_dir");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gsbn.RecorderParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gsbn.RecorderParam)
  return false;
#undef DO_
}

void RecorderParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gsbn.RecorderParam)
  // required uint32 record_freq = 1;
  if (has_record_freq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->record_freq(), output);
  }

  // required string record_dir = 2;
  if (has_record_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->record_dir().data(), this->record_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "record_dir");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->record_dir(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gsbn.RecorderParam)
}

::google::protobuf::uint8* RecorderParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gsbn.RecorderParam)
  // required uint32 record_freq = 1;
  if (has_record_freq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->record_freq(), target);
  }

  // required string record_dir = 2;
  if (has_record_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->record_dir().data(), this->record_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "record_dir");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->record_dir(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gsbn.RecorderParam)
  return target;
}

int RecorderParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 record_freq = 1;
    if (has_record_freq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->record_freq());
    }

    // required string record_dir = 2;
    if (has_record_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->record_dir());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecorderParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecorderParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecorderParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecorderParam::MergeFrom(const RecorderParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_record_freq()) {
      set_record_freq(from.record_freq());
    }
    if (from.has_record_dir()) {
      set_record_dir(from.record_dir());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecorderParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecorderParam::CopyFrom(const RecorderParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecorderParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RecorderParam::Swap(RecorderParam* other) {
  if (other != this) {
    std::swap(record_freq_, other->record_freq_);
    std::swap(record_dir_, other->record_dir_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecorderParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecorderParam_descriptor_;
  metadata.reflection = RecorderParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StimmerParam::kRowsFieldNumber;
const int StimmerParam::kColsFieldNumber;
#endif  // !_MSC_VER

StimmerParam::StimmerParam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gsbn.StimmerParam)
}

void StimmerParam::InitAsDefaultInstance() {
}

StimmerParam::StimmerParam(const StimmerParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gsbn.StimmerParam)
}

void StimmerParam::SharedCtor() {
  _cached_size_ = 0;
  rows_ = 0u;
  cols_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StimmerParam::~StimmerParam() {
  // @@protoc_insertion_point(destructor:gsbn.StimmerParam)
  SharedDtor();
}

void StimmerParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StimmerParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StimmerParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StimmerParam_descriptor_;
}

const StimmerParam& StimmerParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gsbn_2eproto();
  return *default_instance_;
}

StimmerParam* StimmerParam::default_instance_ = NULL;

StimmerParam* StimmerParam::New() const {
  return new StimmerParam;
}

void StimmerParam::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StimmerParam*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(rows_, cols_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StimmerParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gsbn.StimmerParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 rows = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rows_)));
          set_has_rows();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cols;
        break;
      }

      // required uint32 cols = 2;
      case 2: {
        if (tag == 16) {
         parse_cols:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cols_)));
          set_has_cols();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gsbn.StimmerParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gsbn.StimmerParam)
  return false;
#undef DO_
}

void StimmerParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gsbn.StimmerParam)
  // required uint32 rows = 1;
  if (has_rows()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rows(), output);
  }

  // required uint32 cols = 2;
  if (has_cols()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cols(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gsbn.StimmerParam)
}

::google::protobuf::uint8* StimmerParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gsbn.StimmerParam)
  // required uint32 rows = 1;
  if (has_rows()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rows(), target);
  }

  // required uint32 cols = 2;
  if (has_cols()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cols(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gsbn.StimmerParam)
  return target;
}

int StimmerParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 rows = 1;
    if (has_rows()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rows());
    }

    // required uint32 cols = 2;
    if (has_cols()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cols());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StimmerParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StimmerParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StimmerParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StimmerParam::MergeFrom(const StimmerParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rows()) {
      set_rows(from.rows());
    }
    if (from.has_cols()) {
      set_cols(from.cols());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StimmerParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StimmerParam::CopyFrom(const StimmerParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StimmerParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void StimmerParam::Swap(StimmerParam* other) {
  if (other != this) {
    std::swap(rows_, other->rows_);
    std::swap(cols_, other->cols_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StimmerParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StimmerParam_descriptor_;
  metadata.reflection = StimmerParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NetParam::kPopParamFieldNumber;
const int NetParam::kProjParamFieldNumber;
#endif  // !_MSC_VER

NetParam::NetParam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gsbn.NetParam)
}

void NetParam::InitAsDefaultInstance() {
}

NetParam::NetParam(const NetParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gsbn.NetParam)
}

void NetParam::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetParam::~NetParam() {
  // @@protoc_insertion_point(destructor:gsbn.NetParam)
  SharedDtor();
}

void NetParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetParam_descriptor_;
}

const NetParam& NetParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gsbn_2eproto();
  return *default_instance_;
}

NetParam* NetParam::default_instance_ = NULL;

NetParam* NetParam::New() const {
  return new NetParam;
}

void NetParam::Clear() {
  pop_param_.Clear();
  proj_param_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gsbn.NetParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .gsbn.PopParam pop_param = 1;
      case 1: {
        if (tag == 10) {
         parse_pop_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pop_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_pop_param;
        if (input->ExpectTag(18)) goto parse_proj_param;
        break;
      }

      // repeated .gsbn.ProjParam proj_param = 2;
      case 2: {
        if (tag == 18) {
         parse_proj_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_proj_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_proj_param;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gsbn.NetParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gsbn.NetParam)
  return false;
#undef DO_
}

void NetParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gsbn.NetParam)
  // repeated .gsbn.PopParam pop_param = 1;
  for (int i = 0; i < this->pop_param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pop_param(i), output);
  }

  // repeated .gsbn.ProjParam proj_param = 2;
  for (int i = 0; i < this->proj_param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->proj_param(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gsbn.NetParam)
}

::google::protobuf::uint8* NetParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gsbn.NetParam)
  // repeated .gsbn.PopParam pop_param = 1;
  for (int i = 0; i < this->pop_param_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pop_param(i), target);
  }

  // repeated .gsbn.ProjParam proj_param = 2;
  for (int i = 0; i < this->proj_param_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->proj_param(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gsbn.NetParam)
  return target;
}

int NetParam::ByteSize() const {
  int total_size = 0;

  // repeated .gsbn.PopParam pop_param = 1;
  total_size += 1 * this->pop_param_size();
  for (int i = 0; i < this->pop_param_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pop_param(i));
  }

  // repeated .gsbn.ProjParam proj_param = 2;
  total_size += 1 * this->proj_param_size();
  for (int i = 0; i < this->proj_param_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->proj_param(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetParam::MergeFrom(const NetParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  pop_param_.MergeFrom(from.pop_param_);
  proj_param_.MergeFrom(from.proj_param_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetParam::CopyFrom(const NetParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetParam::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->pop_param())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->proj_param())) return false;
  return true;
}

void NetParam::Swap(NetParam* other) {
  if (other != this) {
    pop_param_.Swap(&other->pop_param_);
    proj_param_.Swap(&other->proj_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetParam_descriptor_;
  metadata.reflection = NetParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PopParam::kPopNumFieldNumber;
const int PopParam::kHcuParamFieldNumber;
#endif  // !_MSC_VER

PopParam::PopParam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gsbn.PopParam)
}

void PopParam::InitAsDefaultInstance() {
}

PopParam::PopParam(const PopParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gsbn.PopParam)
}

void PopParam::SharedCtor() {
  _cached_size_ = 0;
  pop_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PopParam::~PopParam() {
  // @@protoc_insertion_point(destructor:gsbn.PopParam)
  SharedDtor();
}

void PopParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PopParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PopParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PopParam_descriptor_;
}

const PopParam& PopParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gsbn_2eproto();
  return *default_instance_;
}

PopParam* PopParam::default_instance_ = NULL;

PopParam* PopParam::New() const {
  return new PopParam;
}

void PopParam::Clear() {
  pop_num_ = 0u;
  hcu_param_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PopParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gsbn.PopParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 pop_num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pop_num_)));
          set_has_pop_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_hcu_param;
        break;
      }

      // repeated .gsbn.HcuParam hcu_param = 2;
      case 2: {
        if (tag == 18) {
         parse_hcu_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hcu_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_hcu_param;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gsbn.PopParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gsbn.PopParam)
  return false;
#undef DO_
}

void PopParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gsbn.PopParam)
  // required uint32 pop_num = 1;
  if (has_pop_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pop_num(), output);
  }

  // repeated .gsbn.HcuParam hcu_param = 2;
  for (int i = 0; i < this->hcu_param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->hcu_param(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gsbn.PopParam)
}

::google::protobuf::uint8* PopParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gsbn.PopParam)
  // required uint32 pop_num = 1;
  if (has_pop_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pop_num(), target);
  }

  // repeated .gsbn.HcuParam hcu_param = 2;
  for (int i = 0; i < this->hcu_param_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->hcu_param(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gsbn.PopParam)
  return target;
}

int PopParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 pop_num = 1;
    if (has_pop_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pop_num());
    }

  }
  // repeated .gsbn.HcuParam hcu_param = 2;
  total_size += 1 * this->hcu_param_size();
  for (int i = 0; i < this->hcu_param_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hcu_param(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PopParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PopParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PopParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PopParam::MergeFrom(const PopParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  hcu_param_.MergeFrom(from.hcu_param_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pop_num()) {
      set_pop_num(from.pop_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PopParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PopParam::CopyFrom(const PopParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PopParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->hcu_param())) return false;
  return true;
}

void PopParam::Swap(PopParam* other) {
  if (other != this) {
    std::swap(pop_num_, other->pop_num_);
    hcu_param_.Swap(&other->hcu_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PopParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PopParam_descriptor_;
  metadata.reflection = PopParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HcuParam::kHcuNumFieldNumber;
const int HcuParam::kSlotNumFieldNumber;
const int HcuParam::kMcuParamFieldNumber;
#endif  // !_MSC_VER

HcuParam::HcuParam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gsbn.HcuParam)
}

void HcuParam::InitAsDefaultInstance() {
}

HcuParam::HcuParam(const HcuParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gsbn.HcuParam)
}

void HcuParam::SharedCtor() {
  _cached_size_ = 0;
  hcu_num_ = 0u;
  slot_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HcuParam::~HcuParam() {
  // @@protoc_insertion_point(destructor:gsbn.HcuParam)
  SharedDtor();
}

void HcuParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HcuParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HcuParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HcuParam_descriptor_;
}

const HcuParam& HcuParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gsbn_2eproto();
  return *default_instance_;
}

HcuParam* HcuParam::default_instance_ = NULL;

HcuParam* HcuParam::New() const {
  return new HcuParam;
}

void HcuParam::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HcuParam*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(hcu_num_, slot_num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  mcu_param_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HcuParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gsbn.HcuParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 hcu_num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hcu_num_)));
          set_has_hcu_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_slot_num;
        break;
      }

      // required uint32 slot_num = 2;
      case 2: {
        if (tag == 16) {
         parse_slot_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_num_)));
          set_has_slot_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mcu_param;
        break;
      }

      // repeated .gsbn.McuParam mcu_param = 3;
      case 3: {
        if (tag == 26) {
         parse_mcu_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mcu_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mcu_param;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gsbn.HcuParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gsbn.HcuParam)
  return false;
#undef DO_
}

void HcuParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gsbn.HcuParam)
  // required uint32 hcu_num = 1;
  if (has_hcu_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hcu_num(), output);
  }

  // required uint32 slot_num = 2;
  if (has_slot_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->slot_num(), output);
  }

  // repeated .gsbn.McuParam mcu_param = 3;
  for (int i = 0; i < this->mcu_param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->mcu_param(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gsbn.HcuParam)
}

::google::protobuf::uint8* HcuParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gsbn.HcuParam)
  // required uint32 hcu_num = 1;
  if (has_hcu_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hcu_num(), target);
  }

  // required uint32 slot_num = 2;
  if (has_slot_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->slot_num(), target);
  }

  // repeated .gsbn.McuParam mcu_param = 3;
  for (int i = 0; i < this->mcu_param_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->mcu_param(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gsbn.HcuParam)
  return target;
}

int HcuParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 hcu_num = 1;
    if (has_hcu_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hcu_num());
    }

    // required uint32 slot_num = 2;
    if (has_slot_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot_num());
    }

  }
  // repeated .gsbn.McuParam mcu_param = 3;
  total_size += 1 * this->mcu_param_size();
  for (int i = 0; i < this->mcu_param_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mcu_param(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HcuParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HcuParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HcuParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HcuParam::MergeFrom(const HcuParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  mcu_param_.MergeFrom(from.mcu_param_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hcu_num()) {
      set_hcu_num(from.hcu_num());
    }
    if (from.has_slot_num()) {
      set_slot_num(from.slot_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HcuParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HcuParam::CopyFrom(const HcuParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HcuParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->mcu_param())) return false;
  return true;
}

void HcuParam::Swap(HcuParam* other) {
  if (other != this) {
    std::swap(hcu_num_, other->hcu_num_);
    std::swap(slot_num_, other->slot_num_);
    mcu_param_.Swap(&other->mcu_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HcuParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HcuParam_descriptor_;
  metadata.reflection = HcuParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int McuParam::kMcuNumFieldNumber;
const int McuParam::kMcuFanoutFieldNumber;
#endif  // !_MSC_VER

McuParam::McuParam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gsbn.McuParam)
}

void McuParam::InitAsDefaultInstance() {
}

McuParam::McuParam(const McuParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gsbn.McuParam)
}

void McuParam::SharedCtor() {
  _cached_size_ = 0;
  mcu_num_ = 0u;
  mcu_fanout_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

McuParam::~McuParam() {
  // @@protoc_insertion_point(destructor:gsbn.McuParam)
  SharedDtor();
}

void McuParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void McuParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* McuParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return McuParam_descriptor_;
}

const McuParam& McuParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gsbn_2eproto();
  return *default_instance_;
}

McuParam* McuParam::default_instance_ = NULL;

McuParam* McuParam::New() const {
  return new McuParam;
}

void McuParam::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<McuParam*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(mcu_num_, mcu_fanout_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool McuParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gsbn.McuParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mcu_num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcu_num_)));
          set_has_mcu_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcu_fanout;
        break;
      }

      // required uint32 mcu_fanout = 2;
      case 2: {
        if (tag == 16) {
         parse_mcu_fanout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcu_fanout_)));
          set_has_mcu_fanout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gsbn.McuParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gsbn.McuParam)
  return false;
#undef DO_
}

void McuParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gsbn.McuParam)
  // required uint32 mcu_num = 1;
  if (has_mcu_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mcu_num(), output);
  }

  // required uint32 mcu_fanout = 2;
  if (has_mcu_fanout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcu_fanout(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gsbn.McuParam)
}

::google::protobuf::uint8* McuParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gsbn.McuParam)
  // required uint32 mcu_num = 1;
  if (has_mcu_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mcu_num(), target);
  }

  // required uint32 mcu_fanout = 2;
  if (has_mcu_fanout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcu_fanout(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gsbn.McuParam)
  return target;
}

int McuParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 mcu_num = 1;
    if (has_mcu_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcu_num());
    }

    // required uint32 mcu_fanout = 2;
    if (has_mcu_fanout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcu_fanout());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void McuParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const McuParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const McuParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void McuParam::MergeFrom(const McuParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mcu_num()) {
      set_mcu_num(from.mcu_num());
    }
    if (from.has_mcu_fanout()) {
      set_mcu_fanout(from.mcu_fanout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void McuParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void McuParam::CopyFrom(const McuParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool McuParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void McuParam::Swap(McuParam* other) {
  if (other != this) {
    std::swap(mcu_num_, other->mcu_num_);
    std::swap(mcu_fanout_, other->mcu_fanout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata McuParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = McuParam_descriptor_;
  metadata.reflection = McuParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProjParam::kSrcPopFieldNumber;
const int ProjParam::kDescPopFieldNumber;
#endif  // !_MSC_VER

ProjParam::ProjParam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gsbn.ProjParam)
}

void ProjParam::InitAsDefaultInstance() {
}

ProjParam::ProjParam(const ProjParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gsbn.ProjParam)
}

void ProjParam::SharedCtor() {
  _cached_size_ = 0;
  src_pop_ = 0u;
  desc_pop_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProjParam::~ProjParam() {
  // @@protoc_insertion_point(destructor:gsbn.ProjParam)
  SharedDtor();
}

void ProjParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProjParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProjParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProjParam_descriptor_;
}

const ProjParam& ProjParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gsbn_2eproto();
  return *default_instance_;
}

ProjParam* ProjParam::default_instance_ = NULL;

ProjParam* ProjParam::New() const {
  return new ProjParam;
}

void ProjParam::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ProjParam*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(src_pop_, desc_pop_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProjParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gsbn.ProjParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 src_pop = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &src_pop_)));
          set_has_src_pop();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_desc_pop;
        break;
      }

      // required uint32 desc_pop = 2;
      case 2: {
        if (tag == 16) {
         parse_desc_pop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &desc_pop_)));
          set_has_desc_pop();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gsbn.ProjParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gsbn.ProjParam)
  return false;
#undef DO_
}

void ProjParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gsbn.ProjParam)
  // required uint32 src_pop = 1;
  if (has_src_pop()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->src_pop(), output);
  }

  // required uint32 desc_pop = 2;
  if (has_desc_pop()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->desc_pop(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gsbn.ProjParam)
}

::google::protobuf::uint8* ProjParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gsbn.ProjParam)
  // required uint32 src_pop = 1;
  if (has_src_pop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->src_pop(), target);
  }

  // required uint32 desc_pop = 2;
  if (has_desc_pop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->desc_pop(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gsbn.ProjParam)
  return target;
}

int ProjParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 src_pop = 1;
    if (has_src_pop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->src_pop());
    }

    // required uint32 desc_pop = 2;
    if (has_desc_pop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->desc_pop());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProjParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProjParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProjParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProjParam::MergeFrom(const ProjParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src_pop()) {
      set_src_pop(from.src_pop());
    }
    if (from.has_desc_pop()) {
      set_desc_pop(from.desc_pop());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProjParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProjParam::CopyFrom(const ProjParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProjParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ProjParam::Swap(ProjParam* other) {
  if (other != this) {
    std::swap(src_pop_, other->src_pop_);
    std::swap(desc_pop_, other->desc_pop_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProjParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProjParam_descriptor_;
  metadata.reflection = ProjParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SolverState::kTimestampFieldNumber;
const int SolverState::kTableStateFieldNumber;
#endif  // !_MSC_VER

SolverState::SolverState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gsbn.SolverState)
}

void SolverState::InitAsDefaultInstance() {
}

SolverState::SolverState(const SolverState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gsbn.SolverState)
}

void SolverState::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SolverState::~SolverState() {
  // @@protoc_insertion_point(destructor:gsbn.SolverState)
  SharedDtor();
}

void SolverState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SolverState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SolverState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SolverState_descriptor_;
}

const SolverState& SolverState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gsbn_2eproto();
  return *default_instance_;
}

SolverState* SolverState::default_instance_ = NULL;

SolverState* SolverState::New() const {
  return new SolverState;
}

void SolverState::Clear() {
  timestamp_ = 0u;
  table_state_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SolverState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gsbn.SolverState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 timestamp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_table_state;
        break;
      }

      // repeated .gsbn.TableState table_state = 2;
      case 2: {
        if (tag == 18) {
         parse_table_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_table_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_table_state;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gsbn.SolverState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gsbn.SolverState)
  return false;
#undef DO_
}

void SolverState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gsbn.SolverState)
  // required uint32 timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->timestamp(), output);
  }

  // repeated .gsbn.TableState table_state = 2;
  for (int i = 0; i < this->table_state_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->table_state(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gsbn.SolverState)
}

::google::protobuf::uint8* SolverState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gsbn.SolverState)
  // required uint32 timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->timestamp(), target);
  }

  // repeated .gsbn.TableState table_state = 2;
  for (int i = 0; i < this->table_state_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->table_state(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gsbn.SolverState)
  return target;
}

int SolverState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

  }
  // repeated .gsbn.TableState table_state = 2;
  total_size += 1 * this->table_state_size();
  for (int i = 0; i < this->table_state_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->table_state(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SolverState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SolverState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SolverState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SolverState::MergeFrom(const SolverState& from) {
  GOOGLE_CHECK_NE(&from, this);
  table_state_.MergeFrom(from.table_state_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SolverState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SolverState::CopyFrom(const SolverState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SolverState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->table_state())) return false;
  return true;
}

void SolverState::Swap(SolverState* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    table_state_.Swap(&other->table_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SolverState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SolverState_descriptor_;
  metadata.reflection = SolverState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TableState::kNameFieldNumber;
const int TableState::kDescFieldNumber;
const int TableState::kDataFieldNumber;
#endif  // !_MSC_VER

TableState::TableState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gsbn.TableState)
}

void TableState::InitAsDefaultInstance() {
}

TableState::TableState(const TableState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gsbn.TableState)
}

void TableState::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TableState::~TableState() {
  // @@protoc_insertion_point(destructor:gsbn.TableState)
  SharedDtor();
}

void TableState::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete desc_;
  }
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void TableState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TableState_descriptor_;
}

const TableState& TableState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gsbn_2eproto();
  return *default_instance_;
}

TableState* TableState::default_instance_ = NULL;

TableState* TableState::New() const {
  return new TableState;
}

void TableState::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        desc_->clear();
      }
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TableState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gsbn.TableState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_desc;
        break;
      }

      // required bytes desc = 2;
      case 2: {
        if (tag == 18) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_desc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // required bytes data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gsbn.TableState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gsbn.TableState)
  return false;
#undef DO_
}

void TableState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gsbn.TableState)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required bytes desc = 2;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->desc(), output);
  }

  // required bytes data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gsbn.TableState)
}

::google::protobuf::uint8* TableState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gsbn.TableState)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required bytes desc = 2;
  if (has_desc()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->desc(), target);
  }

  // required bytes data = 3;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gsbn.TableState)
  return target;
}

int TableState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required bytes desc = 2;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->desc());
    }

    // required bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TableState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TableState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TableState::MergeFrom(const TableState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TableState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableState::CopyFrom(const TableState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void TableState::Swap(TableState* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(desc_, other->desc_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TableState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TableState_descriptor_;
  metadata.reflection = TableState_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gsbn

// @@protoc_insertion_point(global_scope)
