# parameters for stimuli generation
gen_param{
	# stimuli file path
	stim_file : "../data/stimuli_10x10_100_-1_rnd.bin"
	# delta t, the simulation step
	dt : 0.001
	# a small number to avoid log(0)
	eps : 0.001
	# simulation process defination
	mode_param : {
		# begin time (second)
		begin_time : 0
		# end time (second)
		end_time : 50
		# simulation cycle for each pattern (number of dt)
		time_step : 500
		# initial stimulus index
		begin_lgidx_id : 0
		# initial mask index
		begin_wmask_id : 0
		# increment step of stimulus index after each pattern simulation is done
		lgidx_step: 1
		# increment step of mask index after each pattern simulation is done
		wmask_step: 0
		# the learning rate, range from 0 to 1
		prn : 1
		# enable/disable the structural plasticity, it will not affect the initial connection establishment.
		plasticity: 1
	}
	
	mode_param : {
		# begin time (second)
		begin_time : 50
		# end time (second)
		end_time : 100
		# simulation cycle for each pattern (number of dt)
		time_step : 500
		# initial stimulus index
		begin_lgidx_id : 100
		# initial mask index
		begin_wmask_id : 1
		# initial expected output index, for automatic checks
		begin_lgexp_id : 0
		# increment step of stimulus index after each pattern simulation is done
		lgidx_step: 1
		# increment step of mask index after each pattern simulation is done
		wmask_step: 0
		# increment step of expected output index after each pattern simulation is done
		lgexp_step: 1
		# the learning rate, range from 0 to 1
		prn : 0
		# enable/disable the structural plasticity, it will not affect the initial connection establishment.
		plasticity: 0
	}
}

# parameters for network structure defination
net_param{
	# parameters for population
	pop_param : {
		# number of populations which share this parameters
		pop_num : 1
		# number of hypercolumn units in this population
		hcu_num : 10
		# time constant for membrance current (epsc).
		taum : 0.01
		# gain of soft winner-take-all (WTA)
		wtagain: 1
		# maximum firing frequency
		maxfq:100
		# gain of injected current (stimulus)
		igain:1
		# gain of sup
		wgain:1.0
		# bias of injected current (stimulus)
		lgbias: 0
		# normal distributed noise
		snoise: 0
		# number of minicolumn units per hypercolumn
		mcu_num : 10
		# maximum number of fanout for each minicolumn
		fanout_num : 10
		# adaptation gain
		adgain: 0
		# time constant of adaptation
		taua: 0.05
		# hypercolumn shape, any dimension (>0) is possible
		shape:2
		shape:5
		# absolute coordinate of the first hypercolumn in this population, any dimension (>0) is possible
		position: 0
		position: 0
		# the MPI rank id which will host this population
		rank: 0
	}
	
	# parameters for projection
	proj_param : {
		# the id of source population
		src_pop : 0
		# the id of destination population
		dest_pop : 0
		# time constant of zi, zi2 traces. tauzi, tauzj, taue and taup should be different.
		tauzi:0.005000
		# time constant of zj, zj2 traces. tauzi, tauzj, taue and taup should be different.
		tauzj:0.005001
		# time constant of e-traces. tauzi, tauzj, taue and taup should be different.
		taue:0.0050002
		# time condition of p-traces. tauzi, tauzj, taue and taup should be different.
		taup: 60
		# maximum firing frequency
		maxfq:100
		# gain of wij
		wgain: 1
		# gain of bj
		bgain: 1
		# maximum number of slot for each hypercolumn.
		slot_num : 100
		# time constant of epsc. By default tauepsc=tauzi
		tauepsc: 0.05
	}
}

# parameters for logging
rec_param{
	# directory to store all logs
	directory: "../data/snapshot_10x10_rnd"
}

# parameters for procedure: ProcExtGen
# used for preparing stimulus
proc_param{
	name: "ProcExtGen"
}

# parameters for procedure: ProcUpdMulti
# used for performing the core update of BCPNN
proc_param{
	name: "ProcUpdMulti"
	# integer argument: spike buffer size
	# used for defining the history buffer size for spikes.
	argi: {
		key: "spike buffer size"
		val: 25
	}
}

# parameters for procedure: ProcExchangeSpike
# used for propagating spikes
proc_param{
	name: "ProcExchangeSpike"
}

# parameters for procedure: ProcStructuralPlasticity
# used for performing structural plasticity
proc_param{
	name: "ProcStructuralPlasticity"
	# integer argument: period
	# used for defining after how many cycles should the program invoke the procedure to establish new connections
	argi: {
		key: "period"
		val: 100
	}
	# integer argument: pruning-period
	# used for defining after how many cycles should the program invoke the procedure to prune useless connections
	argi: {
		key: "pruning-period"
		val: 5000
	}
	# integer argument: t-th
	# used for defining the maximum number of cycles for which a connection hasn't been updated without being considered useless.
	argi: {
		key: "t-th"
		val: 50000
	}
	# integer argument: enable-geometry
	# used to enable/disable geometry
	argi: {
		key: "enable-geometry"
		val: 1
	}
	# floating point argument: wp
	# the positive weight limit to identify useless connection. If wij>wp, the connection is useful
	argf: {
		key: "wp"
		val: 0.5
	}
	# floating point argument: wn
	# the negative weight limit to identify useless connection. If wij<wn, the connection is useful
	argf: {
		key: "wn"
		val: -0.5
	}
	# integer argument: enable-init
	# used to enable/disable initial connection
	argi: {
		key: "enable-init"
		val: 0
	}
}

# parameters for procedure: ProcSpkRec
# used for recording spikes
proc_param{
	name: "ProcSpkRec"
	# integer argument: period
	# the period of recording cycle
	argi: {
		key: "period"
		val: 1
	}
	# integer argument: offset
	# the first recording starts from this cycle
	argi: {
		key: "offset"
		val: 0
	}
}

# parameters for procedure: ProcSnapshot
# used for taking snapshot of internal variables, for debug purpose
proc_param{
	name: "ProcSnapshot"
	# integer argument: period
	# the period of recording cycle
	argi: {
		key: "period"
		val: 500
	}
	# integer argument: offset
	# the first recording starts from this cycle
	argi: {
		key: "offset"
		val: 500
	}
}

# parameters for procedure: ProcCheck
# used for automatically check the number of remembered patterns
proc_param{
	name: "ProcCheck"
}
