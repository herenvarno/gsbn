#ifndef __GSBN_COMMON_HPP__
#define __GSBN_COMMON_HPP__

#include "util/easylogging++.h"
#include "gsbn/proto/gsbn.pb.h"
#include <iomanip>
#include <string>
#include <vector>
#include <math.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <stdlib.h>
#include <unistd.h>

using namespace std;

namespace gsbn{

/** \mainpage GSBN -- GPU version of Spiking-based BCPNN
 *
 * \section Introduction
 *
 * The BCPNN
 *
 * \section Structure
 * The GSBN provide a simulation environment called Solver. In the Solver, there
 * is a Gen (Generator), a Net (Network), a Rec (Recorder) as well as a Database.
 * The Database mantains all the data which defines the current state.
 * The Gen updates the timestamp, controls the simulation step and chooses the
 * correct stimuli. The Net update the state of BCPNN according to its internal
 * logic. The Rec generate the snapshot of Database and save it to a binary file.
 *
 * \section Data 
 * In Database of a Solver, the data is organized as Table. While, the Database
 * is created based on a text description file or restored from a binary snapshot.
 * 
 * The text description file is a protobuf format text file, which defines the
 * network. The text description is usually provided by the user to create
 * a new Solver.
 *
 * The binary snapshot file or state file is usually generated by Rec from previous
 * training. With the snapshot file, a complete Solver can be recovered including
 * the correct timestamp.
 *
 * Another important file is the stimili file which should be provided along with
 * text description file in order to create a new Solver. (Attention: This part may be changed
 * due to new mechanism of stimulation).
 */


#define __NOT_IMPLEMENTED__ LOG(FATAL) << "Function hasn't been implemented";

#define __MAX_SUBPROJ__ 4

}

#endif //__GSBN_COMMON_HPP__
