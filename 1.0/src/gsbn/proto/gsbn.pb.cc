// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gsbn.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gsbn.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gsbn {

namespace {

const ::google::protobuf::Descriptor* SolverParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SolverParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* GenParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GenParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModeParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModeParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* NetParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* PopParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PopParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* HcuParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HcuParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* McuParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  McuParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProjParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProjParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* SolverState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SolverState_reflection_ = NULL;
const ::google::protobuf::Descriptor* TableState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TableState_reflection_ = NULL;
const ::google::protobuf::Descriptor* VectorStateI_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VectorStateI_reflection_ = NULL;
const ::google::protobuf::Descriptor* VectorStateF_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VectorStateF_reflection_ = NULL;
const ::google::protobuf::Descriptor* VectorStateD_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VectorStateD_reflection_ = NULL;
const ::google::protobuf::Descriptor* StimRawData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StimRawData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_gsbn_2eproto() {
  protobuf_AddDesc_gsbn_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "gsbn.proto");
  GOOGLE_CHECK(file != NULL);
  SolverParam_descriptor_ = file->message_type(0);
  static const int SolverParam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParam, gen_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParam, net_param_),
  };
  SolverParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SolverParam_descriptor_,
      SolverParam::default_instance_,
      SolverParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SolverParam));
  GenParam_descriptor_ = file->message_type(1);
  static const int GenParam_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenParam, stim_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenParam, dt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenParam, mode_param_),
  };
  GenParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GenParam_descriptor_,
      GenParam::default_instance_,
      GenParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GenParam));
  ModeParam_descriptor_ = file->message_type(2);
  static const int ModeParam_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModeParam, begin_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModeParam, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModeParam, prn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModeParam, gain_mask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModeParam, plasticity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModeParam, stim_index_),
  };
  ModeParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModeParam_descriptor_,
      ModeParam::default_instance_,
      ModeParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModeParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModeParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModeParam));
  NetParam_descriptor_ = file->message_type(3);
  static const int NetParam_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParam, pop_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParam, proj_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParam, procedure_),
  };
  NetParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetParam_descriptor_,
      NetParam::default_instance_,
      NetParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetParam));
  PopParam_descriptor_ = file->message_type(4);
  static const int PopParam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopParam, pop_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopParam, hcu_param_),
  };
  PopParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PopParam_descriptor_,
      PopParam::default_instance_,
      PopParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PopParam));
  HcuParam_descriptor_ = file->message_type(5);
  static const int HcuParam_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HcuParam, hcu_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HcuParam, slot_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HcuParam, mcu_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HcuParam, taum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HcuParam, wtagain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HcuParam, maxfq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HcuParam, igain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HcuParam, wgain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HcuParam, snoise_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HcuParam, lgbias_),
  };
  HcuParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HcuParam_descriptor_,
      HcuParam::default_instance_,
      HcuParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HcuParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HcuParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HcuParam));
  McuParam_descriptor_ = file->message_type(6);
  static const int McuParam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(McuParam, mcu_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(McuParam, fanout_num_),
  };
  McuParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      McuParam_descriptor_,
      McuParam::default_instance_,
      McuParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(McuParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(McuParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(McuParam));
  ProjParam_descriptor_ = file->message_type(7);
  static const int ProjParam_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjParam, src_pop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjParam, dest_pop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjParam, tauzi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjParam, tauzj_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjParam, taue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjParam, taup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjParam, maxfq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjParam, bgain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjParam, wgain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjParam, pi0_),
  };
  ProjParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProjParam_descriptor_,
      ProjParam::default_instance_,
      ProjParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProjParam));
  SolverState_descriptor_ = file->message_type(8);
  static const int SolverState_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverState, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverState, prn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverState, table_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverState, vector_state_i_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverState, vector_state_f_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverState, vector_state_d_),
  };
  SolverState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SolverState_descriptor_,
      SolverState::default_instance_,
      SolverState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SolverState));
  TableState_descriptor_ = file->message_type(9);
  static const int TableState_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableState, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableState, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableState, data_),
  };
  TableState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TableState_descriptor_,
      TableState::default_instance_,
      TableState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TableState));
  VectorStateI_descriptor_ = file->message_type(10);
  static const int VectorStateI_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorStateI, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorStateI, ld_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorStateI, data_),
  };
  VectorStateI_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VectorStateI_descriptor_,
      VectorStateI::default_instance_,
      VectorStateI_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorStateI, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorStateI, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VectorStateI));
  VectorStateF_descriptor_ = file->message_type(11);
  static const int VectorStateF_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorStateF, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorStateF, ld_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorStateF, data_),
  };
  VectorStateF_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VectorStateF_descriptor_,
      VectorStateF::default_instance_,
      VectorStateF_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorStateF, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorStateF, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VectorStateF));
  VectorStateD_descriptor_ = file->message_type(12);
  static const int VectorStateD_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorStateD, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorStateD, ld_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorStateD, data_),
  };
  VectorStateD_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VectorStateD_descriptor_,
      VectorStateD::default_instance_,
      VectorStateD_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorStateD, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorStateD, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VectorStateD));
  StimRawData_descriptor_ = file->message_type(13);
  static const int StimRawData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StimRawData, data_rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StimRawData, data_cols_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StimRawData, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StimRawData, mask_rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StimRawData, mask_cols_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StimRawData, mask_),
  };
  StimRawData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StimRawData_descriptor_,
      StimRawData::default_instance_,
      StimRawData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StimRawData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StimRawData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StimRawData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_gsbn_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SolverParam_descriptor_, &SolverParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GenParam_descriptor_, &GenParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModeParam_descriptor_, &ModeParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetParam_descriptor_, &NetParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PopParam_descriptor_, &PopParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HcuParam_descriptor_, &HcuParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    McuParam_descriptor_, &McuParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProjParam_descriptor_, &ProjParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SolverState_descriptor_, &SolverState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TableState_descriptor_, &TableState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VectorStateI_descriptor_, &VectorStateI::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VectorStateF_descriptor_, &VectorStateF::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VectorStateD_descriptor_, &VectorStateD::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StimRawData_descriptor_, &StimRawData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_gsbn_2eproto() {
  delete SolverParam::default_instance_;
  delete SolverParam_reflection_;
  delete GenParam::default_instance_;
  delete GenParam_reflection_;
  delete ModeParam::default_instance_;
  delete ModeParam_reflection_;
  delete NetParam::default_instance_;
  delete NetParam_reflection_;
  delete PopParam::default_instance_;
  delete PopParam_reflection_;
  delete HcuParam::default_instance_;
  delete HcuParam_reflection_;
  delete McuParam::default_instance_;
  delete McuParam_reflection_;
  delete ProjParam::default_instance_;
  delete ProjParam_reflection_;
  delete SolverState::default_instance_;
  delete SolverState_reflection_;
  delete TableState::default_instance_;
  delete TableState_reflection_;
  delete VectorStateI::default_instance_;
  delete VectorStateI_reflection_;
  delete VectorStateF::default_instance_;
  delete VectorStateF_reflection_;
  delete VectorStateD::default_instance_;
  delete VectorStateD_reflection_;
  delete StimRawData::default_instance_;
  delete StimRawData_reflection_;
}

void protobuf_AddDesc_gsbn_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ngsbn.proto\022\004gsbn\"S\n\013SolverParam\022!\n\tgen"
    "_param\030\001 \002(\0132\016.gsbn.GenParam\022!\n\tnet_para"
    "m\030\002 \002(\0132\016.gsbn.NetParam\"N\n\010GenParam\022\021\n\ts"
    "tim_file\030\001 \001(\t\022\n\n\002dt\030\002 \002(\002\022#\n\nmode_param"
    "\030\003 \003(\0132\017.gsbn.ModeParam\"\205\001\n\tModeParam\022\022\n"
    "\nbegin_time\030\001 \002(\002\022\020\n\010end_time\030\002 \002(\002\022\016\n\003p"
    "rn\030\003 \001(\002:\0011\022\024\n\tgain_mask\030\004 \001(\r:\0010\022\025\n\npla"
    "sticity\030\005 \001(\r:\0011\022\025\n\nstim_index\030\006 \001(\r:\0010\""
    "e\n\010NetParam\022!\n\tpop_param\030\001 \003(\0132\016.gsbn.Po"
    "pParam\022#\n\nproj_param\030\002 \003(\0132\017.gsbn.ProjPa"
    "ram\022\021\n\tprocedure\030\003 \003(\t\">\n\010PopParam\022\017\n\007po"
    "p_num\030\001 \002(\r\022!\n\thcu_param\030\002 \003(\0132\016.gsbn.Hc"
    "uParam\"\310\001\n\010HcuParam\022\017\n\007hcu_num\030\001 \002(\r\022\020\n\010"
    "slot_num\030\002 \002(\r\022!\n\tmcu_param\030\003 \003(\0132\016.gsbn"
    ".McuParam\022\014\n\004taum\030\004 \002(\002\022\017\n\007wtagain\030\005 \002(\002"
    "\022\r\n\005maxfq\030\006 \002(\002\022\020\n\005igain\030\007 \001(\002:\0011\022\020\n\005wga"
    "in\030\010 \001(\002:\0011\022\021\n\006snoise\030\t \001(\002:\0010\022\021\n\006lgbias"
    "\030\n \001(\002:\0010\"/\n\010McuParam\022\017\n\007mcu_num\030\001 \002(\r\022\022"
    "\n\nfanout_num\030\002 \002(\r\"\253\001\n\tProjParam\022\017\n\007src_"
    "pop\030\001 \002(\r\022\020\n\010dest_pop\030\002 \002(\r\022\r\n\005tauzi\030\003 \002"
    "(\002\022\r\n\005tauzj\030\004 \002(\002\022\014\n\004taue\030\005 \002(\002\022\014\n\004taup\030"
    "\006 \002(\002\022\r\n\005maxfq\030\007 \002(\002\022\020\n\005bgain\030\010 \001(\002:\0010\022\020"
    "\n\005wgain\030\t \001(\002:\0010\022\016\n\003pi0\030\n \001(\002:\0010\"\330\001\n\013Sol"
    "verState\022\021\n\ttimestamp\030\001 \002(\002\022\013\n\003prn\030\002 \002(\002"
    "\022%\n\013table_state\030\003 \003(\0132\020.gsbn.TableState\022"
    "*\n\016vector_state_i\030\004 \003(\0132\022.gsbn.VectorSta"
    "teI\022*\n\016vector_state_f\030\005 \003(\0132\022.gsbn.Vecto"
    "rStateF\022*\n\016vector_state_d\030\006 \003(\0132\022.gsbn.V"
    "ectorStateD\"6\n\nTableState\022\014\n\004name\030\001 \002(\t\022"
    "\014\n\004desc\030\002 \002(\014\022\014\n\004data\030\003 \002(\014\"=\n\014VectorSta"
    "teI\022\014\n\004name\030\001 \002(\t\022\r\n\002ld\030\002 \001(\r:\0011\022\020\n\004data"
    "\030\003 \003(\005B\002\020\001\"=\n\014VectorStateF\022\014\n\004name\030\001 \002(\t"
    "\022\r\n\002ld\030\002 \001(\r:\0011\022\020\n\004data\030\003 \003(\002B\002\020\001\"=\n\014Vec"
    "torStateD\022\014\n\004name\030\001 \002(\t\022\r\n\002ld\030\002 \001(\r:\0011\022\020"
    "\n\004data\030\003 \003(\001B\002\020\001\"}\n\013StimRawData\022\021\n\tdata_"
    "rows\030\001 \002(\r\022\021\n\tdata_cols\030\002 \002(\r\022\020\n\004data\030\003 "
    "\003(\002B\002\020\001\022\021\n\tmask_rows\030\004 \002(\r\022\021\n\tmask_cols\030"
    "\005 \002(\r\022\020\n\004mask\030\006 \003(\002B\002\020\001", 1503);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gsbn.proto", &protobuf_RegisterTypes);
  SolverParam::default_instance_ = new SolverParam();
  GenParam::default_instance_ = new GenParam();
  ModeParam::default_instance_ = new ModeParam();
  NetParam::default_instance_ = new NetParam();
  PopParam::default_instance_ = new PopParam();
  HcuParam::default_instance_ = new HcuParam();
  McuParam::default_instance_ = new McuParam();
  ProjParam::default_instance_ = new ProjParam();
  SolverState::default_instance_ = new SolverState();
  TableState::default_instance_ = new TableState();
  VectorStateI::default_instance_ = new VectorStateI();
  VectorStateF::default_instance_ = new VectorStateF();
  VectorStateD::default_instance_ = new VectorStateD();
  StimRawData::default_instance_ = new StimRawData();
  SolverParam::default_instance_->InitAsDefaultInstance();
  GenParam::default_instance_->InitAsDefaultInstance();
  ModeParam::default_instance_->InitAsDefaultInstance();
  NetParam::default_instance_->InitAsDefaultInstance();
  PopParam::default_instance_->InitAsDefaultInstance();
  HcuParam::default_instance_->InitAsDefaultInstance();
  McuParam::default_instance_->InitAsDefaultInstance();
  ProjParam::default_instance_->InitAsDefaultInstance();
  SolverState::default_instance_->InitAsDefaultInstance();
  TableState::default_instance_->InitAsDefaultInstance();
  VectorStateI::default_instance_->InitAsDefaultInstance();
  VectorStateF::default_instance_->InitAsDefaultInstance();
  VectorStateD::default_instance_->InitAsDefaultInstance();
  StimRawData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_gsbn_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_gsbn_2eproto {
  StaticDescriptorInitializer_gsbn_2eproto() {
    protobuf_AddDesc_gsbn_2eproto();
  }
} static_descriptor_initializer_gsbn_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SolverParam::kGenParamFieldNumber;
const int SolverParam::kNetParamFieldNumber;
#endif  // !_MSC_VER

SolverParam::SolverParam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gsbn.SolverParam)
}

void SolverParam::InitAsDefaultInstance() {
  gen_param_ = const_cast< ::gsbn::GenParam*>(&::gsbn::GenParam::default_instance());
  net_param_ = const_cast< ::gsbn::NetParam*>(&::gsbn::NetParam::default_instance());
}

SolverParam::SolverParam(const SolverParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gsbn.SolverParam)
}

void SolverParam::SharedCtor() {
  _cached_size_ = 0;
  gen_param_ = NULL;
  net_param_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SolverParam::~SolverParam() {
  // @@protoc_insertion_point(destructor:gsbn.SolverParam)
  SharedDtor();
}

void SolverParam::SharedDtor() {
  if (this != default_instance_) {
    delete gen_param_;
    delete net_param_;
  }
}

void SolverParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SolverParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SolverParam_descriptor_;
}

const SolverParam& SolverParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gsbn_2eproto();
  return *default_instance_;
}

SolverParam* SolverParam::default_instance_ = NULL;

SolverParam* SolverParam::New() const {
  return new SolverParam;
}

void SolverParam::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_gen_param()) {
      if (gen_param_ != NULL) gen_param_->::gsbn::GenParam::Clear();
    }
    if (has_net_param()) {
      if (net_param_ != NULL) net_param_->::gsbn::NetParam::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SolverParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gsbn.SolverParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gsbn.GenParam gen_param = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gen_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_net_param;
        break;
      }

      // required .gsbn.NetParam net_param = 2;
      case 2: {
        if (tag == 18) {
         parse_net_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_net_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gsbn.SolverParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gsbn.SolverParam)
  return false;
#undef DO_
}

void SolverParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gsbn.SolverParam)
  // required .gsbn.GenParam gen_param = 1;
  if (has_gen_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gen_param(), output);
  }

  // required .gsbn.NetParam net_param = 2;
  if (has_net_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->net_param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gsbn.SolverParam)
}

::google::protobuf::uint8* SolverParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gsbn.SolverParam)
  // required .gsbn.GenParam gen_param = 1;
  if (has_gen_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gen_param(), target);
  }

  // required .gsbn.NetParam net_param = 2;
  if (has_net_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->net_param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gsbn.SolverParam)
  return target;
}

int SolverParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .gsbn.GenParam gen_param = 1;
    if (has_gen_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gen_param());
    }

    // required .gsbn.NetParam net_param = 2;
    if (has_net_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->net_param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SolverParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SolverParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SolverParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SolverParam::MergeFrom(const SolverParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gen_param()) {
      mutable_gen_param()->::gsbn::GenParam::MergeFrom(from.gen_param());
    }
    if (from.has_net_param()) {
      mutable_net_param()->::gsbn::NetParam::MergeFrom(from.net_param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SolverParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SolverParam::CopyFrom(const SolverParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SolverParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_gen_param()) {
    if (!this->gen_param().IsInitialized()) return false;
  }
  if (has_net_param()) {
    if (!this->net_param().IsInitialized()) return false;
  }
  return true;
}

void SolverParam::Swap(SolverParam* other) {
  if (other != this) {
    std::swap(gen_param_, other->gen_param_);
    std::swap(net_param_, other->net_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SolverParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SolverParam_descriptor_;
  metadata.reflection = SolverParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GenParam::kStimFileFieldNumber;
const int GenParam::kDtFieldNumber;
const int GenParam::kModeParamFieldNumber;
#endif  // !_MSC_VER

GenParam::GenParam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gsbn.GenParam)
}

void GenParam::InitAsDefaultInstance() {
}

GenParam::GenParam(const GenParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gsbn.GenParam)
}

void GenParam::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  stim_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GenParam::~GenParam() {
  // @@protoc_insertion_point(destructor:gsbn.GenParam)
  SharedDtor();
}

void GenParam::SharedDtor() {
  if (stim_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete stim_file_;
  }
  if (this != default_instance_) {
  }
}

void GenParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GenParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GenParam_descriptor_;
}

const GenParam& GenParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gsbn_2eproto();
  return *default_instance_;
}

GenParam* GenParam::default_instance_ = NULL;

GenParam* GenParam::New() const {
  return new GenParam;
}

void GenParam::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_stim_file()) {
      if (stim_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        stim_file_->clear();
      }
    }
    dt_ = 0;
  }
  mode_param_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GenParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gsbn.GenParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string stim_file = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stim_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stim_file().data(), this->stim_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "stim_file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_dt;
        break;
      }

      // required float dt = 2;
      case 2: {
        if (tag == 21) {
         parse_dt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dt_)));
          set_has_dt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mode_param;
        break;
      }

      // repeated .gsbn.ModeParam mode_param = 3;
      case 3: {
        if (tag == 26) {
         parse_mode_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mode_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mode_param;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gsbn.GenParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gsbn.GenParam)
  return false;
#undef DO_
}

void GenParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gsbn.GenParam)
  // optional string stim_file = 1;
  if (has_stim_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stim_file().data(), this->stim_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stim_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->stim_file(), output);
  }

  // required float dt = 2;
  if (has_dt()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->dt(), output);
  }

  // repeated .gsbn.ModeParam mode_param = 3;
  for (int i = 0; i < this->mode_param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->mode_param(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gsbn.GenParam)
}

::google::protobuf::uint8* GenParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gsbn.GenParam)
  // optional string stim_file = 1;
  if (has_stim_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stim_file().data(), this->stim_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stim_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stim_file(), target);
  }

  // required float dt = 2;
  if (has_dt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->dt(), target);
  }

  // repeated .gsbn.ModeParam mode_param = 3;
  for (int i = 0; i < this->mode_param_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->mode_param(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gsbn.GenParam)
  return target;
}

int GenParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string stim_file = 1;
    if (has_stim_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stim_file());
    }

    // required float dt = 2;
    if (has_dt()) {
      total_size += 1 + 4;
    }

  }
  // repeated .gsbn.ModeParam mode_param = 3;
  total_size += 1 * this->mode_param_size();
  for (int i = 0; i < this->mode_param_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mode_param(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GenParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GenParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GenParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GenParam::MergeFrom(const GenParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  mode_param_.MergeFrom(from.mode_param_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stim_file()) {
      set_stim_file(from.stim_file());
    }
    if (from.has_dt()) {
      set_dt(from.dt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GenParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenParam::CopyFrom(const GenParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->mode_param())) return false;
  return true;
}

void GenParam::Swap(GenParam* other) {
  if (other != this) {
    std::swap(stim_file_, other->stim_file_);
    std::swap(dt_, other->dt_);
    mode_param_.Swap(&other->mode_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GenParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GenParam_descriptor_;
  metadata.reflection = GenParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModeParam::kBeginTimeFieldNumber;
const int ModeParam::kEndTimeFieldNumber;
const int ModeParam::kPrnFieldNumber;
const int ModeParam::kGainMaskFieldNumber;
const int ModeParam::kPlasticityFieldNumber;
const int ModeParam::kStimIndexFieldNumber;
#endif  // !_MSC_VER

ModeParam::ModeParam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gsbn.ModeParam)
}

void ModeParam::InitAsDefaultInstance() {
}

ModeParam::ModeParam(const ModeParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gsbn.ModeParam)
}

void ModeParam::SharedCtor() {
  _cached_size_ = 0;
  begin_time_ = 0;
  end_time_ = 0;
  prn_ = 1;
  gain_mask_ = 0u;
  plasticity_ = 1u;
  stim_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModeParam::~ModeParam() {
  // @@protoc_insertion_point(destructor:gsbn.ModeParam)
  SharedDtor();
}

void ModeParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ModeParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModeParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModeParam_descriptor_;
}

const ModeParam& ModeParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gsbn_2eproto();
  return *default_instance_;
}

ModeParam* ModeParam::default_instance_ = NULL;

ModeParam* ModeParam::New() const {
  return new ModeParam;
}

void ModeParam::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ModeParam*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(begin_time_, end_time_);
    prn_ = 1;
    gain_mask_ = 0u;
    plasticity_ = 1u;
    stim_index_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModeParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gsbn.ModeParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float begin_time = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &begin_time_)));
          set_has_begin_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_end_time;
        break;
      }

      // required float end_time = 2;
      case 2: {
        if (tag == 21) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_prn;
        break;
      }

      // optional float prn = 3 [default = 1];
      case 3: {
        if (tag == 29) {
         parse_prn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &prn_)));
          set_has_prn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gain_mask;
        break;
      }

      // optional uint32 gain_mask = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_gain_mask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gain_mask_)));
          set_has_gain_mask();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_plasticity;
        break;
      }

      // optional uint32 plasticity = 5 [default = 1];
      case 5: {
        if (tag == 40) {
         parse_plasticity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &plasticity_)));
          set_has_plasticity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_stim_index;
        break;
      }

      // optional uint32 stim_index = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_stim_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stim_index_)));
          set_has_stim_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gsbn.ModeParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gsbn.ModeParam)
  return false;
#undef DO_
}

void ModeParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gsbn.ModeParam)
  // required float begin_time = 1;
  if (has_begin_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->begin_time(), output);
  }

  // required float end_time = 2;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->end_time(), output);
  }

  // optional float prn = 3 [default = 1];
  if (has_prn()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->prn(), output);
  }

  // optional uint32 gain_mask = 4 [default = 0];
  if (has_gain_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->gain_mask(), output);
  }

  // optional uint32 plasticity = 5 [default = 1];
  if (has_plasticity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->plasticity(), output);
  }

  // optional uint32 stim_index = 6 [default = 0];
  if (has_stim_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->stim_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gsbn.ModeParam)
}

::google::protobuf::uint8* ModeParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gsbn.ModeParam)
  // required float begin_time = 1;
  if (has_begin_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->begin_time(), target);
  }

  // required float end_time = 2;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->end_time(), target);
  }

  // optional float prn = 3 [default = 1];
  if (has_prn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->prn(), target);
  }

  // optional uint32 gain_mask = 4 [default = 0];
  if (has_gain_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->gain_mask(), target);
  }

  // optional uint32 plasticity = 5 [default = 1];
  if (has_plasticity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->plasticity(), target);
  }

  // optional uint32 stim_index = 6 [default = 0];
  if (has_stim_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->stim_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gsbn.ModeParam)
  return target;
}

int ModeParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float begin_time = 1;
    if (has_begin_time()) {
      total_size += 1 + 4;
    }

    // required float end_time = 2;
    if (has_end_time()) {
      total_size += 1 + 4;
    }

    // optional float prn = 3 [default = 1];
    if (has_prn()) {
      total_size += 1 + 4;
    }

    // optional uint32 gain_mask = 4 [default = 0];
    if (has_gain_mask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gain_mask());
    }

    // optional uint32 plasticity = 5 [default = 1];
    if (has_plasticity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->plasticity());
    }

    // optional uint32 stim_index = 6 [default = 0];
    if (has_stim_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stim_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModeParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModeParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModeParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModeParam::MergeFrom(const ModeParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_begin_time()) {
      set_begin_time(from.begin_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_prn()) {
      set_prn(from.prn());
    }
    if (from.has_gain_mask()) {
      set_gain_mask(from.gain_mask());
    }
    if (from.has_plasticity()) {
      set_plasticity(from.plasticity());
    }
    if (from.has_stim_index()) {
      set_stim_index(from.stim_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModeParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModeParam::CopyFrom(const ModeParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModeParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ModeParam::Swap(ModeParam* other) {
  if (other != this) {
    std::swap(begin_time_, other->begin_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(prn_, other->prn_);
    std::swap(gain_mask_, other->gain_mask_);
    std::swap(plasticity_, other->plasticity_);
    std::swap(stim_index_, other->stim_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModeParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModeParam_descriptor_;
  metadata.reflection = ModeParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NetParam::kPopParamFieldNumber;
const int NetParam::kProjParamFieldNumber;
const int NetParam::kProcedureFieldNumber;
#endif  // !_MSC_VER

NetParam::NetParam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gsbn.NetParam)
}

void NetParam::InitAsDefaultInstance() {
}

NetParam::NetParam(const NetParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gsbn.NetParam)
}

void NetParam::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetParam::~NetParam() {
  // @@protoc_insertion_point(destructor:gsbn.NetParam)
  SharedDtor();
}

void NetParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetParam_descriptor_;
}

const NetParam& NetParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gsbn_2eproto();
  return *default_instance_;
}

NetParam* NetParam::default_instance_ = NULL;

NetParam* NetParam::New() const {
  return new NetParam;
}

void NetParam::Clear() {
  pop_param_.Clear();
  proj_param_.Clear();
  procedure_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gsbn.NetParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .gsbn.PopParam pop_param = 1;
      case 1: {
        if (tag == 10) {
         parse_pop_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pop_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_pop_param;
        if (input->ExpectTag(18)) goto parse_proj_param;
        break;
      }

      // repeated .gsbn.ProjParam proj_param = 2;
      case 2: {
        if (tag == 18) {
         parse_proj_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_proj_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_proj_param;
        if (input->ExpectTag(26)) goto parse_procedure;
        break;
      }

      // repeated string procedure = 3;
      case 3: {
        if (tag == 26) {
         parse_procedure:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_procedure()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->procedure(this->procedure_size() - 1).data(),
            this->procedure(this->procedure_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "procedure");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_procedure;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gsbn.NetParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gsbn.NetParam)
  return false;
#undef DO_
}

void NetParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gsbn.NetParam)
  // repeated .gsbn.PopParam pop_param = 1;
  for (int i = 0; i < this->pop_param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pop_param(i), output);
  }

  // repeated .gsbn.ProjParam proj_param = 2;
  for (int i = 0; i < this->proj_param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->proj_param(i), output);
  }

  // repeated string procedure = 3;
  for (int i = 0; i < this->procedure_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->procedure(i).data(), this->procedure(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "procedure");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->procedure(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gsbn.NetParam)
}

::google::protobuf::uint8* NetParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gsbn.NetParam)
  // repeated .gsbn.PopParam pop_param = 1;
  for (int i = 0; i < this->pop_param_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pop_param(i), target);
  }

  // repeated .gsbn.ProjParam proj_param = 2;
  for (int i = 0; i < this->proj_param_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->proj_param(i), target);
  }

  // repeated string procedure = 3;
  for (int i = 0; i < this->procedure_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->procedure(i).data(), this->procedure(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "procedure");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->procedure(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gsbn.NetParam)
  return target;
}

int NetParam::ByteSize() const {
  int total_size = 0;

  // repeated .gsbn.PopParam pop_param = 1;
  total_size += 1 * this->pop_param_size();
  for (int i = 0; i < this->pop_param_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pop_param(i));
  }

  // repeated .gsbn.ProjParam proj_param = 2;
  total_size += 1 * this->proj_param_size();
  for (int i = 0; i < this->proj_param_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->proj_param(i));
  }

  // repeated string procedure = 3;
  total_size += 1 * this->procedure_size();
  for (int i = 0; i < this->procedure_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->procedure(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetParam::MergeFrom(const NetParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  pop_param_.MergeFrom(from.pop_param_);
  proj_param_.MergeFrom(from.proj_param_);
  procedure_.MergeFrom(from.procedure_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetParam::CopyFrom(const NetParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetParam::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->pop_param())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->proj_param())) return false;
  return true;
}

void NetParam::Swap(NetParam* other) {
  if (other != this) {
    pop_param_.Swap(&other->pop_param_);
    proj_param_.Swap(&other->proj_param_);
    procedure_.Swap(&other->procedure_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetParam_descriptor_;
  metadata.reflection = NetParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PopParam::kPopNumFieldNumber;
const int PopParam::kHcuParamFieldNumber;
#endif  // !_MSC_VER

PopParam::PopParam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gsbn.PopParam)
}

void PopParam::InitAsDefaultInstance() {
}

PopParam::PopParam(const PopParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gsbn.PopParam)
}

void PopParam::SharedCtor() {
  _cached_size_ = 0;
  pop_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PopParam::~PopParam() {
  // @@protoc_insertion_point(destructor:gsbn.PopParam)
  SharedDtor();
}

void PopParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PopParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PopParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PopParam_descriptor_;
}

const PopParam& PopParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gsbn_2eproto();
  return *default_instance_;
}

PopParam* PopParam::default_instance_ = NULL;

PopParam* PopParam::New() const {
  return new PopParam;
}

void PopParam::Clear() {
  pop_num_ = 0u;
  hcu_param_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PopParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gsbn.PopParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 pop_num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pop_num_)));
          set_has_pop_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_hcu_param;
        break;
      }

      // repeated .gsbn.HcuParam hcu_param = 2;
      case 2: {
        if (tag == 18) {
         parse_hcu_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hcu_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_hcu_param;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gsbn.PopParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gsbn.PopParam)
  return false;
#undef DO_
}

void PopParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gsbn.PopParam)
  // required uint32 pop_num = 1;
  if (has_pop_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pop_num(), output);
  }

  // repeated .gsbn.HcuParam hcu_param = 2;
  for (int i = 0; i < this->hcu_param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->hcu_param(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gsbn.PopParam)
}

::google::protobuf::uint8* PopParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gsbn.PopParam)
  // required uint32 pop_num = 1;
  if (has_pop_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pop_num(), target);
  }

  // repeated .gsbn.HcuParam hcu_param = 2;
  for (int i = 0; i < this->hcu_param_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->hcu_param(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gsbn.PopParam)
  return target;
}

int PopParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 pop_num = 1;
    if (has_pop_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pop_num());
    }

  }
  // repeated .gsbn.HcuParam hcu_param = 2;
  total_size += 1 * this->hcu_param_size();
  for (int i = 0; i < this->hcu_param_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hcu_param(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PopParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PopParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PopParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PopParam::MergeFrom(const PopParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  hcu_param_.MergeFrom(from.hcu_param_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pop_num()) {
      set_pop_num(from.pop_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PopParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PopParam::CopyFrom(const PopParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PopParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->hcu_param())) return false;
  return true;
}

void PopParam::Swap(PopParam* other) {
  if (other != this) {
    std::swap(pop_num_, other->pop_num_);
    hcu_param_.Swap(&other->hcu_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PopParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PopParam_descriptor_;
  metadata.reflection = PopParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HcuParam::kHcuNumFieldNumber;
const int HcuParam::kSlotNumFieldNumber;
const int HcuParam::kMcuParamFieldNumber;
const int HcuParam::kTaumFieldNumber;
const int HcuParam::kWtagainFieldNumber;
const int HcuParam::kMaxfqFieldNumber;
const int HcuParam::kIgainFieldNumber;
const int HcuParam::kWgainFieldNumber;
const int HcuParam::kSnoiseFieldNumber;
const int HcuParam::kLgbiasFieldNumber;
#endif  // !_MSC_VER

HcuParam::HcuParam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gsbn.HcuParam)
}

void HcuParam::InitAsDefaultInstance() {
}

HcuParam::HcuParam(const HcuParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gsbn.HcuParam)
}

void HcuParam::SharedCtor() {
  _cached_size_ = 0;
  hcu_num_ = 0u;
  slot_num_ = 0u;
  taum_ = 0;
  wtagain_ = 0;
  maxfq_ = 0;
  igain_ = 1;
  wgain_ = 1;
  snoise_ = 0;
  lgbias_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HcuParam::~HcuParam() {
  // @@protoc_insertion_point(destructor:gsbn.HcuParam)
  SharedDtor();
}

void HcuParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HcuParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HcuParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HcuParam_descriptor_;
}

const HcuParam& HcuParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gsbn_2eproto();
  return *default_instance_;
}

HcuParam* HcuParam::default_instance_ = NULL;

HcuParam* HcuParam::New() const {
  return new HcuParam;
}

void HcuParam::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HcuParam*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 251) {
    ZR_(hcu_num_, slot_num_);
    ZR_(taum_, maxfq_);
    igain_ = 1;
    wgain_ = 1;
  }
  ZR_(snoise_, lgbias_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  mcu_param_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HcuParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gsbn.HcuParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 hcu_num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hcu_num_)));
          set_has_hcu_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_slot_num;
        break;
      }

      // required uint32 slot_num = 2;
      case 2: {
        if (tag == 16) {
         parse_slot_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_num_)));
          set_has_slot_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mcu_param;
        break;
      }

      // repeated .gsbn.McuParam mcu_param = 3;
      case 3: {
        if (tag == 26) {
         parse_mcu_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mcu_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mcu_param;
        if (input->ExpectTag(37)) goto parse_taum;
        break;
      }

      // required float taum = 4;
      case 4: {
        if (tag == 37) {
         parse_taum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &taum_)));
          set_has_taum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_wtagain;
        break;
      }

      // required float wtagain = 5;
      case 5: {
        if (tag == 45) {
         parse_wtagain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wtagain_)));
          set_has_wtagain();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_maxfq;
        break;
      }

      // required float maxfq = 6;
      case 6: {
        if (tag == 53) {
         parse_maxfq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxfq_)));
          set_has_maxfq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_igain;
        break;
      }

      // optional float igain = 7 [default = 1];
      case 7: {
        if (tag == 61) {
         parse_igain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &igain_)));
          set_has_igain();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_wgain;
        break;
      }

      // optional float wgain = 8 [default = 1];
      case 8: {
        if (tag == 69) {
         parse_wgain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wgain_)));
          set_has_wgain();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_snoise;
        break;
      }

      // optional float snoise = 9 [default = 0];
      case 9: {
        if (tag == 77) {
         parse_snoise:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &snoise_)));
          set_has_snoise();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_lgbias;
        break;
      }

      // optional float lgbias = 10 [default = 0];
      case 10: {
        if (tag == 85) {
         parse_lgbias:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lgbias_)));
          set_has_lgbias();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gsbn.HcuParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gsbn.HcuParam)
  return false;
#undef DO_
}

void HcuParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gsbn.HcuParam)
  // required uint32 hcu_num = 1;
  if (has_hcu_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hcu_num(), output);
  }

  // required uint32 slot_num = 2;
  if (has_slot_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->slot_num(), output);
  }

  // repeated .gsbn.McuParam mcu_param = 3;
  for (int i = 0; i < this->mcu_param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->mcu_param(i), output);
  }

  // required float taum = 4;
  if (has_taum()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->taum(), output);
  }

  // required float wtagain = 5;
  if (has_wtagain()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->wtagain(), output);
  }

  // required float maxfq = 6;
  if (has_maxfq()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->maxfq(), output);
  }

  // optional float igain = 7 [default = 1];
  if (has_igain()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->igain(), output);
  }

  // optional float wgain = 8 [default = 1];
  if (has_wgain()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->wgain(), output);
  }

  // optional float snoise = 9 [default = 0];
  if (has_snoise()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->snoise(), output);
  }

  // optional float lgbias = 10 [default = 0];
  if (has_lgbias()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->lgbias(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gsbn.HcuParam)
}

::google::protobuf::uint8* HcuParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gsbn.HcuParam)
  // required uint32 hcu_num = 1;
  if (has_hcu_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hcu_num(), target);
  }

  // required uint32 slot_num = 2;
  if (has_slot_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->slot_num(), target);
  }

  // repeated .gsbn.McuParam mcu_param = 3;
  for (int i = 0; i < this->mcu_param_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->mcu_param(i), target);
  }

  // required float taum = 4;
  if (has_taum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->taum(), target);
  }

  // required float wtagain = 5;
  if (has_wtagain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->wtagain(), target);
  }

  // required float maxfq = 6;
  if (has_maxfq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->maxfq(), target);
  }

  // optional float igain = 7 [default = 1];
  if (has_igain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->igain(), target);
  }

  // optional float wgain = 8 [default = 1];
  if (has_wgain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->wgain(), target);
  }

  // optional float snoise = 9 [default = 0];
  if (has_snoise()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->snoise(), target);
  }

  // optional float lgbias = 10 [default = 0];
  if (has_lgbias()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->lgbias(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gsbn.HcuParam)
  return target;
}

int HcuParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 hcu_num = 1;
    if (has_hcu_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hcu_num());
    }

    // required uint32 slot_num = 2;
    if (has_slot_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot_num());
    }

    // required float taum = 4;
    if (has_taum()) {
      total_size += 1 + 4;
    }

    // required float wtagain = 5;
    if (has_wtagain()) {
      total_size += 1 + 4;
    }

    // required float maxfq = 6;
    if (has_maxfq()) {
      total_size += 1 + 4;
    }

    // optional float igain = 7 [default = 1];
    if (has_igain()) {
      total_size += 1 + 4;
    }

    // optional float wgain = 8 [default = 1];
    if (has_wgain()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float snoise = 9 [default = 0];
    if (has_snoise()) {
      total_size += 1 + 4;
    }

    // optional float lgbias = 10 [default = 0];
    if (has_lgbias()) {
      total_size += 1 + 4;
    }

  }
  // repeated .gsbn.McuParam mcu_param = 3;
  total_size += 1 * this->mcu_param_size();
  for (int i = 0; i < this->mcu_param_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mcu_param(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HcuParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HcuParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HcuParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HcuParam::MergeFrom(const HcuParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  mcu_param_.MergeFrom(from.mcu_param_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hcu_num()) {
      set_hcu_num(from.hcu_num());
    }
    if (from.has_slot_num()) {
      set_slot_num(from.slot_num());
    }
    if (from.has_taum()) {
      set_taum(from.taum());
    }
    if (from.has_wtagain()) {
      set_wtagain(from.wtagain());
    }
    if (from.has_maxfq()) {
      set_maxfq(from.maxfq());
    }
    if (from.has_igain()) {
      set_igain(from.igain());
    }
    if (from.has_wgain()) {
      set_wgain(from.wgain());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_snoise()) {
      set_snoise(from.snoise());
    }
    if (from.has_lgbias()) {
      set_lgbias(from.lgbias());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HcuParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HcuParam::CopyFrom(const HcuParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HcuParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003b) != 0x0000003b) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->mcu_param())) return false;
  return true;
}

void HcuParam::Swap(HcuParam* other) {
  if (other != this) {
    std::swap(hcu_num_, other->hcu_num_);
    std::swap(slot_num_, other->slot_num_);
    mcu_param_.Swap(&other->mcu_param_);
    std::swap(taum_, other->taum_);
    std::swap(wtagain_, other->wtagain_);
    std::swap(maxfq_, other->maxfq_);
    std::swap(igain_, other->igain_);
    std::swap(wgain_, other->wgain_);
    std::swap(snoise_, other->snoise_);
    std::swap(lgbias_, other->lgbias_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HcuParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HcuParam_descriptor_;
  metadata.reflection = HcuParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int McuParam::kMcuNumFieldNumber;
const int McuParam::kFanoutNumFieldNumber;
#endif  // !_MSC_VER

McuParam::McuParam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gsbn.McuParam)
}

void McuParam::InitAsDefaultInstance() {
}

McuParam::McuParam(const McuParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gsbn.McuParam)
}

void McuParam::SharedCtor() {
  _cached_size_ = 0;
  mcu_num_ = 0u;
  fanout_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

McuParam::~McuParam() {
  // @@protoc_insertion_point(destructor:gsbn.McuParam)
  SharedDtor();
}

void McuParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void McuParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* McuParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return McuParam_descriptor_;
}

const McuParam& McuParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gsbn_2eproto();
  return *default_instance_;
}

McuParam* McuParam::default_instance_ = NULL;

McuParam* McuParam::New() const {
  return new McuParam;
}

void McuParam::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<McuParam*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(mcu_num_, fanout_num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool McuParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gsbn.McuParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mcu_num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcu_num_)));
          set_has_mcu_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_fanout_num;
        break;
      }

      // required uint32 fanout_num = 2;
      case 2: {
        if (tag == 16) {
         parse_fanout_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fanout_num_)));
          set_has_fanout_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gsbn.McuParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gsbn.McuParam)
  return false;
#undef DO_
}

void McuParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gsbn.McuParam)
  // required uint32 mcu_num = 1;
  if (has_mcu_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mcu_num(), output);
  }

  // required uint32 fanout_num = 2;
  if (has_fanout_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fanout_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gsbn.McuParam)
}

::google::protobuf::uint8* McuParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gsbn.McuParam)
  // required uint32 mcu_num = 1;
  if (has_mcu_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mcu_num(), target);
  }

  // required uint32 fanout_num = 2;
  if (has_fanout_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fanout_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gsbn.McuParam)
  return target;
}

int McuParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 mcu_num = 1;
    if (has_mcu_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcu_num());
    }

    // required uint32 fanout_num = 2;
    if (has_fanout_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fanout_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void McuParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const McuParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const McuParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void McuParam::MergeFrom(const McuParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mcu_num()) {
      set_mcu_num(from.mcu_num());
    }
    if (from.has_fanout_num()) {
      set_fanout_num(from.fanout_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void McuParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void McuParam::CopyFrom(const McuParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool McuParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void McuParam::Swap(McuParam* other) {
  if (other != this) {
    std::swap(mcu_num_, other->mcu_num_);
    std::swap(fanout_num_, other->fanout_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata McuParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = McuParam_descriptor_;
  metadata.reflection = McuParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProjParam::kSrcPopFieldNumber;
const int ProjParam::kDestPopFieldNumber;
const int ProjParam::kTauziFieldNumber;
const int ProjParam::kTauzjFieldNumber;
const int ProjParam::kTaueFieldNumber;
const int ProjParam::kTaupFieldNumber;
const int ProjParam::kMaxfqFieldNumber;
const int ProjParam::kBgainFieldNumber;
const int ProjParam::kWgainFieldNumber;
const int ProjParam::kPi0FieldNumber;
#endif  // !_MSC_VER

ProjParam::ProjParam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gsbn.ProjParam)
}

void ProjParam::InitAsDefaultInstance() {
}

ProjParam::ProjParam(const ProjParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gsbn.ProjParam)
}

void ProjParam::SharedCtor() {
  _cached_size_ = 0;
  src_pop_ = 0u;
  dest_pop_ = 0u;
  tauzi_ = 0;
  tauzj_ = 0;
  taue_ = 0;
  taup_ = 0;
  maxfq_ = 0;
  bgain_ = 0;
  wgain_ = 0;
  pi0_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProjParam::~ProjParam() {
  // @@protoc_insertion_point(destructor:gsbn.ProjParam)
  SharedDtor();
}

void ProjParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProjParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProjParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProjParam_descriptor_;
}

const ProjParam& ProjParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gsbn_2eproto();
  return *default_instance_;
}

ProjParam* ProjParam::default_instance_ = NULL;

ProjParam* ProjParam::New() const {
  return new ProjParam;
}

void ProjParam::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ProjParam*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(src_pop_, bgain_);
  }
  ZR_(wgain_, pi0_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProjParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gsbn.ProjParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 src_pop = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &src_pop_)));
          set_has_src_pop();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dest_pop;
        break;
      }

      // required uint32 dest_pop = 2;
      case 2: {
        if (tag == 16) {
         parse_dest_pop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dest_pop_)));
          set_has_dest_pop();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_tauzi;
        break;
      }

      // required float tauzi = 3;
      case 3: {
        if (tag == 29) {
         parse_tauzi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tauzi_)));
          set_has_tauzi();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_tauzj;
        break;
      }

      // required float tauzj = 4;
      case 4: {
        if (tag == 37) {
         parse_tauzj:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tauzj_)));
          set_has_tauzj();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_taue;
        break;
      }

      // required float taue = 5;
      case 5: {
        if (tag == 45) {
         parse_taue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &taue_)));
          set_has_taue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_taup;
        break;
      }

      // required float taup = 6;
      case 6: {
        if (tag == 53) {
         parse_taup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &taup_)));
          set_has_taup();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_maxfq;
        break;
      }

      // required float maxfq = 7;
      case 7: {
        if (tag == 61) {
         parse_maxfq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxfq_)));
          set_has_maxfq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_bgain;
        break;
      }

      // optional float bgain = 8 [default = 0];
      case 8: {
        if (tag == 69) {
         parse_bgain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bgain_)));
          set_has_bgain();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_wgain;
        break;
      }

      // optional float wgain = 9 [default = 0];
      case 9: {
        if (tag == 77) {
         parse_wgain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wgain_)));
          set_has_wgain();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_pi0;
        break;
      }

      // optional float pi0 = 10 [default = 0];
      case 10: {
        if (tag == 85) {
         parse_pi0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pi0_)));
          set_has_pi0();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gsbn.ProjParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gsbn.ProjParam)
  return false;
#undef DO_
}

void ProjParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gsbn.ProjParam)
  // required uint32 src_pop = 1;
  if (has_src_pop()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->src_pop(), output);
  }

  // required uint32 dest_pop = 2;
  if (has_dest_pop()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dest_pop(), output);
  }

  // required float tauzi = 3;
  if (has_tauzi()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->tauzi(), output);
  }

  // required float tauzj = 4;
  if (has_tauzj()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->tauzj(), output);
  }

  // required float taue = 5;
  if (has_taue()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->taue(), output);
  }

  // required float taup = 6;
  if (has_taup()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->taup(), output);
  }

  // required float maxfq = 7;
  if (has_maxfq()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->maxfq(), output);
  }

  // optional float bgain = 8 [default = 0];
  if (has_bgain()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->bgain(), output);
  }

  // optional float wgain = 9 [default = 0];
  if (has_wgain()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->wgain(), output);
  }

  // optional float pi0 = 10 [default = 0];
  if (has_pi0()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->pi0(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gsbn.ProjParam)
}

::google::protobuf::uint8* ProjParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gsbn.ProjParam)
  // required uint32 src_pop = 1;
  if (has_src_pop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->src_pop(), target);
  }

  // required uint32 dest_pop = 2;
  if (has_dest_pop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dest_pop(), target);
  }

  // required float tauzi = 3;
  if (has_tauzi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->tauzi(), target);
  }

  // required float tauzj = 4;
  if (has_tauzj()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->tauzj(), target);
  }

  // required float taue = 5;
  if (has_taue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->taue(), target);
  }

  // required float taup = 6;
  if (has_taup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->taup(), target);
  }

  // required float maxfq = 7;
  if (has_maxfq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->maxfq(), target);
  }

  // optional float bgain = 8 [default = 0];
  if (has_bgain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->bgain(), target);
  }

  // optional float wgain = 9 [default = 0];
  if (has_wgain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->wgain(), target);
  }

  // optional float pi0 = 10 [default = 0];
  if (has_pi0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->pi0(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gsbn.ProjParam)
  return target;
}

int ProjParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 src_pop = 1;
    if (has_src_pop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->src_pop());
    }

    // required uint32 dest_pop = 2;
    if (has_dest_pop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dest_pop());
    }

    // required float tauzi = 3;
    if (has_tauzi()) {
      total_size += 1 + 4;
    }

    // required float tauzj = 4;
    if (has_tauzj()) {
      total_size += 1 + 4;
    }

    // required float taue = 5;
    if (has_taue()) {
      total_size += 1 + 4;
    }

    // required float taup = 6;
    if (has_taup()) {
      total_size += 1 + 4;
    }

    // required float maxfq = 7;
    if (has_maxfq()) {
      total_size += 1 + 4;
    }

    // optional float bgain = 8 [default = 0];
    if (has_bgain()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float wgain = 9 [default = 0];
    if (has_wgain()) {
      total_size += 1 + 4;
    }

    // optional float pi0 = 10 [default = 0];
    if (has_pi0()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProjParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProjParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProjParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProjParam::MergeFrom(const ProjParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src_pop()) {
      set_src_pop(from.src_pop());
    }
    if (from.has_dest_pop()) {
      set_dest_pop(from.dest_pop());
    }
    if (from.has_tauzi()) {
      set_tauzi(from.tauzi());
    }
    if (from.has_tauzj()) {
      set_tauzj(from.tauzj());
    }
    if (from.has_taue()) {
      set_taue(from.taue());
    }
    if (from.has_taup()) {
      set_taup(from.taup());
    }
    if (from.has_maxfq()) {
      set_maxfq(from.maxfq());
    }
    if (from.has_bgain()) {
      set_bgain(from.bgain());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_wgain()) {
      set_wgain(from.wgain());
    }
    if (from.has_pi0()) {
      set_pi0(from.pi0());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProjParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProjParam::CopyFrom(const ProjParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProjParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void ProjParam::Swap(ProjParam* other) {
  if (other != this) {
    std::swap(src_pop_, other->src_pop_);
    std::swap(dest_pop_, other->dest_pop_);
    std::swap(tauzi_, other->tauzi_);
    std::swap(tauzj_, other->tauzj_);
    std::swap(taue_, other->taue_);
    std::swap(taup_, other->taup_);
    std::swap(maxfq_, other->maxfq_);
    std::swap(bgain_, other->bgain_);
    std::swap(wgain_, other->wgain_);
    std::swap(pi0_, other->pi0_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProjParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProjParam_descriptor_;
  metadata.reflection = ProjParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SolverState::kTimestampFieldNumber;
const int SolverState::kPrnFieldNumber;
const int SolverState::kTableStateFieldNumber;
const int SolverState::kVectorStateIFieldNumber;
const int SolverState::kVectorStateFFieldNumber;
const int SolverState::kVectorStateDFieldNumber;
#endif  // !_MSC_VER

SolverState::SolverState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gsbn.SolverState)
}

void SolverState::InitAsDefaultInstance() {
}

SolverState::SolverState(const SolverState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gsbn.SolverState)
}

void SolverState::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = 0;
  prn_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SolverState::~SolverState() {
  // @@protoc_insertion_point(destructor:gsbn.SolverState)
  SharedDtor();
}

void SolverState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SolverState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SolverState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SolverState_descriptor_;
}

const SolverState& SolverState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gsbn_2eproto();
  return *default_instance_;
}

SolverState* SolverState::default_instance_ = NULL;

SolverState* SolverState::New() const {
  return new SolverState;
}

void SolverState::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SolverState*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(timestamp_, prn_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  table_state_.Clear();
  vector_state_i_.Clear();
  vector_state_f_.Clear();
  vector_state_d_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SolverState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gsbn.SolverState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float timestamp = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_prn;
        break;
      }

      // required float prn = 2;
      case 2: {
        if (tag == 21) {
         parse_prn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &prn_)));
          set_has_prn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_table_state;
        break;
      }

      // repeated .gsbn.TableState table_state = 3;
      case 3: {
        if (tag == 26) {
         parse_table_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_table_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_table_state;
        if (input->ExpectTag(34)) goto parse_vector_state_i;
        break;
      }

      // repeated .gsbn.VectorStateI vector_state_i = 4;
      case 4: {
        if (tag == 34) {
         parse_vector_state_i:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vector_state_i()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_vector_state_i;
        if (input->ExpectTag(42)) goto parse_vector_state_f;
        break;
      }

      // repeated .gsbn.VectorStateF vector_state_f = 5;
      case 5: {
        if (tag == 42) {
         parse_vector_state_f:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vector_state_f()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_vector_state_f;
        if (input->ExpectTag(50)) goto parse_vector_state_d;
        break;
      }

      // repeated .gsbn.VectorStateD vector_state_d = 6;
      case 6: {
        if (tag == 50) {
         parse_vector_state_d:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vector_state_d()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_vector_state_d;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gsbn.SolverState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gsbn.SolverState)
  return false;
#undef DO_
}

void SolverState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gsbn.SolverState)
  // required float timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->timestamp(), output);
  }

  // required float prn = 2;
  if (has_prn()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->prn(), output);
  }

  // repeated .gsbn.TableState table_state = 3;
  for (int i = 0; i < this->table_state_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->table_state(i), output);
  }

  // repeated .gsbn.VectorStateI vector_state_i = 4;
  for (int i = 0; i < this->vector_state_i_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->vector_state_i(i), output);
  }

  // repeated .gsbn.VectorStateF vector_state_f = 5;
  for (int i = 0; i < this->vector_state_f_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->vector_state_f(i), output);
  }

  // repeated .gsbn.VectorStateD vector_state_d = 6;
  for (int i = 0; i < this->vector_state_d_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->vector_state_d(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gsbn.SolverState)
}

::google::protobuf::uint8* SolverState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gsbn.SolverState)
  // required float timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->timestamp(), target);
  }

  // required float prn = 2;
  if (has_prn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->prn(), target);
  }

  // repeated .gsbn.TableState table_state = 3;
  for (int i = 0; i < this->table_state_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->table_state(i), target);
  }

  // repeated .gsbn.VectorStateI vector_state_i = 4;
  for (int i = 0; i < this->vector_state_i_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->vector_state_i(i), target);
  }

  // repeated .gsbn.VectorStateF vector_state_f = 5;
  for (int i = 0; i < this->vector_state_f_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->vector_state_f(i), target);
  }

  // repeated .gsbn.VectorStateD vector_state_d = 6;
  for (int i = 0; i < this->vector_state_d_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->vector_state_d(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gsbn.SolverState)
  return target;
}

int SolverState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 + 4;
    }

    // required float prn = 2;
    if (has_prn()) {
      total_size += 1 + 4;
    }

  }
  // repeated .gsbn.TableState table_state = 3;
  total_size += 1 * this->table_state_size();
  for (int i = 0; i < this->table_state_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->table_state(i));
  }

  // repeated .gsbn.VectorStateI vector_state_i = 4;
  total_size += 1 * this->vector_state_i_size();
  for (int i = 0; i < this->vector_state_i_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vector_state_i(i));
  }

  // repeated .gsbn.VectorStateF vector_state_f = 5;
  total_size += 1 * this->vector_state_f_size();
  for (int i = 0; i < this->vector_state_f_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vector_state_f(i));
  }

  // repeated .gsbn.VectorStateD vector_state_d = 6;
  total_size += 1 * this->vector_state_d_size();
  for (int i = 0; i < this->vector_state_d_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vector_state_d(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SolverState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SolverState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SolverState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SolverState::MergeFrom(const SolverState& from) {
  GOOGLE_CHECK_NE(&from, this);
  table_state_.MergeFrom(from.table_state_);
  vector_state_i_.MergeFrom(from.vector_state_i_);
  vector_state_f_.MergeFrom(from.vector_state_f_);
  vector_state_d_.MergeFrom(from.vector_state_d_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_prn()) {
      set_prn(from.prn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SolverState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SolverState::CopyFrom(const SolverState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SolverState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->table_state())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->vector_state_i())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->vector_state_f())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->vector_state_d())) return false;
  return true;
}

void SolverState::Swap(SolverState* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(prn_, other->prn_);
    table_state_.Swap(&other->table_state_);
    vector_state_i_.Swap(&other->vector_state_i_);
    vector_state_f_.Swap(&other->vector_state_f_);
    vector_state_d_.Swap(&other->vector_state_d_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SolverState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SolverState_descriptor_;
  metadata.reflection = SolverState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TableState::kNameFieldNumber;
const int TableState::kDescFieldNumber;
const int TableState::kDataFieldNumber;
#endif  // !_MSC_VER

TableState::TableState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gsbn.TableState)
}

void TableState::InitAsDefaultInstance() {
}

TableState::TableState(const TableState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gsbn.TableState)
}

void TableState::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TableState::~TableState() {
  // @@protoc_insertion_point(destructor:gsbn.TableState)
  SharedDtor();
}

void TableState::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete desc_;
  }
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void TableState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TableState_descriptor_;
}

const TableState& TableState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gsbn_2eproto();
  return *default_instance_;
}

TableState* TableState::default_instance_ = NULL;

TableState* TableState::New() const {
  return new TableState;
}

void TableState::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        desc_->clear();
      }
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TableState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gsbn.TableState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_desc;
        break;
      }

      // required bytes desc = 2;
      case 2: {
        if (tag == 18) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_desc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // required bytes data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gsbn.TableState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gsbn.TableState)
  return false;
#undef DO_
}

void TableState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gsbn.TableState)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required bytes desc = 2;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->desc(), output);
  }

  // required bytes data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gsbn.TableState)
}

::google::protobuf::uint8* TableState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gsbn.TableState)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required bytes desc = 2;
  if (has_desc()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->desc(), target);
  }

  // required bytes data = 3;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gsbn.TableState)
  return target;
}

int TableState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required bytes desc = 2;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->desc());
    }

    // required bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TableState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TableState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TableState::MergeFrom(const TableState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TableState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableState::CopyFrom(const TableState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void TableState::Swap(TableState* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(desc_, other->desc_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TableState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TableState_descriptor_;
  metadata.reflection = TableState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VectorStateI::kNameFieldNumber;
const int VectorStateI::kLdFieldNumber;
const int VectorStateI::kDataFieldNumber;
#endif  // !_MSC_VER

VectorStateI::VectorStateI()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gsbn.VectorStateI)
}

void VectorStateI::InitAsDefaultInstance() {
}

VectorStateI::VectorStateI(const VectorStateI& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gsbn.VectorStateI)
}

void VectorStateI::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ld_ = 1u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VectorStateI::~VectorStateI() {
  // @@protoc_insertion_point(destructor:gsbn.VectorStateI)
  SharedDtor();
}

void VectorStateI::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void VectorStateI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VectorStateI::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VectorStateI_descriptor_;
}

const VectorStateI& VectorStateI::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gsbn_2eproto();
  return *default_instance_;
}

VectorStateI* VectorStateI::default_instance_ = NULL;

VectorStateI* VectorStateI::New() const {
  return new VectorStateI;
}

void VectorStateI::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    ld_ = 1u;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VectorStateI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gsbn.VectorStateI)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ld;
        break;
      }

      // optional uint32 ld = 2 [default = 1];
      case 2: {
        if (tag == 16) {
         parse_ld:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ld_)));
          set_has_ld();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // repeated int32 data = 3 [packed = true];
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_data())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26, input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gsbn.VectorStateI)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gsbn.VectorStateI)
  return false;
#undef DO_
}

void VectorStateI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gsbn.VectorStateI)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional uint32 ld = 2 [default = 1];
  if (has_ld()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ld(), output);
  }

  // repeated int32 data = 3 [packed = true];
  if (this->data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_data_cached_byte_size_);
  }
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gsbn.VectorStateI)
}

::google::protobuf::uint8* VectorStateI::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gsbn.VectorStateI)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 ld = 2 [default = 1];
  if (has_ld()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ld(), target);
  }

  // repeated int32 data = 3 [packed = true];
  if (this->data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _data_cached_byte_size_, target);
  }
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gsbn.VectorStateI)
  return target;
}

int VectorStateI::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 ld = 2 [default = 1];
    if (has_ld()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ld());
    }

  }
  // repeated int32 data = 3 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->data_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->data(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _data_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VectorStateI::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VectorStateI* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VectorStateI*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VectorStateI::MergeFrom(const VectorStateI& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_ld()) {
      set_ld(from.ld());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VectorStateI::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorStateI::CopyFrom(const VectorStateI& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorStateI::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void VectorStateI::Swap(VectorStateI* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(ld_, other->ld_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VectorStateI::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VectorStateI_descriptor_;
  metadata.reflection = VectorStateI_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VectorStateF::kNameFieldNumber;
const int VectorStateF::kLdFieldNumber;
const int VectorStateF::kDataFieldNumber;
#endif  // !_MSC_VER

VectorStateF::VectorStateF()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gsbn.VectorStateF)
}

void VectorStateF::InitAsDefaultInstance() {
}

VectorStateF::VectorStateF(const VectorStateF& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gsbn.VectorStateF)
}

void VectorStateF::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ld_ = 1u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VectorStateF::~VectorStateF() {
  // @@protoc_insertion_point(destructor:gsbn.VectorStateF)
  SharedDtor();
}

void VectorStateF::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void VectorStateF::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VectorStateF::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VectorStateF_descriptor_;
}

const VectorStateF& VectorStateF::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gsbn_2eproto();
  return *default_instance_;
}

VectorStateF* VectorStateF::default_instance_ = NULL;

VectorStateF* VectorStateF::New() const {
  return new VectorStateF;
}

void VectorStateF::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    ld_ = 1u;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VectorStateF::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gsbn.VectorStateF)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ld;
        break;
      }

      // optional uint32 ld = 2 [default = 1];
      case 2: {
        if (tag == 16) {
         parse_ld:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ld_)));
          set_has_ld();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // repeated float data = 3 [packed = true];
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_data())));
        } else if (tag == 29) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26, input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gsbn.VectorStateF)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gsbn.VectorStateF)
  return false;
#undef DO_
}

void VectorStateF::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gsbn.VectorStateF)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional uint32 ld = 2 [default = 1];
  if (has_ld()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ld(), output);
  }

  // repeated float data = 3 [packed = true];
  if (this->data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_data_cached_byte_size_);
  }
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gsbn.VectorStateF)
}

::google::protobuf::uint8* VectorStateF::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gsbn.VectorStateF)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 ld = 2 [default = 1];
  if (has_ld()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ld(), target);
  }

  // repeated float data = 3 [packed = true];
  if (this->data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _data_cached_byte_size_, target);
  }
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gsbn.VectorStateF)
  return target;
}

int VectorStateF::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 ld = 2 [default = 1];
    if (has_ld()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ld());
    }

  }
  // repeated float data = 3 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->data_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _data_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VectorStateF::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VectorStateF* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VectorStateF*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VectorStateF::MergeFrom(const VectorStateF& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_ld()) {
      set_ld(from.ld());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VectorStateF::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorStateF::CopyFrom(const VectorStateF& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorStateF::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void VectorStateF::Swap(VectorStateF* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(ld_, other->ld_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VectorStateF::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VectorStateF_descriptor_;
  metadata.reflection = VectorStateF_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VectorStateD::kNameFieldNumber;
const int VectorStateD::kLdFieldNumber;
const int VectorStateD::kDataFieldNumber;
#endif  // !_MSC_VER

VectorStateD::VectorStateD()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gsbn.VectorStateD)
}

void VectorStateD::InitAsDefaultInstance() {
}

VectorStateD::VectorStateD(const VectorStateD& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gsbn.VectorStateD)
}

void VectorStateD::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ld_ = 1u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VectorStateD::~VectorStateD() {
  // @@protoc_insertion_point(destructor:gsbn.VectorStateD)
  SharedDtor();
}

void VectorStateD::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void VectorStateD::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VectorStateD::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VectorStateD_descriptor_;
}

const VectorStateD& VectorStateD::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gsbn_2eproto();
  return *default_instance_;
}

VectorStateD* VectorStateD::default_instance_ = NULL;

VectorStateD* VectorStateD::New() const {
  return new VectorStateD;
}

void VectorStateD::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    ld_ = 1u;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VectorStateD::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gsbn.VectorStateD)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ld;
        break;
      }

      // optional uint32 ld = 2 [default = 1];
      case 2: {
        if (tag == 16) {
         parse_ld:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ld_)));
          set_has_ld();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // repeated double data = 3 [packed = true];
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_data())));
        } else if (tag == 25) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 26, input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gsbn.VectorStateD)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gsbn.VectorStateD)
  return false;
#undef DO_
}

void VectorStateD::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gsbn.VectorStateD)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional uint32 ld = 2 [default = 1];
  if (has_ld()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ld(), output);
  }

  // repeated double data = 3 [packed = true];
  if (this->data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_data_cached_byte_size_);
  }
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gsbn.VectorStateD)
}

::google::protobuf::uint8* VectorStateD::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gsbn.VectorStateD)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 ld = 2 [default = 1];
  if (has_ld()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ld(), target);
  }

  // repeated double data = 3 [packed = true];
  if (this->data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _data_cached_byte_size_, target);
  }
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gsbn.VectorStateD)
  return target;
}

int VectorStateD::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 ld = 2 [default = 1];
    if (has_ld()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ld());
    }

  }
  // repeated double data = 3 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->data_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _data_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VectorStateD::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VectorStateD* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VectorStateD*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VectorStateD::MergeFrom(const VectorStateD& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_ld()) {
      set_ld(from.ld());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VectorStateD::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorStateD::CopyFrom(const VectorStateD& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorStateD::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void VectorStateD::Swap(VectorStateD* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(ld_, other->ld_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VectorStateD::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VectorStateD_descriptor_;
  metadata.reflection = VectorStateD_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StimRawData::kDataRowsFieldNumber;
const int StimRawData::kDataColsFieldNumber;
const int StimRawData::kDataFieldNumber;
const int StimRawData::kMaskRowsFieldNumber;
const int StimRawData::kMaskColsFieldNumber;
const int StimRawData::kMaskFieldNumber;
#endif  // !_MSC_VER

StimRawData::StimRawData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gsbn.StimRawData)
}

void StimRawData::InitAsDefaultInstance() {
}

StimRawData::StimRawData(const StimRawData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gsbn.StimRawData)
}

void StimRawData::SharedCtor() {
  _cached_size_ = 0;
  data_rows_ = 0u;
  data_cols_ = 0u;
  mask_rows_ = 0u;
  mask_cols_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StimRawData::~StimRawData() {
  // @@protoc_insertion_point(destructor:gsbn.StimRawData)
  SharedDtor();
}

void StimRawData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StimRawData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StimRawData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StimRawData_descriptor_;
}

const StimRawData& StimRawData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gsbn_2eproto();
  return *default_instance_;
}

StimRawData* StimRawData::default_instance_ = NULL;

StimRawData* StimRawData::New() const {
  return new StimRawData;
}

void StimRawData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StimRawData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(data_rows_, data_cols_);
  ZR_(mask_rows_, mask_cols_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  data_.Clear();
  mask_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StimRawData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gsbn.StimRawData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 data_rows = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_rows_)));
          set_has_data_rows();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_data_cols;
        break;
      }

      // required uint32 data_cols = 2;
      case 2: {
        if (tag == 16) {
         parse_data_cols:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_cols_)));
          set_has_data_cols();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // repeated float data = 3 [packed = true];
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_data())));
        } else if (tag == 29) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26, input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_mask_rows;
        break;
      }

      // required uint32 mask_rows = 4;
      case 4: {
        if (tag == 32) {
         parse_mask_rows:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mask_rows_)));
          set_has_mask_rows();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_mask_cols;
        break;
      }

      // required uint32 mask_cols = 5;
      case 5: {
        if (tag == 40) {
         parse_mask_cols:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mask_cols_)));
          set_has_mask_cols();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_mask;
        break;
      }

      // repeated float mask = 6 [packed = true];
      case 6: {
        if (tag == 50) {
         parse_mask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_mask())));
        } else if (tag == 53) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 50, input, this->mutable_mask())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gsbn.StimRawData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gsbn.StimRawData)
  return false;
#undef DO_
}

void StimRawData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gsbn.StimRawData)
  // required uint32 data_rows = 1;
  if (has_data_rows()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->data_rows(), output);
  }

  // required uint32 data_cols = 2;
  if (has_data_cols()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->data_cols(), output);
  }

  // repeated float data = 3 [packed = true];
  if (this->data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_data_cached_byte_size_);
  }
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->data(i), output);
  }

  // required uint32 mask_rows = 4;
  if (has_mask_rows()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->mask_rows(), output);
  }

  // required uint32 mask_cols = 5;
  if (has_mask_cols()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->mask_cols(), output);
  }

  // repeated float mask = 6 [packed = true];
  if (this->mask_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_mask_cached_byte_size_);
  }
  for (int i = 0; i < this->mask_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->mask(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gsbn.StimRawData)
}

::google::protobuf::uint8* StimRawData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gsbn.StimRawData)
  // required uint32 data_rows = 1;
  if (has_data_rows()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->data_rows(), target);
  }

  // required uint32 data_cols = 2;
  if (has_data_cols()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->data_cols(), target);
  }

  // repeated float data = 3 [packed = true];
  if (this->data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _data_cached_byte_size_, target);
  }
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->data(i), target);
  }

  // required uint32 mask_rows = 4;
  if (has_mask_rows()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->mask_rows(), target);
  }

  // required uint32 mask_cols = 5;
  if (has_mask_cols()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->mask_cols(), target);
  }

  // repeated float mask = 6 [packed = true];
  if (this->mask_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _mask_cached_byte_size_, target);
  }
  for (int i = 0; i < this->mask_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->mask(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gsbn.StimRawData)
  return target;
}

int StimRawData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 data_rows = 1;
    if (has_data_rows()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data_rows());
    }

    // required uint32 data_cols = 2;
    if (has_data_cols()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data_cols());
    }

    // required uint32 mask_rows = 4;
    if (has_mask_rows()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mask_rows());
    }

    // required uint32 mask_cols = 5;
    if (has_mask_cols()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mask_cols());
    }

  }
  // repeated float data = 3 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->data_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _data_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float mask = 6 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->mask_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _mask_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StimRawData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StimRawData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StimRawData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StimRawData::MergeFrom(const StimRawData& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mask_.MergeFrom(from.mask_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data_rows()) {
      set_data_rows(from.data_rows());
    }
    if (from.has_data_cols()) {
      set_data_cols(from.data_cols());
    }
    if (from.has_mask_rows()) {
      set_mask_rows(from.mask_rows());
    }
    if (from.has_mask_cols()) {
      set_mask_cols(from.mask_cols());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StimRawData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StimRawData::CopyFrom(const StimRawData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StimRawData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001b) != 0x0000001b) return false;

  return true;
}

void StimRawData::Swap(StimRawData* other) {
  if (other != this) {
    std::swap(data_rows_, other->data_rows_);
    std::swap(data_cols_, other->data_cols_);
    data_.Swap(&other->data_);
    std::swap(mask_rows_, other->mask_rows_);
    std::swap(mask_cols_, other->mask_cols_);
    mask_.Swap(&other->mask_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StimRawData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StimRawData_descriptor_;
  metadata.reflection = StimRawData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gsbn

// @@protoc_insertion_point(global_scope)
