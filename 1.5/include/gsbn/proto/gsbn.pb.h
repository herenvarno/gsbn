// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gsbn.proto

#ifndef PROTOBUF_gsbn_2eproto__INCLUDED
#define PROTOBUF_gsbn_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace gsbn {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_gsbn_2eproto();
void protobuf_AssignDesc_gsbn_2eproto();
void protobuf_ShutdownFile_gsbn_2eproto();

class SolverParam;
class GenParam;
class ModeParam;
class NetParam;
class PopParam;
class ProjParam;
class SolverState;
class TableState;
class VectorStateI;
class VectorStateF;
class VectorStateD;
class StimRawData;

// ===================================================================

class SolverParam : public ::google::protobuf::Message {
 public:
  SolverParam();
  virtual ~SolverParam();

  SolverParam(const SolverParam& from);

  inline SolverParam& operator=(const SolverParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SolverParam& default_instance();

  void Swap(SolverParam* other);

  // implements Message ----------------------------------------------

  SolverParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SolverParam& from);
  void MergeFrom(const SolverParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .gsbn.GenParam gen_param = 1;
  inline bool has_gen_param() const;
  inline void clear_gen_param();
  static const int kGenParamFieldNumber = 1;
  inline const ::gsbn::GenParam& gen_param() const;
  inline ::gsbn::GenParam* mutable_gen_param();
  inline ::gsbn::GenParam* release_gen_param();
  inline void set_allocated_gen_param(::gsbn::GenParam* gen_param);

  // required .gsbn.NetParam net_param = 2;
  inline bool has_net_param() const;
  inline void clear_net_param();
  static const int kNetParamFieldNumber = 2;
  inline const ::gsbn::NetParam& net_param() const;
  inline ::gsbn::NetParam* mutable_net_param();
  inline ::gsbn::NetParam* release_net_param();
  inline void set_allocated_net_param(::gsbn::NetParam* net_param);

  // @@protoc_insertion_point(class_scope:gsbn.SolverParam)
 private:
  inline void set_has_gen_param();
  inline void clear_has_gen_param();
  inline void set_has_net_param();
  inline void clear_has_net_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::gsbn::GenParam* gen_param_;
  ::gsbn::NetParam* net_param_;
  friend void  protobuf_AddDesc_gsbn_2eproto();
  friend void protobuf_AssignDesc_gsbn_2eproto();
  friend void protobuf_ShutdownFile_gsbn_2eproto();

  void InitAsDefaultInstance();
  static SolverParam* default_instance_;
};
// -------------------------------------------------------------------

class GenParam : public ::google::protobuf::Message {
 public:
  GenParam();
  virtual ~GenParam();

  GenParam(const GenParam& from);

  inline GenParam& operator=(const GenParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GenParam& default_instance();

  void Swap(GenParam* other);

  // implements Message ----------------------------------------------

  GenParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GenParam& from);
  void MergeFrom(const GenParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string stim_file = 1;
  inline bool has_stim_file() const;
  inline void clear_stim_file();
  static const int kStimFileFieldNumber = 1;
  inline const ::std::string& stim_file() const;
  inline void set_stim_file(const ::std::string& value);
  inline void set_stim_file(const char* value);
  inline void set_stim_file(const char* value, size_t size);
  inline ::std::string* mutable_stim_file();
  inline ::std::string* release_stim_file();
  inline void set_allocated_stim_file(::std::string* stim_file);

  // required float dt = 2;
  inline bool has_dt() const;
  inline void clear_dt();
  static const int kDtFieldNumber = 2;
  inline float dt() const;
  inline void set_dt(float value);

  // repeated .gsbn.ModeParam mode_param = 3;
  inline int mode_param_size() const;
  inline void clear_mode_param();
  static const int kModeParamFieldNumber = 3;
  inline const ::gsbn::ModeParam& mode_param(int index) const;
  inline ::gsbn::ModeParam* mutable_mode_param(int index);
  inline ::gsbn::ModeParam* add_mode_param();
  inline const ::google::protobuf::RepeatedPtrField< ::gsbn::ModeParam >&
      mode_param() const;
  inline ::google::protobuf::RepeatedPtrField< ::gsbn::ModeParam >*
      mutable_mode_param();

  // @@protoc_insertion_point(class_scope:gsbn.GenParam)
 private:
  inline void set_has_stim_file();
  inline void clear_has_stim_file();
  inline void set_has_dt();
  inline void clear_has_dt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* stim_file_;
  ::google::protobuf::RepeatedPtrField< ::gsbn::ModeParam > mode_param_;
  float dt_;
  friend void  protobuf_AddDesc_gsbn_2eproto();
  friend void protobuf_AssignDesc_gsbn_2eproto();
  friend void protobuf_ShutdownFile_gsbn_2eproto();

  void InitAsDefaultInstance();
  static GenParam* default_instance_;
};
// -------------------------------------------------------------------

class ModeParam : public ::google::protobuf::Message {
 public:
  ModeParam();
  virtual ~ModeParam();

  ModeParam(const ModeParam& from);

  inline ModeParam& operator=(const ModeParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModeParam& default_instance();

  void Swap(ModeParam* other);

  // implements Message ----------------------------------------------

  ModeParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ModeParam& from);
  void MergeFrom(const ModeParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float begin_time = 1;
  inline bool has_begin_time() const;
  inline void clear_begin_time();
  static const int kBeginTimeFieldNumber = 1;
  inline float begin_time() const;
  inline void set_begin_time(float value);

  // required float end_time = 2;
  inline bool has_end_time() const;
  inline void clear_end_time();
  static const int kEndTimeFieldNumber = 2;
  inline float end_time() const;
  inline void set_end_time(float value);

  // optional float prn = 3 [default = 1];
  inline bool has_prn() const;
  inline void clear_prn();
  static const int kPrnFieldNumber = 3;
  inline float prn() const;
  inline void set_prn(float value);

  // optional uint32 gain_mask = 4 [default = 0];
  inline bool has_gain_mask() const;
  inline void clear_gain_mask();
  static const int kGainMaskFieldNumber = 4;
  inline ::google::protobuf::uint32 gain_mask() const;
  inline void set_gain_mask(::google::protobuf::uint32 value);

  // optional uint32 plasticity = 5 [default = 1];
  inline bool has_plasticity() const;
  inline void clear_plasticity();
  static const int kPlasticityFieldNumber = 5;
  inline ::google::protobuf::uint32 plasticity() const;
  inline void set_plasticity(::google::protobuf::uint32 value);

  // optional uint32 stim_index = 6 [default = 0];
  inline bool has_stim_index() const;
  inline void clear_stim_index();
  static const int kStimIndexFieldNumber = 6;
  inline ::google::protobuf::uint32 stim_index() const;
  inline void set_stim_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gsbn.ModeParam)
 private:
  inline void set_has_begin_time();
  inline void clear_has_begin_time();
  inline void set_has_end_time();
  inline void clear_has_end_time();
  inline void set_has_prn();
  inline void clear_has_prn();
  inline void set_has_gain_mask();
  inline void clear_has_gain_mask();
  inline void set_has_plasticity();
  inline void clear_has_plasticity();
  inline void set_has_stim_index();
  inline void clear_has_stim_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float begin_time_;
  float end_time_;
  float prn_;
  ::google::protobuf::uint32 gain_mask_;
  ::google::protobuf::uint32 plasticity_;
  ::google::protobuf::uint32 stim_index_;
  friend void  protobuf_AddDesc_gsbn_2eproto();
  friend void protobuf_AssignDesc_gsbn_2eproto();
  friend void protobuf_ShutdownFile_gsbn_2eproto();

  void InitAsDefaultInstance();
  static ModeParam* default_instance_;
};
// -------------------------------------------------------------------

class NetParam : public ::google::protobuf::Message {
 public:
  NetParam();
  virtual ~NetParam();

  NetParam(const NetParam& from);

  inline NetParam& operator=(const NetParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetParam& default_instance();

  void Swap(NetParam* other);

  // implements Message ----------------------------------------------

  NetParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetParam& from);
  void MergeFrom(const NetParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .gsbn.PopParam pop_param = 1;
  inline int pop_param_size() const;
  inline void clear_pop_param();
  static const int kPopParamFieldNumber = 1;
  inline const ::gsbn::PopParam& pop_param(int index) const;
  inline ::gsbn::PopParam* mutable_pop_param(int index);
  inline ::gsbn::PopParam* add_pop_param();
  inline const ::google::protobuf::RepeatedPtrField< ::gsbn::PopParam >&
      pop_param() const;
  inline ::google::protobuf::RepeatedPtrField< ::gsbn::PopParam >*
      mutable_pop_param();

  // repeated .gsbn.ProjParam proj_param = 2;
  inline int proj_param_size() const;
  inline void clear_proj_param();
  static const int kProjParamFieldNumber = 2;
  inline const ::gsbn::ProjParam& proj_param(int index) const;
  inline ::gsbn::ProjParam* mutable_proj_param(int index);
  inline ::gsbn::ProjParam* add_proj_param();
  inline const ::google::protobuf::RepeatedPtrField< ::gsbn::ProjParam >&
      proj_param() const;
  inline ::google::protobuf::RepeatedPtrField< ::gsbn::ProjParam >*
      mutable_proj_param();

  // repeated string procedure = 3;
  inline int procedure_size() const;
  inline void clear_procedure();
  static const int kProcedureFieldNumber = 3;
  inline const ::std::string& procedure(int index) const;
  inline ::std::string* mutable_procedure(int index);
  inline void set_procedure(int index, const ::std::string& value);
  inline void set_procedure(int index, const char* value);
  inline void set_procedure(int index, const char* value, size_t size);
  inline ::std::string* add_procedure();
  inline void add_procedure(const ::std::string& value);
  inline void add_procedure(const char* value);
  inline void add_procedure(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& procedure() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_procedure();

  // @@protoc_insertion_point(class_scope:gsbn.NetParam)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::gsbn::PopParam > pop_param_;
  ::google::protobuf::RepeatedPtrField< ::gsbn::ProjParam > proj_param_;
  ::google::protobuf::RepeatedPtrField< ::std::string> procedure_;
  friend void  protobuf_AddDesc_gsbn_2eproto();
  friend void protobuf_AssignDesc_gsbn_2eproto();
  friend void protobuf_ShutdownFile_gsbn_2eproto();

  void InitAsDefaultInstance();
  static NetParam* default_instance_;
};
// -------------------------------------------------------------------

class PopParam : public ::google::protobuf::Message {
 public:
  PopParam();
  virtual ~PopParam();

  PopParam(const PopParam& from);

  inline PopParam& operator=(const PopParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PopParam& default_instance();

  void Swap(PopParam* other);

  // implements Message ----------------------------------------------

  PopParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PopParam& from);
  void MergeFrom(const PopParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 pop_num = 1;
  inline bool has_pop_num() const;
  inline void clear_pop_num();
  static const int kPopNumFieldNumber = 1;
  inline ::google::protobuf::uint32 pop_num() const;
  inline void set_pop_num(::google::protobuf::uint32 value);

  // required uint32 hcu_num = 2;
  inline bool has_hcu_num() const;
  inline void clear_hcu_num();
  static const int kHcuNumFieldNumber = 2;
  inline ::google::protobuf::uint32 hcu_num() const;
  inline void set_hcu_num(::google::protobuf::uint32 value);

  // required uint32 mcu_num = 3;
  inline bool has_mcu_num() const;
  inline void clear_mcu_num();
  static const int kMcuNumFieldNumber = 3;
  inline ::google::protobuf::uint32 mcu_num() const;
  inline void set_mcu_num(::google::protobuf::uint32 value);

  // required uint32 slot_num = 4;
  inline bool has_slot_num() const;
  inline void clear_slot_num();
  static const int kSlotNumFieldNumber = 4;
  inline ::google::protobuf::uint32 slot_num() const;
  inline void set_slot_num(::google::protobuf::uint32 value);

  // required uint32 fanout_num = 5;
  inline bool has_fanout_num() const;
  inline void clear_fanout_num();
  static const int kFanoutNumFieldNumber = 5;
  inline ::google::protobuf::uint32 fanout_num() const;
  inline void set_fanout_num(::google::protobuf::uint32 value);

  // optional float taum = 6 [default = 0.01];
  inline bool has_taum() const;
  inline void clear_taum();
  static const int kTaumFieldNumber = 6;
  inline float taum() const;
  inline void set_taum(float value);

  // optional float wtagain = 7 [default = 4];
  inline bool has_wtagain() const;
  inline void clear_wtagain();
  static const int kWtagainFieldNumber = 7;
  inline float wtagain() const;
  inline void set_wtagain(float value);

  // optional float maxfq = 8 [default = 100];
  inline bool has_maxfq() const;
  inline void clear_maxfq();
  static const int kMaxfqFieldNumber = 8;
  inline float maxfq() const;
  inline void set_maxfq(float value);

  // optional float igain = 9 [default = 1];
  inline bool has_igain() const;
  inline void clear_igain();
  static const int kIgainFieldNumber = 9;
  inline float igain() const;
  inline void set_igain(float value);

  // optional float wgain = 10 [default = 1];
  inline bool has_wgain() const;
  inline void clear_wgain();
  static const int kWgainFieldNumber = 10;
  inline float wgain() const;
  inline void set_wgain(float value);

  // optional float lgbias = 11 [default = 0];
  inline bool has_lgbias() const;
  inline void clear_lgbias();
  static const int kLgbiasFieldNumber = 11;
  inline float lgbias() const;
  inline void set_lgbias(float value);

  // optional float snoise = 12 [default = 0];
  inline bool has_snoise() const;
  inline void clear_snoise();
  static const int kSnoiseFieldNumber = 12;
  inline float snoise() const;
  inline void set_snoise(float value);

  // @@protoc_insertion_point(class_scope:gsbn.PopParam)
 private:
  inline void set_has_pop_num();
  inline void clear_has_pop_num();
  inline void set_has_hcu_num();
  inline void clear_has_hcu_num();
  inline void set_has_mcu_num();
  inline void clear_has_mcu_num();
  inline void set_has_slot_num();
  inline void clear_has_slot_num();
  inline void set_has_fanout_num();
  inline void clear_has_fanout_num();
  inline void set_has_taum();
  inline void clear_has_taum();
  inline void set_has_wtagain();
  inline void clear_has_wtagain();
  inline void set_has_maxfq();
  inline void clear_has_maxfq();
  inline void set_has_igain();
  inline void clear_has_igain();
  inline void set_has_wgain();
  inline void clear_has_wgain();
  inline void set_has_lgbias();
  inline void clear_has_lgbias();
  inline void set_has_snoise();
  inline void clear_has_snoise();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 pop_num_;
  ::google::protobuf::uint32 hcu_num_;
  ::google::protobuf::uint32 mcu_num_;
  ::google::protobuf::uint32 slot_num_;
  ::google::protobuf::uint32 fanout_num_;
  float taum_;
  float wtagain_;
  float maxfq_;
  float igain_;
  float wgain_;
  float lgbias_;
  float snoise_;
  friend void  protobuf_AddDesc_gsbn_2eproto();
  friend void protobuf_AssignDesc_gsbn_2eproto();
  friend void protobuf_ShutdownFile_gsbn_2eproto();

  void InitAsDefaultInstance();
  static PopParam* default_instance_;
};
// -------------------------------------------------------------------

class ProjParam : public ::google::protobuf::Message {
 public:
  ProjParam();
  virtual ~ProjParam();

  ProjParam(const ProjParam& from);

  inline ProjParam& operator=(const ProjParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProjParam& default_instance();

  void Swap(ProjParam* other);

  // implements Message ----------------------------------------------

  ProjParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProjParam& from);
  void MergeFrom(const ProjParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 src_pop = 1;
  inline bool has_src_pop() const;
  inline void clear_src_pop();
  static const int kSrcPopFieldNumber = 1;
  inline ::google::protobuf::uint32 src_pop() const;
  inline void set_src_pop(::google::protobuf::uint32 value);

  // required uint32 dest_pop = 2;
  inline bool has_dest_pop() const;
  inline void clear_dest_pop();
  static const int kDestPopFieldNumber = 2;
  inline ::google::protobuf::uint32 dest_pop() const;
  inline void set_dest_pop(::google::protobuf::uint32 value);

  // required float tauzi = 3;
  inline bool has_tauzi() const;
  inline void clear_tauzi();
  static const int kTauziFieldNumber = 3;
  inline float tauzi() const;
  inline void set_tauzi(float value);

  // required float tauzj = 4;
  inline bool has_tauzj() const;
  inline void clear_tauzj();
  static const int kTauzjFieldNumber = 4;
  inline float tauzj() const;
  inline void set_tauzj(float value);

  // required float taue = 5;
  inline bool has_taue() const;
  inline void clear_taue();
  static const int kTaueFieldNumber = 5;
  inline float taue() const;
  inline void set_taue(float value);

  // required float taup = 6;
  inline bool has_taup() const;
  inline void clear_taup();
  static const int kTaupFieldNumber = 6;
  inline float taup() const;
  inline void set_taup(float value);

  // optional float maxfq = 7 [default = 100];
  inline bool has_maxfq() const;
  inline void clear_maxfq();
  static const int kMaxfqFieldNumber = 7;
  inline float maxfq() const;
  inline void set_maxfq(float value);

  // optional float bgain = 8 [default = 0];
  inline bool has_bgain() const;
  inline void clear_bgain();
  static const int kBgainFieldNumber = 8;
  inline float bgain() const;
  inline void set_bgain(float value);

  // optional float wgain = 9 [default = 0];
  inline bool has_wgain() const;
  inline void clear_wgain();
  static const int kWgainFieldNumber = 9;
  inline float wgain() const;
  inline void set_wgain(float value);

  // optional float pi0 = 10 [default = 0];
  inline bool has_pi0() const;
  inline void clear_pi0();
  static const int kPi0FieldNumber = 10;
  inline float pi0() const;
  inline void set_pi0(float value);

  // @@protoc_insertion_point(class_scope:gsbn.ProjParam)
 private:
  inline void set_has_src_pop();
  inline void clear_has_src_pop();
  inline void set_has_dest_pop();
  inline void clear_has_dest_pop();
  inline void set_has_tauzi();
  inline void clear_has_tauzi();
  inline void set_has_tauzj();
  inline void clear_has_tauzj();
  inline void set_has_taue();
  inline void clear_has_taue();
  inline void set_has_taup();
  inline void clear_has_taup();
  inline void set_has_maxfq();
  inline void clear_has_maxfq();
  inline void set_has_bgain();
  inline void clear_has_bgain();
  inline void set_has_wgain();
  inline void clear_has_wgain();
  inline void set_has_pi0();
  inline void clear_has_pi0();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 src_pop_;
  ::google::protobuf::uint32 dest_pop_;
  float tauzi_;
  float tauzj_;
  float taue_;
  float taup_;
  float maxfq_;
  float bgain_;
  float wgain_;
  float pi0_;
  friend void  protobuf_AddDesc_gsbn_2eproto();
  friend void protobuf_AssignDesc_gsbn_2eproto();
  friend void protobuf_ShutdownFile_gsbn_2eproto();

  void InitAsDefaultInstance();
  static ProjParam* default_instance_;
};
// -------------------------------------------------------------------

class SolverState : public ::google::protobuf::Message {
 public:
  SolverState();
  virtual ~SolverState();

  SolverState(const SolverState& from);

  inline SolverState& operator=(const SolverState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SolverState& default_instance();

  void Swap(SolverState* other);

  // implements Message ----------------------------------------------

  SolverState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SolverState& from);
  void MergeFrom(const SolverState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float timestamp = 1;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  inline float timestamp() const;
  inline void set_timestamp(float value);

  // required float prn = 2;
  inline bool has_prn() const;
  inline void clear_prn();
  static const int kPrnFieldNumber = 2;
  inline float prn() const;
  inline void set_prn(float value);

  // repeated .gsbn.TableState table_state = 3;
  inline int table_state_size() const;
  inline void clear_table_state();
  static const int kTableStateFieldNumber = 3;
  inline const ::gsbn::TableState& table_state(int index) const;
  inline ::gsbn::TableState* mutable_table_state(int index);
  inline ::gsbn::TableState* add_table_state();
  inline const ::google::protobuf::RepeatedPtrField< ::gsbn::TableState >&
      table_state() const;
  inline ::google::protobuf::RepeatedPtrField< ::gsbn::TableState >*
      mutable_table_state();

  // repeated .gsbn.VectorStateI vector_state_i = 4;
  inline int vector_state_i_size() const;
  inline void clear_vector_state_i();
  static const int kVectorStateIFieldNumber = 4;
  inline const ::gsbn::VectorStateI& vector_state_i(int index) const;
  inline ::gsbn::VectorStateI* mutable_vector_state_i(int index);
  inline ::gsbn::VectorStateI* add_vector_state_i();
  inline const ::google::protobuf::RepeatedPtrField< ::gsbn::VectorStateI >&
      vector_state_i() const;
  inline ::google::protobuf::RepeatedPtrField< ::gsbn::VectorStateI >*
      mutable_vector_state_i();

  // repeated .gsbn.VectorStateF vector_state_f = 5;
  inline int vector_state_f_size() const;
  inline void clear_vector_state_f();
  static const int kVectorStateFFieldNumber = 5;
  inline const ::gsbn::VectorStateF& vector_state_f(int index) const;
  inline ::gsbn::VectorStateF* mutable_vector_state_f(int index);
  inline ::gsbn::VectorStateF* add_vector_state_f();
  inline const ::google::protobuf::RepeatedPtrField< ::gsbn::VectorStateF >&
      vector_state_f() const;
  inline ::google::protobuf::RepeatedPtrField< ::gsbn::VectorStateF >*
      mutable_vector_state_f();

  // repeated .gsbn.VectorStateD vector_state_d = 6;
  inline int vector_state_d_size() const;
  inline void clear_vector_state_d();
  static const int kVectorStateDFieldNumber = 6;
  inline const ::gsbn::VectorStateD& vector_state_d(int index) const;
  inline ::gsbn::VectorStateD* mutable_vector_state_d(int index);
  inline ::gsbn::VectorStateD* add_vector_state_d();
  inline const ::google::protobuf::RepeatedPtrField< ::gsbn::VectorStateD >&
      vector_state_d() const;
  inline ::google::protobuf::RepeatedPtrField< ::gsbn::VectorStateD >*
      mutable_vector_state_d();

  // @@protoc_insertion_point(class_scope:gsbn.SolverState)
 private:
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_prn();
  inline void clear_has_prn();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float timestamp_;
  float prn_;
  ::google::protobuf::RepeatedPtrField< ::gsbn::TableState > table_state_;
  ::google::protobuf::RepeatedPtrField< ::gsbn::VectorStateI > vector_state_i_;
  ::google::protobuf::RepeatedPtrField< ::gsbn::VectorStateF > vector_state_f_;
  ::google::protobuf::RepeatedPtrField< ::gsbn::VectorStateD > vector_state_d_;
  friend void  protobuf_AddDesc_gsbn_2eproto();
  friend void protobuf_AssignDesc_gsbn_2eproto();
  friend void protobuf_ShutdownFile_gsbn_2eproto();

  void InitAsDefaultInstance();
  static SolverState* default_instance_;
};
// -------------------------------------------------------------------

class TableState : public ::google::protobuf::Message {
 public:
  TableState();
  virtual ~TableState();

  TableState(const TableState& from);

  inline TableState& operator=(const TableState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TableState& default_instance();

  void Swap(TableState* other);

  // implements Message ----------------------------------------------

  TableState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TableState& from);
  void MergeFrom(const TableState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required bytes desc = 2;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 2;
  inline const ::std::string& desc() const;
  inline void set_desc(const ::std::string& value);
  inline void set_desc(const char* value);
  inline void set_desc(const void* value, size_t size);
  inline ::std::string* mutable_desc();
  inline ::std::string* release_desc();
  inline void set_allocated_desc(::std::string* desc);

  // required bytes data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:gsbn.TableState)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_desc();
  inline void clear_has_desc();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* desc_;
  ::std::string* data_;
  friend void  protobuf_AddDesc_gsbn_2eproto();
  friend void protobuf_AssignDesc_gsbn_2eproto();
  friend void protobuf_ShutdownFile_gsbn_2eproto();

  void InitAsDefaultInstance();
  static TableState* default_instance_;
};
// -------------------------------------------------------------------

class VectorStateI : public ::google::protobuf::Message {
 public:
  VectorStateI();
  virtual ~VectorStateI();

  VectorStateI(const VectorStateI& from);

  inline VectorStateI& operator=(const VectorStateI& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VectorStateI& default_instance();

  void Swap(VectorStateI* other);

  // implements Message ----------------------------------------------

  VectorStateI* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VectorStateI& from);
  void MergeFrom(const VectorStateI& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 ld = 2 [default = 1];
  inline bool has_ld() const;
  inline void clear_ld();
  static const int kLdFieldNumber = 2;
  inline ::google::protobuf::uint32 ld() const;
  inline void set_ld(::google::protobuf::uint32 value);

  // repeated int32 data = 3 [packed = true];
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline ::google::protobuf::int32 data(int index) const;
  inline void set_data(int index, ::google::protobuf::int32 value);
  inline void add_data(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      data() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:gsbn.VectorStateI)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_ld();
  inline void clear_has_ld();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > data_;
  mutable int _data_cached_byte_size_;
  ::google::protobuf::uint32 ld_;
  friend void  protobuf_AddDesc_gsbn_2eproto();
  friend void protobuf_AssignDesc_gsbn_2eproto();
  friend void protobuf_ShutdownFile_gsbn_2eproto();

  void InitAsDefaultInstance();
  static VectorStateI* default_instance_;
};
// -------------------------------------------------------------------

class VectorStateF : public ::google::protobuf::Message {
 public:
  VectorStateF();
  virtual ~VectorStateF();

  VectorStateF(const VectorStateF& from);

  inline VectorStateF& operator=(const VectorStateF& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VectorStateF& default_instance();

  void Swap(VectorStateF* other);

  // implements Message ----------------------------------------------

  VectorStateF* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VectorStateF& from);
  void MergeFrom(const VectorStateF& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 ld = 2 [default = 1];
  inline bool has_ld() const;
  inline void clear_ld();
  static const int kLdFieldNumber = 2;
  inline ::google::protobuf::uint32 ld() const;
  inline void set_ld(::google::protobuf::uint32 value);

  // repeated float data = 3 [packed = true];
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline float data(int index) const;
  inline void set_data(int index, float value);
  inline void add_data(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      data() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:gsbn.VectorStateF)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_ld();
  inline void clear_has_ld();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::RepeatedField< float > data_;
  mutable int _data_cached_byte_size_;
  ::google::protobuf::uint32 ld_;
  friend void  protobuf_AddDesc_gsbn_2eproto();
  friend void protobuf_AssignDesc_gsbn_2eproto();
  friend void protobuf_ShutdownFile_gsbn_2eproto();

  void InitAsDefaultInstance();
  static VectorStateF* default_instance_;
};
// -------------------------------------------------------------------

class VectorStateD : public ::google::protobuf::Message {
 public:
  VectorStateD();
  virtual ~VectorStateD();

  VectorStateD(const VectorStateD& from);

  inline VectorStateD& operator=(const VectorStateD& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VectorStateD& default_instance();

  void Swap(VectorStateD* other);

  // implements Message ----------------------------------------------

  VectorStateD* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VectorStateD& from);
  void MergeFrom(const VectorStateD& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 ld = 2 [default = 1];
  inline bool has_ld() const;
  inline void clear_ld();
  static const int kLdFieldNumber = 2;
  inline ::google::protobuf::uint32 ld() const;
  inline void set_ld(::google::protobuf::uint32 value);

  // repeated double data = 3 [packed = true];
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline double data(int index) const;
  inline void set_data(int index, double value);
  inline void add_data(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      data() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:gsbn.VectorStateD)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_ld();
  inline void clear_has_ld();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::RepeatedField< double > data_;
  mutable int _data_cached_byte_size_;
  ::google::protobuf::uint32 ld_;
  friend void  protobuf_AddDesc_gsbn_2eproto();
  friend void protobuf_AssignDesc_gsbn_2eproto();
  friend void protobuf_ShutdownFile_gsbn_2eproto();

  void InitAsDefaultInstance();
  static VectorStateD* default_instance_;
};
// -------------------------------------------------------------------

class StimRawData : public ::google::protobuf::Message {
 public:
  StimRawData();
  virtual ~StimRawData();

  StimRawData(const StimRawData& from);

  inline StimRawData& operator=(const StimRawData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StimRawData& default_instance();

  void Swap(StimRawData* other);

  // implements Message ----------------------------------------------

  StimRawData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StimRawData& from);
  void MergeFrom(const StimRawData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 data_rows = 1;
  inline bool has_data_rows() const;
  inline void clear_data_rows();
  static const int kDataRowsFieldNumber = 1;
  inline ::google::protobuf::uint32 data_rows() const;
  inline void set_data_rows(::google::protobuf::uint32 value);

  // required uint32 data_cols = 2;
  inline bool has_data_cols() const;
  inline void clear_data_cols();
  static const int kDataColsFieldNumber = 2;
  inline ::google::protobuf::uint32 data_cols() const;
  inline void set_data_cols(::google::protobuf::uint32 value);

  // repeated float data = 3 [packed = true];
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline float data(int index) const;
  inline void set_data(int index, float value);
  inline void add_data(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      data() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_data();

  // required uint32 mask_rows = 4;
  inline bool has_mask_rows() const;
  inline void clear_mask_rows();
  static const int kMaskRowsFieldNumber = 4;
  inline ::google::protobuf::uint32 mask_rows() const;
  inline void set_mask_rows(::google::protobuf::uint32 value);

  // required uint32 mask_cols = 5;
  inline bool has_mask_cols() const;
  inline void clear_mask_cols();
  static const int kMaskColsFieldNumber = 5;
  inline ::google::protobuf::uint32 mask_cols() const;
  inline void set_mask_cols(::google::protobuf::uint32 value);

  // repeated float mask = 6 [packed = true];
  inline int mask_size() const;
  inline void clear_mask();
  static const int kMaskFieldNumber = 6;
  inline float mask(int index) const;
  inline void set_mask(int index, float value);
  inline void add_mask(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      mask() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_mask();

  // @@protoc_insertion_point(class_scope:gsbn.StimRawData)
 private:
  inline void set_has_data_rows();
  inline void clear_has_data_rows();
  inline void set_has_data_cols();
  inline void clear_has_data_cols();
  inline void set_has_mask_rows();
  inline void clear_has_mask_rows();
  inline void set_has_mask_cols();
  inline void clear_has_mask_cols();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 data_rows_;
  ::google::protobuf::uint32 data_cols_;
  ::google::protobuf::RepeatedField< float > data_;
  mutable int _data_cached_byte_size_;
  ::google::protobuf::uint32 mask_rows_;
  ::google::protobuf::uint32 mask_cols_;
  ::google::protobuf::RepeatedField< float > mask_;
  mutable int _mask_cached_byte_size_;
  friend void  protobuf_AddDesc_gsbn_2eproto();
  friend void protobuf_AssignDesc_gsbn_2eproto();
  friend void protobuf_ShutdownFile_gsbn_2eproto();

  void InitAsDefaultInstance();
  static StimRawData* default_instance_;
};
// ===================================================================


// ===================================================================

// SolverParam

// required .gsbn.GenParam gen_param = 1;
inline bool SolverParam::has_gen_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SolverParam::set_has_gen_param() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SolverParam::clear_has_gen_param() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SolverParam::clear_gen_param() {
  if (gen_param_ != NULL) gen_param_->::gsbn::GenParam::Clear();
  clear_has_gen_param();
}
inline const ::gsbn::GenParam& SolverParam::gen_param() const {
  // @@protoc_insertion_point(field_get:gsbn.SolverParam.gen_param)
  return gen_param_ != NULL ? *gen_param_ : *default_instance_->gen_param_;
}
inline ::gsbn::GenParam* SolverParam::mutable_gen_param() {
  set_has_gen_param();
  if (gen_param_ == NULL) gen_param_ = new ::gsbn::GenParam;
  // @@protoc_insertion_point(field_mutable:gsbn.SolverParam.gen_param)
  return gen_param_;
}
inline ::gsbn::GenParam* SolverParam::release_gen_param() {
  clear_has_gen_param();
  ::gsbn::GenParam* temp = gen_param_;
  gen_param_ = NULL;
  return temp;
}
inline void SolverParam::set_allocated_gen_param(::gsbn::GenParam* gen_param) {
  delete gen_param_;
  gen_param_ = gen_param;
  if (gen_param) {
    set_has_gen_param();
  } else {
    clear_has_gen_param();
  }
  // @@protoc_insertion_point(field_set_allocated:gsbn.SolverParam.gen_param)
}

// required .gsbn.NetParam net_param = 2;
inline bool SolverParam::has_net_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SolverParam::set_has_net_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SolverParam::clear_has_net_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SolverParam::clear_net_param() {
  if (net_param_ != NULL) net_param_->::gsbn::NetParam::Clear();
  clear_has_net_param();
}
inline const ::gsbn::NetParam& SolverParam::net_param() const {
  // @@protoc_insertion_point(field_get:gsbn.SolverParam.net_param)
  return net_param_ != NULL ? *net_param_ : *default_instance_->net_param_;
}
inline ::gsbn::NetParam* SolverParam::mutable_net_param() {
  set_has_net_param();
  if (net_param_ == NULL) net_param_ = new ::gsbn::NetParam;
  // @@protoc_insertion_point(field_mutable:gsbn.SolverParam.net_param)
  return net_param_;
}
inline ::gsbn::NetParam* SolverParam::release_net_param() {
  clear_has_net_param();
  ::gsbn::NetParam* temp = net_param_;
  net_param_ = NULL;
  return temp;
}
inline void SolverParam::set_allocated_net_param(::gsbn::NetParam* net_param) {
  delete net_param_;
  net_param_ = net_param;
  if (net_param) {
    set_has_net_param();
  } else {
    clear_has_net_param();
  }
  // @@protoc_insertion_point(field_set_allocated:gsbn.SolverParam.net_param)
}

// -------------------------------------------------------------------

// GenParam

// optional string stim_file = 1;
inline bool GenParam::has_stim_file() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GenParam::set_has_stim_file() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GenParam::clear_has_stim_file() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GenParam::clear_stim_file() {
  if (stim_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stim_file_->clear();
  }
  clear_has_stim_file();
}
inline const ::std::string& GenParam::stim_file() const {
  // @@protoc_insertion_point(field_get:gsbn.GenParam.stim_file)
  return *stim_file_;
}
inline void GenParam::set_stim_file(const ::std::string& value) {
  set_has_stim_file();
  if (stim_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stim_file_ = new ::std::string;
  }
  stim_file_->assign(value);
  // @@protoc_insertion_point(field_set:gsbn.GenParam.stim_file)
}
inline void GenParam::set_stim_file(const char* value) {
  set_has_stim_file();
  if (stim_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stim_file_ = new ::std::string;
  }
  stim_file_->assign(value);
  // @@protoc_insertion_point(field_set_char:gsbn.GenParam.stim_file)
}
inline void GenParam::set_stim_file(const char* value, size_t size) {
  set_has_stim_file();
  if (stim_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stim_file_ = new ::std::string;
  }
  stim_file_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gsbn.GenParam.stim_file)
}
inline ::std::string* GenParam::mutable_stim_file() {
  set_has_stim_file();
  if (stim_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stim_file_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gsbn.GenParam.stim_file)
  return stim_file_;
}
inline ::std::string* GenParam::release_stim_file() {
  clear_has_stim_file();
  if (stim_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = stim_file_;
    stim_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GenParam::set_allocated_stim_file(::std::string* stim_file) {
  if (stim_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete stim_file_;
  }
  if (stim_file) {
    set_has_stim_file();
    stim_file_ = stim_file;
  } else {
    clear_has_stim_file();
    stim_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gsbn.GenParam.stim_file)
}

// required float dt = 2;
inline bool GenParam::has_dt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GenParam::set_has_dt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GenParam::clear_has_dt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GenParam::clear_dt() {
  dt_ = 0;
  clear_has_dt();
}
inline float GenParam::dt() const {
  // @@protoc_insertion_point(field_get:gsbn.GenParam.dt)
  return dt_;
}
inline void GenParam::set_dt(float value) {
  set_has_dt();
  dt_ = value;
  // @@protoc_insertion_point(field_set:gsbn.GenParam.dt)
}

// repeated .gsbn.ModeParam mode_param = 3;
inline int GenParam::mode_param_size() const {
  return mode_param_.size();
}
inline void GenParam::clear_mode_param() {
  mode_param_.Clear();
}
inline const ::gsbn::ModeParam& GenParam::mode_param(int index) const {
  // @@protoc_insertion_point(field_get:gsbn.GenParam.mode_param)
  return mode_param_.Get(index);
}
inline ::gsbn::ModeParam* GenParam::mutable_mode_param(int index) {
  // @@protoc_insertion_point(field_mutable:gsbn.GenParam.mode_param)
  return mode_param_.Mutable(index);
}
inline ::gsbn::ModeParam* GenParam::add_mode_param() {
  // @@protoc_insertion_point(field_add:gsbn.GenParam.mode_param)
  return mode_param_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gsbn::ModeParam >&
GenParam::mode_param() const {
  // @@protoc_insertion_point(field_list:gsbn.GenParam.mode_param)
  return mode_param_;
}
inline ::google::protobuf::RepeatedPtrField< ::gsbn::ModeParam >*
GenParam::mutable_mode_param() {
  // @@protoc_insertion_point(field_mutable_list:gsbn.GenParam.mode_param)
  return &mode_param_;
}

// -------------------------------------------------------------------

// ModeParam

// required float begin_time = 1;
inline bool ModeParam::has_begin_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ModeParam::set_has_begin_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ModeParam::clear_has_begin_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ModeParam::clear_begin_time() {
  begin_time_ = 0;
  clear_has_begin_time();
}
inline float ModeParam::begin_time() const {
  // @@protoc_insertion_point(field_get:gsbn.ModeParam.begin_time)
  return begin_time_;
}
inline void ModeParam::set_begin_time(float value) {
  set_has_begin_time();
  begin_time_ = value;
  // @@protoc_insertion_point(field_set:gsbn.ModeParam.begin_time)
}

// required float end_time = 2;
inline bool ModeParam::has_end_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ModeParam::set_has_end_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ModeParam::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ModeParam::clear_end_time() {
  end_time_ = 0;
  clear_has_end_time();
}
inline float ModeParam::end_time() const {
  // @@protoc_insertion_point(field_get:gsbn.ModeParam.end_time)
  return end_time_;
}
inline void ModeParam::set_end_time(float value) {
  set_has_end_time();
  end_time_ = value;
  // @@protoc_insertion_point(field_set:gsbn.ModeParam.end_time)
}

// optional float prn = 3 [default = 1];
inline bool ModeParam::has_prn() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ModeParam::set_has_prn() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ModeParam::clear_has_prn() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ModeParam::clear_prn() {
  prn_ = 1;
  clear_has_prn();
}
inline float ModeParam::prn() const {
  // @@protoc_insertion_point(field_get:gsbn.ModeParam.prn)
  return prn_;
}
inline void ModeParam::set_prn(float value) {
  set_has_prn();
  prn_ = value;
  // @@protoc_insertion_point(field_set:gsbn.ModeParam.prn)
}

// optional uint32 gain_mask = 4 [default = 0];
inline bool ModeParam::has_gain_mask() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ModeParam::set_has_gain_mask() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ModeParam::clear_has_gain_mask() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ModeParam::clear_gain_mask() {
  gain_mask_ = 0u;
  clear_has_gain_mask();
}
inline ::google::protobuf::uint32 ModeParam::gain_mask() const {
  // @@protoc_insertion_point(field_get:gsbn.ModeParam.gain_mask)
  return gain_mask_;
}
inline void ModeParam::set_gain_mask(::google::protobuf::uint32 value) {
  set_has_gain_mask();
  gain_mask_ = value;
  // @@protoc_insertion_point(field_set:gsbn.ModeParam.gain_mask)
}

// optional uint32 plasticity = 5 [default = 1];
inline bool ModeParam::has_plasticity() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ModeParam::set_has_plasticity() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ModeParam::clear_has_plasticity() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ModeParam::clear_plasticity() {
  plasticity_ = 1u;
  clear_has_plasticity();
}
inline ::google::protobuf::uint32 ModeParam::plasticity() const {
  // @@protoc_insertion_point(field_get:gsbn.ModeParam.plasticity)
  return plasticity_;
}
inline void ModeParam::set_plasticity(::google::protobuf::uint32 value) {
  set_has_plasticity();
  plasticity_ = value;
  // @@protoc_insertion_point(field_set:gsbn.ModeParam.plasticity)
}

// optional uint32 stim_index = 6 [default = 0];
inline bool ModeParam::has_stim_index() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ModeParam::set_has_stim_index() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ModeParam::clear_has_stim_index() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ModeParam::clear_stim_index() {
  stim_index_ = 0u;
  clear_has_stim_index();
}
inline ::google::protobuf::uint32 ModeParam::stim_index() const {
  // @@protoc_insertion_point(field_get:gsbn.ModeParam.stim_index)
  return stim_index_;
}
inline void ModeParam::set_stim_index(::google::protobuf::uint32 value) {
  set_has_stim_index();
  stim_index_ = value;
  // @@protoc_insertion_point(field_set:gsbn.ModeParam.stim_index)
}

// -------------------------------------------------------------------

// NetParam

// repeated .gsbn.PopParam pop_param = 1;
inline int NetParam::pop_param_size() const {
  return pop_param_.size();
}
inline void NetParam::clear_pop_param() {
  pop_param_.Clear();
}
inline const ::gsbn::PopParam& NetParam::pop_param(int index) const {
  // @@protoc_insertion_point(field_get:gsbn.NetParam.pop_param)
  return pop_param_.Get(index);
}
inline ::gsbn::PopParam* NetParam::mutable_pop_param(int index) {
  // @@protoc_insertion_point(field_mutable:gsbn.NetParam.pop_param)
  return pop_param_.Mutable(index);
}
inline ::gsbn::PopParam* NetParam::add_pop_param() {
  // @@protoc_insertion_point(field_add:gsbn.NetParam.pop_param)
  return pop_param_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gsbn::PopParam >&
NetParam::pop_param() const {
  // @@protoc_insertion_point(field_list:gsbn.NetParam.pop_param)
  return pop_param_;
}
inline ::google::protobuf::RepeatedPtrField< ::gsbn::PopParam >*
NetParam::mutable_pop_param() {
  // @@protoc_insertion_point(field_mutable_list:gsbn.NetParam.pop_param)
  return &pop_param_;
}

// repeated .gsbn.ProjParam proj_param = 2;
inline int NetParam::proj_param_size() const {
  return proj_param_.size();
}
inline void NetParam::clear_proj_param() {
  proj_param_.Clear();
}
inline const ::gsbn::ProjParam& NetParam::proj_param(int index) const {
  // @@protoc_insertion_point(field_get:gsbn.NetParam.proj_param)
  return proj_param_.Get(index);
}
inline ::gsbn::ProjParam* NetParam::mutable_proj_param(int index) {
  // @@protoc_insertion_point(field_mutable:gsbn.NetParam.proj_param)
  return proj_param_.Mutable(index);
}
inline ::gsbn::ProjParam* NetParam::add_proj_param() {
  // @@protoc_insertion_point(field_add:gsbn.NetParam.proj_param)
  return proj_param_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gsbn::ProjParam >&
NetParam::proj_param() const {
  // @@protoc_insertion_point(field_list:gsbn.NetParam.proj_param)
  return proj_param_;
}
inline ::google::protobuf::RepeatedPtrField< ::gsbn::ProjParam >*
NetParam::mutable_proj_param() {
  // @@protoc_insertion_point(field_mutable_list:gsbn.NetParam.proj_param)
  return &proj_param_;
}

// repeated string procedure = 3;
inline int NetParam::procedure_size() const {
  return procedure_.size();
}
inline void NetParam::clear_procedure() {
  procedure_.Clear();
}
inline const ::std::string& NetParam::procedure(int index) const {
  // @@protoc_insertion_point(field_get:gsbn.NetParam.procedure)
  return procedure_.Get(index);
}
inline ::std::string* NetParam::mutable_procedure(int index) {
  // @@protoc_insertion_point(field_mutable:gsbn.NetParam.procedure)
  return procedure_.Mutable(index);
}
inline void NetParam::set_procedure(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gsbn.NetParam.procedure)
  procedure_.Mutable(index)->assign(value);
}
inline void NetParam::set_procedure(int index, const char* value) {
  procedure_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gsbn.NetParam.procedure)
}
inline void NetParam::set_procedure(int index, const char* value, size_t size) {
  procedure_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gsbn.NetParam.procedure)
}
inline ::std::string* NetParam::add_procedure() {
  return procedure_.Add();
}
inline void NetParam::add_procedure(const ::std::string& value) {
  procedure_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gsbn.NetParam.procedure)
}
inline void NetParam::add_procedure(const char* value) {
  procedure_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gsbn.NetParam.procedure)
}
inline void NetParam::add_procedure(const char* value, size_t size) {
  procedure_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gsbn.NetParam.procedure)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetParam::procedure() const {
  // @@protoc_insertion_point(field_list:gsbn.NetParam.procedure)
  return procedure_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NetParam::mutable_procedure() {
  // @@protoc_insertion_point(field_mutable_list:gsbn.NetParam.procedure)
  return &procedure_;
}

// -------------------------------------------------------------------

// PopParam

// required uint32 pop_num = 1;
inline bool PopParam::has_pop_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PopParam::set_has_pop_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PopParam::clear_has_pop_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PopParam::clear_pop_num() {
  pop_num_ = 0u;
  clear_has_pop_num();
}
inline ::google::protobuf::uint32 PopParam::pop_num() const {
  // @@protoc_insertion_point(field_get:gsbn.PopParam.pop_num)
  return pop_num_;
}
inline void PopParam::set_pop_num(::google::protobuf::uint32 value) {
  set_has_pop_num();
  pop_num_ = value;
  // @@protoc_insertion_point(field_set:gsbn.PopParam.pop_num)
}

// required uint32 hcu_num = 2;
inline bool PopParam::has_hcu_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PopParam::set_has_hcu_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PopParam::clear_has_hcu_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PopParam::clear_hcu_num() {
  hcu_num_ = 0u;
  clear_has_hcu_num();
}
inline ::google::protobuf::uint32 PopParam::hcu_num() const {
  // @@protoc_insertion_point(field_get:gsbn.PopParam.hcu_num)
  return hcu_num_;
}
inline void PopParam::set_hcu_num(::google::protobuf::uint32 value) {
  set_has_hcu_num();
  hcu_num_ = value;
  // @@protoc_insertion_point(field_set:gsbn.PopParam.hcu_num)
}

// required uint32 mcu_num = 3;
inline bool PopParam::has_mcu_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PopParam::set_has_mcu_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PopParam::clear_has_mcu_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PopParam::clear_mcu_num() {
  mcu_num_ = 0u;
  clear_has_mcu_num();
}
inline ::google::protobuf::uint32 PopParam::mcu_num() const {
  // @@protoc_insertion_point(field_get:gsbn.PopParam.mcu_num)
  return mcu_num_;
}
inline void PopParam::set_mcu_num(::google::protobuf::uint32 value) {
  set_has_mcu_num();
  mcu_num_ = value;
  // @@protoc_insertion_point(field_set:gsbn.PopParam.mcu_num)
}

// required uint32 slot_num = 4;
inline bool PopParam::has_slot_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PopParam::set_has_slot_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PopParam::clear_has_slot_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PopParam::clear_slot_num() {
  slot_num_ = 0u;
  clear_has_slot_num();
}
inline ::google::protobuf::uint32 PopParam::slot_num() const {
  // @@protoc_insertion_point(field_get:gsbn.PopParam.slot_num)
  return slot_num_;
}
inline void PopParam::set_slot_num(::google::protobuf::uint32 value) {
  set_has_slot_num();
  slot_num_ = value;
  // @@protoc_insertion_point(field_set:gsbn.PopParam.slot_num)
}

// required uint32 fanout_num = 5;
inline bool PopParam::has_fanout_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PopParam::set_has_fanout_num() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PopParam::clear_has_fanout_num() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PopParam::clear_fanout_num() {
  fanout_num_ = 0u;
  clear_has_fanout_num();
}
inline ::google::protobuf::uint32 PopParam::fanout_num() const {
  // @@protoc_insertion_point(field_get:gsbn.PopParam.fanout_num)
  return fanout_num_;
}
inline void PopParam::set_fanout_num(::google::protobuf::uint32 value) {
  set_has_fanout_num();
  fanout_num_ = value;
  // @@protoc_insertion_point(field_set:gsbn.PopParam.fanout_num)
}

// optional float taum = 6 [default = 0.01];
inline bool PopParam::has_taum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PopParam::set_has_taum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PopParam::clear_has_taum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PopParam::clear_taum() {
  taum_ = 0.01f;
  clear_has_taum();
}
inline float PopParam::taum() const {
  // @@protoc_insertion_point(field_get:gsbn.PopParam.taum)
  return taum_;
}
inline void PopParam::set_taum(float value) {
  set_has_taum();
  taum_ = value;
  // @@protoc_insertion_point(field_set:gsbn.PopParam.taum)
}

// optional float wtagain = 7 [default = 4];
inline bool PopParam::has_wtagain() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PopParam::set_has_wtagain() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PopParam::clear_has_wtagain() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PopParam::clear_wtagain() {
  wtagain_ = 4;
  clear_has_wtagain();
}
inline float PopParam::wtagain() const {
  // @@protoc_insertion_point(field_get:gsbn.PopParam.wtagain)
  return wtagain_;
}
inline void PopParam::set_wtagain(float value) {
  set_has_wtagain();
  wtagain_ = value;
  // @@protoc_insertion_point(field_set:gsbn.PopParam.wtagain)
}

// optional float maxfq = 8 [default = 100];
inline bool PopParam::has_maxfq() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PopParam::set_has_maxfq() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PopParam::clear_has_maxfq() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PopParam::clear_maxfq() {
  maxfq_ = 100;
  clear_has_maxfq();
}
inline float PopParam::maxfq() const {
  // @@protoc_insertion_point(field_get:gsbn.PopParam.maxfq)
  return maxfq_;
}
inline void PopParam::set_maxfq(float value) {
  set_has_maxfq();
  maxfq_ = value;
  // @@protoc_insertion_point(field_set:gsbn.PopParam.maxfq)
}

// optional float igain = 9 [default = 1];
inline bool PopParam::has_igain() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PopParam::set_has_igain() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PopParam::clear_has_igain() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PopParam::clear_igain() {
  igain_ = 1;
  clear_has_igain();
}
inline float PopParam::igain() const {
  // @@protoc_insertion_point(field_get:gsbn.PopParam.igain)
  return igain_;
}
inline void PopParam::set_igain(float value) {
  set_has_igain();
  igain_ = value;
  // @@protoc_insertion_point(field_set:gsbn.PopParam.igain)
}

// optional float wgain = 10 [default = 1];
inline bool PopParam::has_wgain() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PopParam::set_has_wgain() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PopParam::clear_has_wgain() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PopParam::clear_wgain() {
  wgain_ = 1;
  clear_has_wgain();
}
inline float PopParam::wgain() const {
  // @@protoc_insertion_point(field_get:gsbn.PopParam.wgain)
  return wgain_;
}
inline void PopParam::set_wgain(float value) {
  set_has_wgain();
  wgain_ = value;
  // @@protoc_insertion_point(field_set:gsbn.PopParam.wgain)
}

// optional float lgbias = 11 [default = 0];
inline bool PopParam::has_lgbias() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PopParam::set_has_lgbias() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PopParam::clear_has_lgbias() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PopParam::clear_lgbias() {
  lgbias_ = 0;
  clear_has_lgbias();
}
inline float PopParam::lgbias() const {
  // @@protoc_insertion_point(field_get:gsbn.PopParam.lgbias)
  return lgbias_;
}
inline void PopParam::set_lgbias(float value) {
  set_has_lgbias();
  lgbias_ = value;
  // @@protoc_insertion_point(field_set:gsbn.PopParam.lgbias)
}

// optional float snoise = 12 [default = 0];
inline bool PopParam::has_snoise() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PopParam::set_has_snoise() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PopParam::clear_has_snoise() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PopParam::clear_snoise() {
  snoise_ = 0;
  clear_has_snoise();
}
inline float PopParam::snoise() const {
  // @@protoc_insertion_point(field_get:gsbn.PopParam.snoise)
  return snoise_;
}
inline void PopParam::set_snoise(float value) {
  set_has_snoise();
  snoise_ = value;
  // @@protoc_insertion_point(field_set:gsbn.PopParam.snoise)
}

// -------------------------------------------------------------------

// ProjParam

// required uint32 src_pop = 1;
inline bool ProjParam::has_src_pop() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProjParam::set_has_src_pop() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProjParam::clear_has_src_pop() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProjParam::clear_src_pop() {
  src_pop_ = 0u;
  clear_has_src_pop();
}
inline ::google::protobuf::uint32 ProjParam::src_pop() const {
  // @@protoc_insertion_point(field_get:gsbn.ProjParam.src_pop)
  return src_pop_;
}
inline void ProjParam::set_src_pop(::google::protobuf::uint32 value) {
  set_has_src_pop();
  src_pop_ = value;
  // @@protoc_insertion_point(field_set:gsbn.ProjParam.src_pop)
}

// required uint32 dest_pop = 2;
inline bool ProjParam::has_dest_pop() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProjParam::set_has_dest_pop() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProjParam::clear_has_dest_pop() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProjParam::clear_dest_pop() {
  dest_pop_ = 0u;
  clear_has_dest_pop();
}
inline ::google::protobuf::uint32 ProjParam::dest_pop() const {
  // @@protoc_insertion_point(field_get:gsbn.ProjParam.dest_pop)
  return dest_pop_;
}
inline void ProjParam::set_dest_pop(::google::protobuf::uint32 value) {
  set_has_dest_pop();
  dest_pop_ = value;
  // @@protoc_insertion_point(field_set:gsbn.ProjParam.dest_pop)
}

// required float tauzi = 3;
inline bool ProjParam::has_tauzi() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProjParam::set_has_tauzi() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProjParam::clear_has_tauzi() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProjParam::clear_tauzi() {
  tauzi_ = 0;
  clear_has_tauzi();
}
inline float ProjParam::tauzi() const {
  // @@protoc_insertion_point(field_get:gsbn.ProjParam.tauzi)
  return tauzi_;
}
inline void ProjParam::set_tauzi(float value) {
  set_has_tauzi();
  tauzi_ = value;
  // @@protoc_insertion_point(field_set:gsbn.ProjParam.tauzi)
}

// required float tauzj = 4;
inline bool ProjParam::has_tauzj() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProjParam::set_has_tauzj() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProjParam::clear_has_tauzj() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProjParam::clear_tauzj() {
  tauzj_ = 0;
  clear_has_tauzj();
}
inline float ProjParam::tauzj() const {
  // @@protoc_insertion_point(field_get:gsbn.ProjParam.tauzj)
  return tauzj_;
}
inline void ProjParam::set_tauzj(float value) {
  set_has_tauzj();
  tauzj_ = value;
  // @@protoc_insertion_point(field_set:gsbn.ProjParam.tauzj)
}

// required float taue = 5;
inline bool ProjParam::has_taue() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProjParam::set_has_taue() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProjParam::clear_has_taue() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProjParam::clear_taue() {
  taue_ = 0;
  clear_has_taue();
}
inline float ProjParam::taue() const {
  // @@protoc_insertion_point(field_get:gsbn.ProjParam.taue)
  return taue_;
}
inline void ProjParam::set_taue(float value) {
  set_has_taue();
  taue_ = value;
  // @@protoc_insertion_point(field_set:gsbn.ProjParam.taue)
}

// required float taup = 6;
inline bool ProjParam::has_taup() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProjParam::set_has_taup() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProjParam::clear_has_taup() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProjParam::clear_taup() {
  taup_ = 0;
  clear_has_taup();
}
inline float ProjParam::taup() const {
  // @@protoc_insertion_point(field_get:gsbn.ProjParam.taup)
  return taup_;
}
inline void ProjParam::set_taup(float value) {
  set_has_taup();
  taup_ = value;
  // @@protoc_insertion_point(field_set:gsbn.ProjParam.taup)
}

// optional float maxfq = 7 [default = 100];
inline bool ProjParam::has_maxfq() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProjParam::set_has_maxfq() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProjParam::clear_has_maxfq() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProjParam::clear_maxfq() {
  maxfq_ = 100;
  clear_has_maxfq();
}
inline float ProjParam::maxfq() const {
  // @@protoc_insertion_point(field_get:gsbn.ProjParam.maxfq)
  return maxfq_;
}
inline void ProjParam::set_maxfq(float value) {
  set_has_maxfq();
  maxfq_ = value;
  // @@protoc_insertion_point(field_set:gsbn.ProjParam.maxfq)
}

// optional float bgain = 8 [default = 0];
inline bool ProjParam::has_bgain() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProjParam::set_has_bgain() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProjParam::clear_has_bgain() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProjParam::clear_bgain() {
  bgain_ = 0;
  clear_has_bgain();
}
inline float ProjParam::bgain() const {
  // @@protoc_insertion_point(field_get:gsbn.ProjParam.bgain)
  return bgain_;
}
inline void ProjParam::set_bgain(float value) {
  set_has_bgain();
  bgain_ = value;
  // @@protoc_insertion_point(field_set:gsbn.ProjParam.bgain)
}

// optional float wgain = 9 [default = 0];
inline bool ProjParam::has_wgain() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ProjParam::set_has_wgain() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ProjParam::clear_has_wgain() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ProjParam::clear_wgain() {
  wgain_ = 0;
  clear_has_wgain();
}
inline float ProjParam::wgain() const {
  // @@protoc_insertion_point(field_get:gsbn.ProjParam.wgain)
  return wgain_;
}
inline void ProjParam::set_wgain(float value) {
  set_has_wgain();
  wgain_ = value;
  // @@protoc_insertion_point(field_set:gsbn.ProjParam.wgain)
}

// optional float pi0 = 10 [default = 0];
inline bool ProjParam::has_pi0() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ProjParam::set_has_pi0() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ProjParam::clear_has_pi0() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ProjParam::clear_pi0() {
  pi0_ = 0;
  clear_has_pi0();
}
inline float ProjParam::pi0() const {
  // @@protoc_insertion_point(field_get:gsbn.ProjParam.pi0)
  return pi0_;
}
inline void ProjParam::set_pi0(float value) {
  set_has_pi0();
  pi0_ = value;
  // @@protoc_insertion_point(field_set:gsbn.ProjParam.pi0)
}

// -------------------------------------------------------------------

// SolverState

// required float timestamp = 1;
inline bool SolverState::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SolverState::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SolverState::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SolverState::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline float SolverState::timestamp() const {
  // @@protoc_insertion_point(field_get:gsbn.SolverState.timestamp)
  return timestamp_;
}
inline void SolverState::set_timestamp(float value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:gsbn.SolverState.timestamp)
}

// required float prn = 2;
inline bool SolverState::has_prn() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SolverState::set_has_prn() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SolverState::clear_has_prn() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SolverState::clear_prn() {
  prn_ = 0;
  clear_has_prn();
}
inline float SolverState::prn() const {
  // @@protoc_insertion_point(field_get:gsbn.SolverState.prn)
  return prn_;
}
inline void SolverState::set_prn(float value) {
  set_has_prn();
  prn_ = value;
  // @@protoc_insertion_point(field_set:gsbn.SolverState.prn)
}

// repeated .gsbn.TableState table_state = 3;
inline int SolverState::table_state_size() const {
  return table_state_.size();
}
inline void SolverState::clear_table_state() {
  table_state_.Clear();
}
inline const ::gsbn::TableState& SolverState::table_state(int index) const {
  // @@protoc_insertion_point(field_get:gsbn.SolverState.table_state)
  return table_state_.Get(index);
}
inline ::gsbn::TableState* SolverState::mutable_table_state(int index) {
  // @@protoc_insertion_point(field_mutable:gsbn.SolverState.table_state)
  return table_state_.Mutable(index);
}
inline ::gsbn::TableState* SolverState::add_table_state() {
  // @@protoc_insertion_point(field_add:gsbn.SolverState.table_state)
  return table_state_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gsbn::TableState >&
SolverState::table_state() const {
  // @@protoc_insertion_point(field_list:gsbn.SolverState.table_state)
  return table_state_;
}
inline ::google::protobuf::RepeatedPtrField< ::gsbn::TableState >*
SolverState::mutable_table_state() {
  // @@protoc_insertion_point(field_mutable_list:gsbn.SolverState.table_state)
  return &table_state_;
}

// repeated .gsbn.VectorStateI vector_state_i = 4;
inline int SolverState::vector_state_i_size() const {
  return vector_state_i_.size();
}
inline void SolverState::clear_vector_state_i() {
  vector_state_i_.Clear();
}
inline const ::gsbn::VectorStateI& SolverState::vector_state_i(int index) const {
  // @@protoc_insertion_point(field_get:gsbn.SolverState.vector_state_i)
  return vector_state_i_.Get(index);
}
inline ::gsbn::VectorStateI* SolverState::mutable_vector_state_i(int index) {
  // @@protoc_insertion_point(field_mutable:gsbn.SolverState.vector_state_i)
  return vector_state_i_.Mutable(index);
}
inline ::gsbn::VectorStateI* SolverState::add_vector_state_i() {
  // @@protoc_insertion_point(field_add:gsbn.SolverState.vector_state_i)
  return vector_state_i_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gsbn::VectorStateI >&
SolverState::vector_state_i() const {
  // @@protoc_insertion_point(field_list:gsbn.SolverState.vector_state_i)
  return vector_state_i_;
}
inline ::google::protobuf::RepeatedPtrField< ::gsbn::VectorStateI >*
SolverState::mutable_vector_state_i() {
  // @@protoc_insertion_point(field_mutable_list:gsbn.SolverState.vector_state_i)
  return &vector_state_i_;
}

// repeated .gsbn.VectorStateF vector_state_f = 5;
inline int SolverState::vector_state_f_size() const {
  return vector_state_f_.size();
}
inline void SolverState::clear_vector_state_f() {
  vector_state_f_.Clear();
}
inline const ::gsbn::VectorStateF& SolverState::vector_state_f(int index) const {
  // @@protoc_insertion_point(field_get:gsbn.SolverState.vector_state_f)
  return vector_state_f_.Get(index);
}
inline ::gsbn::VectorStateF* SolverState::mutable_vector_state_f(int index) {
  // @@protoc_insertion_point(field_mutable:gsbn.SolverState.vector_state_f)
  return vector_state_f_.Mutable(index);
}
inline ::gsbn::VectorStateF* SolverState::add_vector_state_f() {
  // @@protoc_insertion_point(field_add:gsbn.SolverState.vector_state_f)
  return vector_state_f_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gsbn::VectorStateF >&
SolverState::vector_state_f() const {
  // @@protoc_insertion_point(field_list:gsbn.SolverState.vector_state_f)
  return vector_state_f_;
}
inline ::google::protobuf::RepeatedPtrField< ::gsbn::VectorStateF >*
SolverState::mutable_vector_state_f() {
  // @@protoc_insertion_point(field_mutable_list:gsbn.SolverState.vector_state_f)
  return &vector_state_f_;
}

// repeated .gsbn.VectorStateD vector_state_d = 6;
inline int SolverState::vector_state_d_size() const {
  return vector_state_d_.size();
}
inline void SolverState::clear_vector_state_d() {
  vector_state_d_.Clear();
}
inline const ::gsbn::VectorStateD& SolverState::vector_state_d(int index) const {
  // @@protoc_insertion_point(field_get:gsbn.SolverState.vector_state_d)
  return vector_state_d_.Get(index);
}
inline ::gsbn::VectorStateD* SolverState::mutable_vector_state_d(int index) {
  // @@protoc_insertion_point(field_mutable:gsbn.SolverState.vector_state_d)
  return vector_state_d_.Mutable(index);
}
inline ::gsbn::VectorStateD* SolverState::add_vector_state_d() {
  // @@protoc_insertion_point(field_add:gsbn.SolverState.vector_state_d)
  return vector_state_d_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gsbn::VectorStateD >&
SolverState::vector_state_d() const {
  // @@protoc_insertion_point(field_list:gsbn.SolverState.vector_state_d)
  return vector_state_d_;
}
inline ::google::protobuf::RepeatedPtrField< ::gsbn::VectorStateD >*
SolverState::mutable_vector_state_d() {
  // @@protoc_insertion_point(field_mutable_list:gsbn.SolverState.vector_state_d)
  return &vector_state_d_;
}

// -------------------------------------------------------------------

// TableState

// required string name = 1;
inline bool TableState::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TableState::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TableState::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TableState::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& TableState::name() const {
  // @@protoc_insertion_point(field_get:gsbn.TableState.name)
  return *name_;
}
inline void TableState::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:gsbn.TableState.name)
}
inline void TableState::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:gsbn.TableState.name)
}
inline void TableState::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gsbn.TableState.name)
}
inline ::std::string* TableState::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gsbn.TableState.name)
  return name_;
}
inline ::std::string* TableState::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TableState::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gsbn.TableState.name)
}

// required bytes desc = 2;
inline bool TableState::has_desc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TableState::set_has_desc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TableState::clear_has_desc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TableState::clear_desc() {
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_->clear();
  }
  clear_has_desc();
}
inline const ::std::string& TableState::desc() const {
  // @@protoc_insertion_point(field_get:gsbn.TableState.desc)
  return *desc_;
}
inline void TableState::set_desc(const ::std::string& value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
  // @@protoc_insertion_point(field_set:gsbn.TableState.desc)
}
inline void TableState::set_desc(const char* value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
  // @@protoc_insertion_point(field_set_char:gsbn.TableState.desc)
}
inline void TableState::set_desc(const void* value, size_t size) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_ = new ::std::string;
  }
  desc_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gsbn.TableState.desc)
}
inline ::std::string* TableState::mutable_desc() {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    desc_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gsbn.TableState.desc)
  return desc_;
}
inline ::std::string* TableState::release_desc() {
  clear_has_desc();
  if (desc_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = desc_;
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TableState::set_allocated_desc(::std::string* desc) {
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete desc_;
  }
  if (desc) {
    set_has_desc();
    desc_ = desc;
  } else {
    clear_has_desc();
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gsbn.TableState.desc)
}

// required bytes data = 3;
inline bool TableState::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TableState::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TableState::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TableState::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& TableState::data() const {
  // @@protoc_insertion_point(field_get:gsbn.TableState.data)
  return *data_;
}
inline void TableState::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:gsbn.TableState.data)
}
inline void TableState::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:gsbn.TableState.data)
}
inline void TableState::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gsbn.TableState.data)
}
inline ::std::string* TableState::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gsbn.TableState.data)
  return data_;
}
inline ::std::string* TableState::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TableState::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gsbn.TableState.data)
}

// -------------------------------------------------------------------

// VectorStateI

// required string name = 1;
inline bool VectorStateI::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VectorStateI::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VectorStateI::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VectorStateI::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& VectorStateI::name() const {
  // @@protoc_insertion_point(field_get:gsbn.VectorStateI.name)
  return *name_;
}
inline void VectorStateI::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:gsbn.VectorStateI.name)
}
inline void VectorStateI::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:gsbn.VectorStateI.name)
}
inline void VectorStateI::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gsbn.VectorStateI.name)
}
inline ::std::string* VectorStateI::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gsbn.VectorStateI.name)
  return name_;
}
inline ::std::string* VectorStateI::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void VectorStateI::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gsbn.VectorStateI.name)
}

// optional uint32 ld = 2 [default = 1];
inline bool VectorStateI::has_ld() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VectorStateI::set_has_ld() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VectorStateI::clear_has_ld() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VectorStateI::clear_ld() {
  ld_ = 1u;
  clear_has_ld();
}
inline ::google::protobuf::uint32 VectorStateI::ld() const {
  // @@protoc_insertion_point(field_get:gsbn.VectorStateI.ld)
  return ld_;
}
inline void VectorStateI::set_ld(::google::protobuf::uint32 value) {
  set_has_ld();
  ld_ = value;
  // @@protoc_insertion_point(field_set:gsbn.VectorStateI.ld)
}

// repeated int32 data = 3 [packed = true];
inline int VectorStateI::data_size() const {
  return data_.size();
}
inline void VectorStateI::clear_data() {
  data_.Clear();
}
inline ::google::protobuf::int32 VectorStateI::data(int index) const {
  // @@protoc_insertion_point(field_get:gsbn.VectorStateI.data)
  return data_.Get(index);
}
inline void VectorStateI::set_data(int index, ::google::protobuf::int32 value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:gsbn.VectorStateI.data)
}
inline void VectorStateI::add_data(::google::protobuf::int32 value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:gsbn.VectorStateI.data)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
VectorStateI::data() const {
  // @@protoc_insertion_point(field_list:gsbn.VectorStateI.data)
  return data_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
VectorStateI::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:gsbn.VectorStateI.data)
  return &data_;
}

// -------------------------------------------------------------------

// VectorStateF

// required string name = 1;
inline bool VectorStateF::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VectorStateF::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VectorStateF::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VectorStateF::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& VectorStateF::name() const {
  // @@protoc_insertion_point(field_get:gsbn.VectorStateF.name)
  return *name_;
}
inline void VectorStateF::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:gsbn.VectorStateF.name)
}
inline void VectorStateF::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:gsbn.VectorStateF.name)
}
inline void VectorStateF::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gsbn.VectorStateF.name)
}
inline ::std::string* VectorStateF::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gsbn.VectorStateF.name)
  return name_;
}
inline ::std::string* VectorStateF::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void VectorStateF::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gsbn.VectorStateF.name)
}

// optional uint32 ld = 2 [default = 1];
inline bool VectorStateF::has_ld() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VectorStateF::set_has_ld() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VectorStateF::clear_has_ld() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VectorStateF::clear_ld() {
  ld_ = 1u;
  clear_has_ld();
}
inline ::google::protobuf::uint32 VectorStateF::ld() const {
  // @@protoc_insertion_point(field_get:gsbn.VectorStateF.ld)
  return ld_;
}
inline void VectorStateF::set_ld(::google::protobuf::uint32 value) {
  set_has_ld();
  ld_ = value;
  // @@protoc_insertion_point(field_set:gsbn.VectorStateF.ld)
}

// repeated float data = 3 [packed = true];
inline int VectorStateF::data_size() const {
  return data_.size();
}
inline void VectorStateF::clear_data() {
  data_.Clear();
}
inline float VectorStateF::data(int index) const {
  // @@protoc_insertion_point(field_get:gsbn.VectorStateF.data)
  return data_.Get(index);
}
inline void VectorStateF::set_data(int index, float value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:gsbn.VectorStateF.data)
}
inline void VectorStateF::add_data(float value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:gsbn.VectorStateF.data)
}
inline const ::google::protobuf::RepeatedField< float >&
VectorStateF::data() const {
  // @@protoc_insertion_point(field_list:gsbn.VectorStateF.data)
  return data_;
}
inline ::google::protobuf::RepeatedField< float >*
VectorStateF::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:gsbn.VectorStateF.data)
  return &data_;
}

// -------------------------------------------------------------------

// VectorStateD

// required string name = 1;
inline bool VectorStateD::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VectorStateD::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VectorStateD::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VectorStateD::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& VectorStateD::name() const {
  // @@protoc_insertion_point(field_get:gsbn.VectorStateD.name)
  return *name_;
}
inline void VectorStateD::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:gsbn.VectorStateD.name)
}
inline void VectorStateD::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:gsbn.VectorStateD.name)
}
inline void VectorStateD::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gsbn.VectorStateD.name)
}
inline ::std::string* VectorStateD::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gsbn.VectorStateD.name)
  return name_;
}
inline ::std::string* VectorStateD::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void VectorStateD::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gsbn.VectorStateD.name)
}

// optional uint32 ld = 2 [default = 1];
inline bool VectorStateD::has_ld() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VectorStateD::set_has_ld() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VectorStateD::clear_has_ld() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VectorStateD::clear_ld() {
  ld_ = 1u;
  clear_has_ld();
}
inline ::google::protobuf::uint32 VectorStateD::ld() const {
  // @@protoc_insertion_point(field_get:gsbn.VectorStateD.ld)
  return ld_;
}
inline void VectorStateD::set_ld(::google::protobuf::uint32 value) {
  set_has_ld();
  ld_ = value;
  // @@protoc_insertion_point(field_set:gsbn.VectorStateD.ld)
}

// repeated double data = 3 [packed = true];
inline int VectorStateD::data_size() const {
  return data_.size();
}
inline void VectorStateD::clear_data() {
  data_.Clear();
}
inline double VectorStateD::data(int index) const {
  // @@protoc_insertion_point(field_get:gsbn.VectorStateD.data)
  return data_.Get(index);
}
inline void VectorStateD::set_data(int index, double value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:gsbn.VectorStateD.data)
}
inline void VectorStateD::add_data(double value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:gsbn.VectorStateD.data)
}
inline const ::google::protobuf::RepeatedField< double >&
VectorStateD::data() const {
  // @@protoc_insertion_point(field_list:gsbn.VectorStateD.data)
  return data_;
}
inline ::google::protobuf::RepeatedField< double >*
VectorStateD::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:gsbn.VectorStateD.data)
  return &data_;
}

// -------------------------------------------------------------------

// StimRawData

// required uint32 data_rows = 1;
inline bool StimRawData::has_data_rows() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StimRawData::set_has_data_rows() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StimRawData::clear_has_data_rows() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StimRawData::clear_data_rows() {
  data_rows_ = 0u;
  clear_has_data_rows();
}
inline ::google::protobuf::uint32 StimRawData::data_rows() const {
  // @@protoc_insertion_point(field_get:gsbn.StimRawData.data_rows)
  return data_rows_;
}
inline void StimRawData::set_data_rows(::google::protobuf::uint32 value) {
  set_has_data_rows();
  data_rows_ = value;
  // @@protoc_insertion_point(field_set:gsbn.StimRawData.data_rows)
}

// required uint32 data_cols = 2;
inline bool StimRawData::has_data_cols() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StimRawData::set_has_data_cols() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StimRawData::clear_has_data_cols() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StimRawData::clear_data_cols() {
  data_cols_ = 0u;
  clear_has_data_cols();
}
inline ::google::protobuf::uint32 StimRawData::data_cols() const {
  // @@protoc_insertion_point(field_get:gsbn.StimRawData.data_cols)
  return data_cols_;
}
inline void StimRawData::set_data_cols(::google::protobuf::uint32 value) {
  set_has_data_cols();
  data_cols_ = value;
  // @@protoc_insertion_point(field_set:gsbn.StimRawData.data_cols)
}

// repeated float data = 3 [packed = true];
inline int StimRawData::data_size() const {
  return data_.size();
}
inline void StimRawData::clear_data() {
  data_.Clear();
}
inline float StimRawData::data(int index) const {
  // @@protoc_insertion_point(field_get:gsbn.StimRawData.data)
  return data_.Get(index);
}
inline void StimRawData::set_data(int index, float value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:gsbn.StimRawData.data)
}
inline void StimRawData::add_data(float value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:gsbn.StimRawData.data)
}
inline const ::google::protobuf::RepeatedField< float >&
StimRawData::data() const {
  // @@protoc_insertion_point(field_list:gsbn.StimRawData.data)
  return data_;
}
inline ::google::protobuf::RepeatedField< float >*
StimRawData::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:gsbn.StimRawData.data)
  return &data_;
}

// required uint32 mask_rows = 4;
inline bool StimRawData::has_mask_rows() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StimRawData::set_has_mask_rows() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StimRawData::clear_has_mask_rows() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StimRawData::clear_mask_rows() {
  mask_rows_ = 0u;
  clear_has_mask_rows();
}
inline ::google::protobuf::uint32 StimRawData::mask_rows() const {
  // @@protoc_insertion_point(field_get:gsbn.StimRawData.mask_rows)
  return mask_rows_;
}
inline void StimRawData::set_mask_rows(::google::protobuf::uint32 value) {
  set_has_mask_rows();
  mask_rows_ = value;
  // @@protoc_insertion_point(field_set:gsbn.StimRawData.mask_rows)
}

// required uint32 mask_cols = 5;
inline bool StimRawData::has_mask_cols() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StimRawData::set_has_mask_cols() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StimRawData::clear_has_mask_cols() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StimRawData::clear_mask_cols() {
  mask_cols_ = 0u;
  clear_has_mask_cols();
}
inline ::google::protobuf::uint32 StimRawData::mask_cols() const {
  // @@protoc_insertion_point(field_get:gsbn.StimRawData.mask_cols)
  return mask_cols_;
}
inline void StimRawData::set_mask_cols(::google::protobuf::uint32 value) {
  set_has_mask_cols();
  mask_cols_ = value;
  // @@protoc_insertion_point(field_set:gsbn.StimRawData.mask_cols)
}

// repeated float mask = 6 [packed = true];
inline int StimRawData::mask_size() const {
  return mask_.size();
}
inline void StimRawData::clear_mask() {
  mask_.Clear();
}
inline float StimRawData::mask(int index) const {
  // @@protoc_insertion_point(field_get:gsbn.StimRawData.mask)
  return mask_.Get(index);
}
inline void StimRawData::set_mask(int index, float value) {
  mask_.Set(index, value);
  // @@protoc_insertion_point(field_set:gsbn.StimRawData.mask)
}
inline void StimRawData::add_mask(float value) {
  mask_.Add(value);
  // @@protoc_insertion_point(field_add:gsbn.StimRawData.mask)
}
inline const ::google::protobuf::RepeatedField< float >&
StimRawData::mask() const {
  // @@protoc_insertion_point(field_list:gsbn.StimRawData.mask)
  return mask_;
}
inline ::google::protobuf::RepeatedField< float >*
StimRawData::mutable_mask() {
  // @@protoc_insertion_point(field_mutable_list:gsbn.StimRawData.mask)
  return &mask_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gsbn

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_gsbn_2eproto__INCLUDED
