// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gsbn.proto

#ifndef PROTOBUF_gsbn_2eproto__INCLUDED
#define PROTOBUF_gsbn_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace gsbn {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_gsbn_2eproto();
void protobuf_AssignDesc_gsbn_2eproto();
void protobuf_ShutdownFile_gsbn_2eproto();

class SolverParam;
class GenParam;
class ModeParam;
class NetParam;
class PopParam;
class ProjParam;
class RecParam;
class ProcParam;
class ProcParamArgI;
class ProcParamArgF;
class ProcParamArgS;
class SolverState;
class TableState;
class VectorStateI8;
class VectorStateI16;
class VectorStateI32;
class VectorStateI64;
class VectorStateF16;
class VectorStateF32;
class VectorStateF64;
class StimRawData;

// ===================================================================

class SolverParam : public ::google::protobuf::Message {
 public:
  SolverParam();
  virtual ~SolverParam();

  SolverParam(const SolverParam& from);

  inline SolverParam& operator=(const SolverParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SolverParam& default_instance();

  void Swap(SolverParam* other);

  // implements Message ----------------------------------------------

  SolverParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SolverParam& from);
  void MergeFrom(const SolverParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .gsbn.GenParam gen_param = 1;
  inline bool has_gen_param() const;
  inline void clear_gen_param();
  static const int kGenParamFieldNumber = 1;
  inline const ::gsbn::GenParam& gen_param() const;
  inline ::gsbn::GenParam* mutable_gen_param();
  inline ::gsbn::GenParam* release_gen_param();
  inline void set_allocated_gen_param(::gsbn::GenParam* gen_param);

  // required .gsbn.NetParam net_param = 2;
  inline bool has_net_param() const;
  inline void clear_net_param();
  static const int kNetParamFieldNumber = 2;
  inline const ::gsbn::NetParam& net_param() const;
  inline ::gsbn::NetParam* mutable_net_param();
  inline ::gsbn::NetParam* release_net_param();
  inline void set_allocated_net_param(::gsbn::NetParam* net_param);

  // required .gsbn.RecParam rec_param = 3;
  inline bool has_rec_param() const;
  inline void clear_rec_param();
  static const int kRecParamFieldNumber = 3;
  inline const ::gsbn::RecParam& rec_param() const;
  inline ::gsbn::RecParam* mutable_rec_param();
  inline ::gsbn::RecParam* release_rec_param();
  inline void set_allocated_rec_param(::gsbn::RecParam* rec_param);

  // repeated .gsbn.ProcParam proc_param = 4;
  inline int proc_param_size() const;
  inline void clear_proc_param();
  static const int kProcParamFieldNumber = 4;
  inline const ::gsbn::ProcParam& proc_param(int index) const;
  inline ::gsbn::ProcParam* mutable_proc_param(int index);
  inline ::gsbn::ProcParam* add_proc_param();
  inline const ::google::protobuf::RepeatedPtrField< ::gsbn::ProcParam >&
      proc_param() const;
  inline ::google::protobuf::RepeatedPtrField< ::gsbn::ProcParam >*
      mutable_proc_param();

  // @@protoc_insertion_point(class_scope:gsbn.SolverParam)
 private:
  inline void set_has_gen_param();
  inline void clear_has_gen_param();
  inline void set_has_net_param();
  inline void clear_has_net_param();
  inline void set_has_rec_param();
  inline void clear_has_rec_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::gsbn::GenParam* gen_param_;
  ::gsbn::NetParam* net_param_;
  ::gsbn::RecParam* rec_param_;
  ::google::protobuf::RepeatedPtrField< ::gsbn::ProcParam > proc_param_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_gsbn_2eproto();
  friend void protobuf_AssignDesc_gsbn_2eproto();
  friend void protobuf_ShutdownFile_gsbn_2eproto();

  void InitAsDefaultInstance();
  static SolverParam* default_instance_;
};
// -------------------------------------------------------------------

class GenParam : public ::google::protobuf::Message {
 public:
  GenParam();
  virtual ~GenParam();

  GenParam(const GenParam& from);

  inline GenParam& operator=(const GenParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GenParam& default_instance();

  void Swap(GenParam* other);

  // implements Message ----------------------------------------------

  GenParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GenParam& from);
  void MergeFrom(const GenParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string stim_file = 1;
  inline bool has_stim_file() const;
  inline void clear_stim_file();
  static const int kStimFileFieldNumber = 1;
  inline const ::std::string& stim_file() const;
  inline void set_stim_file(const ::std::string& value);
  inline void set_stim_file(const char* value);
  inline void set_stim_file(const char* value, size_t size);
  inline ::std::string* mutable_stim_file();
  inline ::std::string* release_stim_file();
  inline void set_allocated_stim_file(::std::string* stim_file);

  // required float dt = 2;
  inline bool has_dt() const;
  inline void clear_dt();
  static const int kDtFieldNumber = 2;
  inline float dt() const;
  inline void set_dt(float value);

  // required float eps = 3 [default = 0.001];
  inline bool has_eps() const;
  inline void clear_eps();
  static const int kEpsFieldNumber = 3;
  inline float eps() const;
  inline void set_eps(float value);

  // repeated .gsbn.ModeParam mode_param = 4;
  inline int mode_param_size() const;
  inline void clear_mode_param();
  static const int kModeParamFieldNumber = 4;
  inline const ::gsbn::ModeParam& mode_param(int index) const;
  inline ::gsbn::ModeParam* mutable_mode_param(int index);
  inline ::gsbn::ModeParam* add_mode_param();
  inline const ::google::protobuf::RepeatedPtrField< ::gsbn::ModeParam >&
      mode_param() const;
  inline ::google::protobuf::RepeatedPtrField< ::gsbn::ModeParam >*
      mutable_mode_param();

  // repeated string procedure = 5;
  inline int procedure_size() const;
  inline void clear_procedure();
  static const int kProcedureFieldNumber = 5;
  inline const ::std::string& procedure(int index) const;
  inline ::std::string* mutable_procedure(int index);
  inline void set_procedure(int index, const ::std::string& value);
  inline void set_procedure(int index, const char* value);
  inline void set_procedure(int index, const char* value, size_t size);
  inline ::std::string* add_procedure();
  inline void add_procedure(const ::std::string& value);
  inline void add_procedure(const char* value);
  inline void add_procedure(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& procedure() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_procedure();

  // @@protoc_insertion_point(class_scope:gsbn.GenParam)
 private:
  inline void set_has_stim_file();
  inline void clear_has_stim_file();
  inline void set_has_dt();
  inline void clear_has_dt();
  inline void set_has_eps();
  inline void clear_has_eps();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* stim_file_;
  float dt_;
  float eps_;
  ::google::protobuf::RepeatedPtrField< ::gsbn::ModeParam > mode_param_;
  ::google::protobuf::RepeatedPtrField< ::std::string> procedure_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_gsbn_2eproto();
  friend void protobuf_AssignDesc_gsbn_2eproto();
  friend void protobuf_ShutdownFile_gsbn_2eproto();

  void InitAsDefaultInstance();
  static GenParam* default_instance_;
};
// -------------------------------------------------------------------

class ModeParam : public ::google::protobuf::Message {
 public:
  ModeParam();
  virtual ~ModeParam();

  ModeParam(const ModeParam& from);

  inline ModeParam& operator=(const ModeParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModeParam& default_instance();

  void Swap(ModeParam* other);

  // implements Message ----------------------------------------------

  ModeParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ModeParam& from);
  void MergeFrom(const ModeParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float begin_time = 1;
  inline bool has_begin_time() const;
  inline void clear_begin_time();
  static const int kBeginTimeFieldNumber = 1;
  inline float begin_time() const;
  inline void set_begin_time(float value);

  // required float end_time = 2;
  inline bool has_end_time() const;
  inline void clear_end_time();
  static const int kEndTimeFieldNumber = 2;
  inline float end_time() const;
  inline void set_end_time(float value);

  // optional uint32 begin_lgidx_id = 3 [default = 0];
  inline bool has_begin_lgidx_id() const;
  inline void clear_begin_lgidx_id();
  static const int kBeginLgidxIdFieldNumber = 3;
  inline ::google::protobuf::uint32 begin_lgidx_id() const;
  inline void set_begin_lgidx_id(::google::protobuf::uint32 value);

  // optional uint32 begin_lgexp_id = 4 [default = 0];
  inline bool has_begin_lgexp_id() const;
  inline void clear_begin_lgexp_id();
  static const int kBeginLgexpIdFieldNumber = 4;
  inline ::google::protobuf::uint32 begin_lgexp_id() const;
  inline void set_begin_lgexp_id(::google::protobuf::uint32 value);

  // optional uint32 begin_wmask_id = 5 [default = 0];
  inline bool has_begin_wmask_id() const;
  inline void clear_begin_wmask_id();
  static const int kBeginWmaskIdFieldNumber = 5;
  inline ::google::protobuf::uint32 begin_wmask_id() const;
  inline void set_begin_wmask_id(::google::protobuf::uint32 value);

  // optional uint32 time_step = 6 [default = 1];
  inline bool has_time_step() const;
  inline void clear_time_step();
  static const int kTimeStepFieldNumber = 6;
  inline ::google::protobuf::uint32 time_step() const;
  inline void set_time_step(::google::protobuf::uint32 value);

  // optional uint32 lgidx_step = 7 [default = 1];
  inline bool has_lgidx_step() const;
  inline void clear_lgidx_step();
  static const int kLgidxStepFieldNumber = 7;
  inline ::google::protobuf::uint32 lgidx_step() const;
  inline void set_lgidx_step(::google::protobuf::uint32 value);

  // optional uint32 lgexp_step = 8 [default = 1];
  inline bool has_lgexp_step() const;
  inline void clear_lgexp_step();
  static const int kLgexpStepFieldNumber = 8;
  inline ::google::protobuf::uint32 lgexp_step() const;
  inline void set_lgexp_step(::google::protobuf::uint32 value);

  // optional uint32 wmask_step = 9 [default = 1];
  inline bool has_wmask_step() const;
  inline void clear_wmask_step();
  static const int kWmaskStepFieldNumber = 9;
  inline ::google::protobuf::uint32 wmask_step() const;
  inline void set_wmask_step(::google::protobuf::uint32 value);

  // optional float prn = 10 [default = 1];
  inline bool has_prn() const;
  inline void clear_prn();
  static const int kPrnFieldNumber = 10;
  inline float prn() const;
  inline void set_prn(float value);

  // optional uint32 plasticity = 11 [default = 1];
  inline bool has_plasticity() const;
  inline void clear_plasticity();
  static const int kPlasticityFieldNumber = 11;
  inline ::google::protobuf::uint32 plasticity() const;
  inline void set_plasticity(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gsbn.ModeParam)
 private:
  inline void set_has_begin_time();
  inline void clear_has_begin_time();
  inline void set_has_end_time();
  inline void clear_has_end_time();
  inline void set_has_begin_lgidx_id();
  inline void clear_has_begin_lgidx_id();
  inline void set_has_begin_lgexp_id();
  inline void clear_has_begin_lgexp_id();
  inline void set_has_begin_wmask_id();
  inline void clear_has_begin_wmask_id();
  inline void set_has_time_step();
  inline void clear_has_time_step();
  inline void set_has_lgidx_step();
  inline void clear_has_lgidx_step();
  inline void set_has_lgexp_step();
  inline void clear_has_lgexp_step();
  inline void set_has_wmask_step();
  inline void clear_has_wmask_step();
  inline void set_has_prn();
  inline void clear_has_prn();
  inline void set_has_plasticity();
  inline void clear_has_plasticity();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float begin_time_;
  float end_time_;
  ::google::protobuf::uint32 begin_lgidx_id_;
  ::google::protobuf::uint32 begin_lgexp_id_;
  ::google::protobuf::uint32 begin_wmask_id_;
  ::google::protobuf::uint32 time_step_;
  ::google::protobuf::uint32 lgidx_step_;
  ::google::protobuf::uint32 lgexp_step_;
  ::google::protobuf::uint32 wmask_step_;
  float prn_;
  ::google::protobuf::uint32 plasticity_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_gsbn_2eproto();
  friend void protobuf_AssignDesc_gsbn_2eproto();
  friend void protobuf_ShutdownFile_gsbn_2eproto();

  void InitAsDefaultInstance();
  static ModeParam* default_instance_;
};
// -------------------------------------------------------------------

class NetParam : public ::google::protobuf::Message {
 public:
  NetParam();
  virtual ~NetParam();

  NetParam(const NetParam& from);

  inline NetParam& operator=(const NetParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetParam& default_instance();

  void Swap(NetParam* other);

  // implements Message ----------------------------------------------

  NetParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetParam& from);
  void MergeFrom(const NetParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .gsbn.PopParam pop_param = 1;
  inline int pop_param_size() const;
  inline void clear_pop_param();
  static const int kPopParamFieldNumber = 1;
  inline const ::gsbn::PopParam& pop_param(int index) const;
  inline ::gsbn::PopParam* mutable_pop_param(int index);
  inline ::gsbn::PopParam* add_pop_param();
  inline const ::google::protobuf::RepeatedPtrField< ::gsbn::PopParam >&
      pop_param() const;
  inline ::google::protobuf::RepeatedPtrField< ::gsbn::PopParam >*
      mutable_pop_param();

  // repeated .gsbn.ProjParam proj_param = 2;
  inline int proj_param_size() const;
  inline void clear_proj_param();
  static const int kProjParamFieldNumber = 2;
  inline const ::gsbn::ProjParam& proj_param(int index) const;
  inline ::gsbn::ProjParam* mutable_proj_param(int index);
  inline ::gsbn::ProjParam* add_proj_param();
  inline const ::google::protobuf::RepeatedPtrField< ::gsbn::ProjParam >&
      proj_param() const;
  inline ::google::protobuf::RepeatedPtrField< ::gsbn::ProjParam >*
      mutable_proj_param();

  // @@protoc_insertion_point(class_scope:gsbn.NetParam)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::gsbn::PopParam > pop_param_;
  ::google::protobuf::RepeatedPtrField< ::gsbn::ProjParam > proj_param_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gsbn_2eproto();
  friend void protobuf_AssignDesc_gsbn_2eproto();
  friend void protobuf_ShutdownFile_gsbn_2eproto();

  void InitAsDefaultInstance();
  static NetParam* default_instance_;
};
// -------------------------------------------------------------------

class PopParam : public ::google::protobuf::Message {
 public:
  PopParam();
  virtual ~PopParam();

  PopParam(const PopParam& from);

  inline PopParam& operator=(const PopParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PopParam& default_instance();

  void Swap(PopParam* other);

  // implements Message ----------------------------------------------

  PopParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PopParam& from);
  void MergeFrom(const PopParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 pop_num = 1;
  inline bool has_pop_num() const;
  inline void clear_pop_num();
  static const int kPopNumFieldNumber = 1;
  inline ::google::protobuf::uint32 pop_num() const;
  inline void set_pop_num(::google::protobuf::uint32 value);

  // required uint32 hcu_num = 2;
  inline bool has_hcu_num() const;
  inline void clear_hcu_num();
  static const int kHcuNumFieldNumber = 2;
  inline ::google::protobuf::uint32 hcu_num() const;
  inline void set_hcu_num(::google::protobuf::uint32 value);

  // required uint32 mcu_num = 3;
  inline bool has_mcu_num() const;
  inline void clear_mcu_num();
  static const int kMcuNumFieldNumber = 3;
  inline ::google::protobuf::uint32 mcu_num() const;
  inline void set_mcu_num(::google::protobuf::uint32 value);

  // required uint32 fanout_num = 4;
  inline bool has_fanout_num() const;
  inline void clear_fanout_num();
  static const int kFanoutNumFieldNumber = 4;
  inline ::google::protobuf::uint32 fanout_num() const;
  inline void set_fanout_num(::google::protobuf::uint32 value);

  // optional float taum = 5 [default = 0.01];
  inline bool has_taum() const;
  inline void clear_taum();
  static const int kTaumFieldNumber = 5;
  inline float taum() const;
  inline void set_taum(float value);

  // optional float wtagain = 6 [default = 4];
  inline bool has_wtagain() const;
  inline void clear_wtagain();
  static const int kWtagainFieldNumber = 6;
  inline float wtagain() const;
  inline void set_wtagain(float value);

  // optional float maxfq = 7 [default = 100];
  inline bool has_maxfq() const;
  inline void clear_maxfq();
  static const int kMaxfqFieldNumber = 7;
  inline float maxfq() const;
  inline void set_maxfq(float value);

  // optional float igain = 8 [default = 1];
  inline bool has_igain() const;
  inline void clear_igain();
  static const int kIgainFieldNumber = 8;
  inline float igain() const;
  inline void set_igain(float value);

  // optional float wgain = 9 [default = 1];
  inline bool has_wgain() const;
  inline void clear_wgain();
  static const int kWgainFieldNumber = 9;
  inline float wgain() const;
  inline void set_wgain(float value);

  // optional float lgbias = 10 [default = 0];
  inline bool has_lgbias() const;
  inline void clear_lgbias();
  static const int kLgbiasFieldNumber = 10;
  inline float lgbias() const;
  inline void set_lgbias(float value);

  // optional float snoise = 11 [default = 0];
  inline bool has_snoise() const;
  inline void clear_snoise();
  static const int kSnoiseFieldNumber = 11;
  inline float snoise() const;
  inline void set_snoise(float value);

  // optional float adgain = 12 [default = 1];
  inline bool has_adgain() const;
  inline void clear_adgain();
  static const int kAdgainFieldNumber = 12;
  inline float adgain() const;
  inline void set_adgain(float value);

  // optional float taua = 13 [default = 0.05];
  inline bool has_taua() const;
  inline void clear_taua();
  static const int kTauaFieldNumber = 13;
  inline float taua() const;
  inline void set_taua(float value);

  // repeated int32 position = 15 [packed = true];
  inline int position_size() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 15;
  inline ::google::protobuf::int32 position(int index) const;
  inline void set_position(int index, ::google::protobuf::int32 value);
  inline void add_position(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      position() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_position();

  // repeated uint32 shape = 16 [packed = true];
  inline int shape_size() const;
  inline void clear_shape();
  static const int kShapeFieldNumber = 16;
  inline ::google::protobuf::uint32 shape(int index) const;
  inline void set_shape(int index, ::google::protobuf::uint32 value);
  inline void add_shape(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      shape() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_shape();

  // optional uint32 type = 17 [default = 0];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 17;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint32 rank = 18 [default = 0];
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 18;
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gsbn.PopParam)
 private:
  inline void set_has_pop_num();
  inline void clear_has_pop_num();
  inline void set_has_hcu_num();
  inline void clear_has_hcu_num();
  inline void set_has_mcu_num();
  inline void clear_has_mcu_num();
  inline void set_has_fanout_num();
  inline void clear_has_fanout_num();
  inline void set_has_taum();
  inline void clear_has_taum();
  inline void set_has_wtagain();
  inline void clear_has_wtagain();
  inline void set_has_maxfq();
  inline void clear_has_maxfq();
  inline void set_has_igain();
  inline void clear_has_igain();
  inline void set_has_wgain();
  inline void clear_has_wgain();
  inline void set_has_lgbias();
  inline void clear_has_lgbias();
  inline void set_has_snoise();
  inline void clear_has_snoise();
  inline void set_has_adgain();
  inline void clear_has_adgain();
  inline void set_has_taua();
  inline void clear_has_taua();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_rank();
  inline void clear_has_rank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 pop_num_;
  ::google::protobuf::uint32 hcu_num_;
  ::google::protobuf::uint32 mcu_num_;
  ::google::protobuf::uint32 fanout_num_;
  float taum_;
  float wtagain_;
  float maxfq_;
  float igain_;
  float wgain_;
  float lgbias_;
  float snoise_;
  float adgain_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > position_;
  mutable int _position_cached_byte_size_;
  float taua_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > shape_;
  mutable int _shape_cached_byte_size_;
  ::google::protobuf::uint32 rank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(17 + 31) / 32];

  friend void  protobuf_AddDesc_gsbn_2eproto();
  friend void protobuf_AssignDesc_gsbn_2eproto();
  friend void protobuf_ShutdownFile_gsbn_2eproto();

  void InitAsDefaultInstance();
  static PopParam* default_instance_;
};
// -------------------------------------------------------------------

class ProjParam : public ::google::protobuf::Message {
 public:
  ProjParam();
  virtual ~ProjParam();

  ProjParam(const ProjParam& from);

  inline ProjParam& operator=(const ProjParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProjParam& default_instance();

  void Swap(ProjParam* other);

  // implements Message ----------------------------------------------

  ProjParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProjParam& from);
  void MergeFrom(const ProjParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 src_pop = 1;
  inline bool has_src_pop() const;
  inline void clear_src_pop();
  static const int kSrcPopFieldNumber = 1;
  inline ::google::protobuf::uint32 src_pop() const;
  inline void set_src_pop(::google::protobuf::uint32 value);

  // required uint32 dest_pop = 2;
  inline bool has_dest_pop() const;
  inline void clear_dest_pop();
  static const int kDestPopFieldNumber = 2;
  inline ::google::protobuf::uint32 dest_pop() const;
  inline void set_dest_pop(::google::protobuf::uint32 value);

  // required float tauzi = 3;
  inline bool has_tauzi() const;
  inline void clear_tauzi();
  static const int kTauziFieldNumber = 3;
  inline float tauzi() const;
  inline void set_tauzi(float value);

  // required float tauzj = 4;
  inline bool has_tauzj() const;
  inline void clear_tauzj();
  static const int kTauzjFieldNumber = 4;
  inline float tauzj() const;
  inline void set_tauzj(float value);

  // required float taue = 5;
  inline bool has_taue() const;
  inline void clear_taue();
  static const int kTaueFieldNumber = 5;
  inline float taue() const;
  inline void set_taue(float value);

  // required float taup = 6;
  inline bool has_taup() const;
  inline void clear_taup();
  static const int kTaupFieldNumber = 6;
  inline float taup() const;
  inline void set_taup(float value);

  // optional float maxfq = 7 [default = 100];
  inline bool has_maxfq() const;
  inline void clear_maxfq();
  static const int kMaxfqFieldNumber = 7;
  inline float maxfq() const;
  inline void set_maxfq(float value);

  // optional float bgain = 8 [default = 0];
  inline bool has_bgain() const;
  inline void clear_bgain();
  static const int kBgainFieldNumber = 8;
  inline float bgain() const;
  inline void set_bgain(float value);

  // optional float wgain = 9 [default = 0];
  inline bool has_wgain() const;
  inline void clear_wgain();
  static const int kWgainFieldNumber = 9;
  inline float wgain() const;
  inline void set_wgain(float value);

  // optional float tauepsc = 10;
  inline bool has_tauepsc() const;
  inline void clear_tauepsc();
  static const int kTauepscFieldNumber = 10;
  inline float tauepsc() const;
  inline void set_tauepsc(float value);

  // required float slot_num = 11;
  inline bool has_slot_num() const;
  inline void clear_slot_num();
  static const int kSlotNumFieldNumber = 11;
  inline float slot_num() const;
  inline void set_slot_num(float value);

  // optional float distance = 12 [default = 0];
  inline bool has_distance() const;
  inline void clear_distance();
  static const int kDistanceFieldNumber = 12;
  inline float distance() const;
  inline void set_distance(float value);

  // @@protoc_insertion_point(class_scope:gsbn.ProjParam)
 private:
  inline void set_has_src_pop();
  inline void clear_has_src_pop();
  inline void set_has_dest_pop();
  inline void clear_has_dest_pop();
  inline void set_has_tauzi();
  inline void clear_has_tauzi();
  inline void set_has_tauzj();
  inline void clear_has_tauzj();
  inline void set_has_taue();
  inline void clear_has_taue();
  inline void set_has_taup();
  inline void clear_has_taup();
  inline void set_has_maxfq();
  inline void clear_has_maxfq();
  inline void set_has_bgain();
  inline void clear_has_bgain();
  inline void set_has_wgain();
  inline void clear_has_wgain();
  inline void set_has_tauepsc();
  inline void clear_has_tauepsc();
  inline void set_has_slot_num();
  inline void clear_has_slot_num();
  inline void set_has_distance();
  inline void clear_has_distance();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 src_pop_;
  ::google::protobuf::uint32 dest_pop_;
  float tauzi_;
  float tauzj_;
  float taue_;
  float taup_;
  float maxfq_;
  float bgain_;
  float wgain_;
  float tauepsc_;
  float slot_num_;
  float distance_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_gsbn_2eproto();
  friend void protobuf_AssignDesc_gsbn_2eproto();
  friend void protobuf_ShutdownFile_gsbn_2eproto();

  void InitAsDefaultInstance();
  static ProjParam* default_instance_;
};
// -------------------------------------------------------------------

class RecParam : public ::google::protobuf::Message {
 public:
  RecParam();
  virtual ~RecParam();

  RecParam(const RecParam& from);

  inline RecParam& operator=(const RecParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RecParam& default_instance();

  void Swap(RecParam* other);

  // implements Message ----------------------------------------------

  RecParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecParam& from);
  void MergeFrom(const RecParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string directory = 1 [default = "."];
  inline bool has_directory() const;
  inline void clear_directory();
  static const int kDirectoryFieldNumber = 1;
  inline const ::std::string& directory() const;
  inline void set_directory(const ::std::string& value);
  inline void set_directory(const char* value);
  inline void set_directory(const char* value, size_t size);
  inline ::std::string* mutable_directory();
  inline ::std::string* release_directory();
  inline void set_allocated_directory(::std::string* directory);

  // @@protoc_insertion_point(class_scope:gsbn.RecParam)
 private:
  inline void set_has_directory();
  inline void clear_has_directory();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* directory_;
  static ::std::string* _default_directory_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gsbn_2eproto();
  friend void protobuf_AssignDesc_gsbn_2eproto();
  friend void protobuf_ShutdownFile_gsbn_2eproto();

  void InitAsDefaultInstance();
  static RecParam* default_instance_;
};
// -------------------------------------------------------------------

class ProcParam : public ::google::protobuf::Message {
 public:
  ProcParam();
  virtual ~ProcParam();

  ProcParam(const ProcParam& from);

  inline ProcParam& operator=(const ProcParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProcParam& default_instance();

  void Swap(ProcParam* other);

  // implements Message ----------------------------------------------

  ProcParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProcParam& from);
  void MergeFrom(const ProcParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated .gsbn.ProcParamArgI argi = 2;
  inline int argi_size() const;
  inline void clear_argi();
  static const int kArgiFieldNumber = 2;
  inline const ::gsbn::ProcParamArgI& argi(int index) const;
  inline ::gsbn::ProcParamArgI* mutable_argi(int index);
  inline ::gsbn::ProcParamArgI* add_argi();
  inline const ::google::protobuf::RepeatedPtrField< ::gsbn::ProcParamArgI >&
      argi() const;
  inline ::google::protobuf::RepeatedPtrField< ::gsbn::ProcParamArgI >*
      mutable_argi();

  // repeated .gsbn.ProcParamArgF argf = 3;
  inline int argf_size() const;
  inline void clear_argf();
  static const int kArgfFieldNumber = 3;
  inline const ::gsbn::ProcParamArgF& argf(int index) const;
  inline ::gsbn::ProcParamArgF* mutable_argf(int index);
  inline ::gsbn::ProcParamArgF* add_argf();
  inline const ::google::protobuf::RepeatedPtrField< ::gsbn::ProcParamArgF >&
      argf() const;
  inline ::google::protobuf::RepeatedPtrField< ::gsbn::ProcParamArgF >*
      mutable_argf();

  // repeated .gsbn.ProcParamArgS args = 4;
  inline int args_size() const;
  inline void clear_args();
  static const int kArgsFieldNumber = 4;
  inline const ::gsbn::ProcParamArgS& args(int index) const;
  inline ::gsbn::ProcParamArgS* mutable_args(int index);
  inline ::gsbn::ProcParamArgS* add_args();
  inline const ::google::protobuf::RepeatedPtrField< ::gsbn::ProcParamArgS >&
      args() const;
  inline ::google::protobuf::RepeatedPtrField< ::gsbn::ProcParamArgS >*
      mutable_args();

  // @@protoc_insertion_point(class_scope:gsbn.ProcParam)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::gsbn::ProcParamArgI > argi_;
  ::google::protobuf::RepeatedPtrField< ::gsbn::ProcParamArgF > argf_;
  ::google::protobuf::RepeatedPtrField< ::gsbn::ProcParamArgS > args_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_gsbn_2eproto();
  friend void protobuf_AssignDesc_gsbn_2eproto();
  friend void protobuf_ShutdownFile_gsbn_2eproto();

  void InitAsDefaultInstance();
  static ProcParam* default_instance_;
};
// -------------------------------------------------------------------

class ProcParamArgI : public ::google::protobuf::Message {
 public:
  ProcParamArgI();
  virtual ~ProcParamArgI();

  ProcParamArgI(const ProcParamArgI& from);

  inline ProcParamArgI& operator=(const ProcParamArgI& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProcParamArgI& default_instance();

  void Swap(ProcParamArgI* other);

  // implements Message ----------------------------------------------

  ProcParamArgI* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProcParamArgI& from);
  void MergeFrom(const ProcParamArgI& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required int32 val = 2;
  inline bool has_val() const;
  inline void clear_val();
  static const int kValFieldNumber = 2;
  inline ::google::protobuf::int32 val() const;
  inline void set_val(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:gsbn.ProcParamArgI)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_val();
  inline void clear_has_val();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* key_;
  ::google::protobuf::int32 val_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gsbn_2eproto();
  friend void protobuf_AssignDesc_gsbn_2eproto();
  friend void protobuf_ShutdownFile_gsbn_2eproto();

  void InitAsDefaultInstance();
  static ProcParamArgI* default_instance_;
};
// -------------------------------------------------------------------

class ProcParamArgF : public ::google::protobuf::Message {
 public:
  ProcParamArgF();
  virtual ~ProcParamArgF();

  ProcParamArgF(const ProcParamArgF& from);

  inline ProcParamArgF& operator=(const ProcParamArgF& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProcParamArgF& default_instance();

  void Swap(ProcParamArgF* other);

  // implements Message ----------------------------------------------

  ProcParamArgF* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProcParamArgF& from);
  void MergeFrom(const ProcParamArgF& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required float val = 2;
  inline bool has_val() const;
  inline void clear_val();
  static const int kValFieldNumber = 2;
  inline float val() const;
  inline void set_val(float value);

  // @@protoc_insertion_point(class_scope:gsbn.ProcParamArgF)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_val();
  inline void clear_has_val();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* key_;
  float val_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gsbn_2eproto();
  friend void protobuf_AssignDesc_gsbn_2eproto();
  friend void protobuf_ShutdownFile_gsbn_2eproto();

  void InitAsDefaultInstance();
  static ProcParamArgF* default_instance_;
};
// -------------------------------------------------------------------

class ProcParamArgS : public ::google::protobuf::Message {
 public:
  ProcParamArgS();
  virtual ~ProcParamArgS();

  ProcParamArgS(const ProcParamArgS& from);

  inline ProcParamArgS& operator=(const ProcParamArgS& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProcParamArgS& default_instance();

  void Swap(ProcParamArgS* other);

  // implements Message ----------------------------------------------

  ProcParamArgS* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProcParamArgS& from);
  void MergeFrom(const ProcParamArgS& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required string val = 2;
  inline bool has_val() const;
  inline void clear_val();
  static const int kValFieldNumber = 2;
  inline const ::std::string& val() const;
  inline void set_val(const ::std::string& value);
  inline void set_val(const char* value);
  inline void set_val(const char* value, size_t size);
  inline ::std::string* mutable_val();
  inline ::std::string* release_val();
  inline void set_allocated_val(::std::string* val);

  // @@protoc_insertion_point(class_scope:gsbn.ProcParamArgS)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_val();
  inline void clear_has_val();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* key_;
  ::std::string* val_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gsbn_2eproto();
  friend void protobuf_AssignDesc_gsbn_2eproto();
  friend void protobuf_ShutdownFile_gsbn_2eproto();

  void InitAsDefaultInstance();
  static ProcParamArgS* default_instance_;
};
// -------------------------------------------------------------------

class SolverState : public ::google::protobuf::Message {
 public:
  SolverState();
  virtual ~SolverState();

  SolverState(const SolverState& from);

  inline SolverState& operator=(const SolverState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SolverState& default_instance();

  void Swap(SolverState* other);

  // implements Message ----------------------------------------------

  SolverState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SolverState& from);
  void MergeFrom(const SolverState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float timestamp = 1;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  inline float timestamp() const;
  inline void set_timestamp(float value);

  // required float prn = 2;
  inline bool has_prn() const;
  inline void clear_prn();
  static const int kPrnFieldNumber = 2;
  inline float prn() const;
  inline void set_prn(float value);

  // repeated .gsbn.TableState table_state = 3;
  inline int table_state_size() const;
  inline void clear_table_state();
  static const int kTableStateFieldNumber = 3;
  inline const ::gsbn::TableState& table_state(int index) const;
  inline ::gsbn::TableState* mutable_table_state(int index);
  inline ::gsbn::TableState* add_table_state();
  inline const ::google::protobuf::RepeatedPtrField< ::gsbn::TableState >&
      table_state() const;
  inline ::google::protobuf::RepeatedPtrField< ::gsbn::TableState >*
      mutable_table_state();

  // repeated .gsbn.VectorStateI8 vector_state_i8 = 4;
  inline int vector_state_i8_size() const;
  inline void clear_vector_state_i8();
  static const int kVectorStateI8FieldNumber = 4;
  inline const ::gsbn::VectorStateI8& vector_state_i8(int index) const;
  inline ::gsbn::VectorStateI8* mutable_vector_state_i8(int index);
  inline ::gsbn::VectorStateI8* add_vector_state_i8();
  inline const ::google::protobuf::RepeatedPtrField< ::gsbn::VectorStateI8 >&
      vector_state_i8() const;
  inline ::google::protobuf::RepeatedPtrField< ::gsbn::VectorStateI8 >*
      mutable_vector_state_i8();

  // repeated .gsbn.VectorStateI16 vector_state_i16 = 5;
  inline int vector_state_i16_size() const;
  inline void clear_vector_state_i16();
  static const int kVectorStateI16FieldNumber = 5;
  inline const ::gsbn::VectorStateI16& vector_state_i16(int index) const;
  inline ::gsbn::VectorStateI16* mutable_vector_state_i16(int index);
  inline ::gsbn::VectorStateI16* add_vector_state_i16();
  inline const ::google::protobuf::RepeatedPtrField< ::gsbn::VectorStateI16 >&
      vector_state_i16() const;
  inline ::google::protobuf::RepeatedPtrField< ::gsbn::VectorStateI16 >*
      mutable_vector_state_i16();

  // repeated .gsbn.VectorStateI32 vector_state_i32 = 6;
  inline int vector_state_i32_size() const;
  inline void clear_vector_state_i32();
  static const int kVectorStateI32FieldNumber = 6;
  inline const ::gsbn::VectorStateI32& vector_state_i32(int index) const;
  inline ::gsbn::VectorStateI32* mutable_vector_state_i32(int index);
  inline ::gsbn::VectorStateI32* add_vector_state_i32();
  inline const ::google::protobuf::RepeatedPtrField< ::gsbn::VectorStateI32 >&
      vector_state_i32() const;
  inline ::google::protobuf::RepeatedPtrField< ::gsbn::VectorStateI32 >*
      mutable_vector_state_i32();

  // repeated .gsbn.VectorStateI64 vector_state_i64 = 7;
  inline int vector_state_i64_size() const;
  inline void clear_vector_state_i64();
  static const int kVectorStateI64FieldNumber = 7;
  inline const ::gsbn::VectorStateI64& vector_state_i64(int index) const;
  inline ::gsbn::VectorStateI64* mutable_vector_state_i64(int index);
  inline ::gsbn::VectorStateI64* add_vector_state_i64();
  inline const ::google::protobuf::RepeatedPtrField< ::gsbn::VectorStateI64 >&
      vector_state_i64() const;
  inline ::google::protobuf::RepeatedPtrField< ::gsbn::VectorStateI64 >*
      mutable_vector_state_i64();

  // repeated .gsbn.VectorStateF16 vector_state_f16 = 8;
  inline int vector_state_f16_size() const;
  inline void clear_vector_state_f16();
  static const int kVectorStateF16FieldNumber = 8;
  inline const ::gsbn::VectorStateF16& vector_state_f16(int index) const;
  inline ::gsbn::VectorStateF16* mutable_vector_state_f16(int index);
  inline ::gsbn::VectorStateF16* add_vector_state_f16();
  inline const ::google::protobuf::RepeatedPtrField< ::gsbn::VectorStateF16 >&
      vector_state_f16() const;
  inline ::google::protobuf::RepeatedPtrField< ::gsbn::VectorStateF16 >*
      mutable_vector_state_f16();

  // repeated .gsbn.VectorStateF32 vector_state_f32 = 9;
  inline int vector_state_f32_size() const;
  inline void clear_vector_state_f32();
  static const int kVectorStateF32FieldNumber = 9;
  inline const ::gsbn::VectorStateF32& vector_state_f32(int index) const;
  inline ::gsbn::VectorStateF32* mutable_vector_state_f32(int index);
  inline ::gsbn::VectorStateF32* add_vector_state_f32();
  inline const ::google::protobuf::RepeatedPtrField< ::gsbn::VectorStateF32 >&
      vector_state_f32() const;
  inline ::google::protobuf::RepeatedPtrField< ::gsbn::VectorStateF32 >*
      mutable_vector_state_f32();

  // repeated .gsbn.VectorStateF64 vector_state_f64 = 10;
  inline int vector_state_f64_size() const;
  inline void clear_vector_state_f64();
  static const int kVectorStateF64FieldNumber = 10;
  inline const ::gsbn::VectorStateF64& vector_state_f64(int index) const;
  inline ::gsbn::VectorStateF64* mutable_vector_state_f64(int index);
  inline ::gsbn::VectorStateF64* add_vector_state_f64();
  inline const ::google::protobuf::RepeatedPtrField< ::gsbn::VectorStateF64 >&
      vector_state_f64() const;
  inline ::google::protobuf::RepeatedPtrField< ::gsbn::VectorStateF64 >*
      mutable_vector_state_f64();

  // @@protoc_insertion_point(class_scope:gsbn.SolverState)
 private:
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_prn();
  inline void clear_has_prn();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float timestamp_;
  float prn_;
  ::google::protobuf::RepeatedPtrField< ::gsbn::TableState > table_state_;
  ::google::protobuf::RepeatedPtrField< ::gsbn::VectorStateI8 > vector_state_i8_;
  ::google::protobuf::RepeatedPtrField< ::gsbn::VectorStateI16 > vector_state_i16_;
  ::google::protobuf::RepeatedPtrField< ::gsbn::VectorStateI32 > vector_state_i32_;
  ::google::protobuf::RepeatedPtrField< ::gsbn::VectorStateI64 > vector_state_i64_;
  ::google::protobuf::RepeatedPtrField< ::gsbn::VectorStateF16 > vector_state_f16_;
  ::google::protobuf::RepeatedPtrField< ::gsbn::VectorStateF32 > vector_state_f32_;
  ::google::protobuf::RepeatedPtrField< ::gsbn::VectorStateF64 > vector_state_f64_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_gsbn_2eproto();
  friend void protobuf_AssignDesc_gsbn_2eproto();
  friend void protobuf_ShutdownFile_gsbn_2eproto();

  void InitAsDefaultInstance();
  static SolverState* default_instance_;
};
// -------------------------------------------------------------------

class TableState : public ::google::protobuf::Message {
 public:
  TableState();
  virtual ~TableState();

  TableState(const TableState& from);

  inline TableState& operator=(const TableState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TableState& default_instance();

  void Swap(TableState* other);

  // implements Message ----------------------------------------------

  TableState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TableState& from);
  void MergeFrom(const TableState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required bytes desc = 2;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 2;
  inline const ::std::string& desc() const;
  inline void set_desc(const ::std::string& value);
  inline void set_desc(const char* value);
  inline void set_desc(const void* value, size_t size);
  inline ::std::string* mutable_desc();
  inline ::std::string* release_desc();
  inline void set_allocated_desc(::std::string* desc);

  // required bytes data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:gsbn.TableState)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_desc();
  inline void clear_has_desc();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* desc_;
  ::std::string* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gsbn_2eproto();
  friend void protobuf_AssignDesc_gsbn_2eproto();
  friend void protobuf_ShutdownFile_gsbn_2eproto();

  void InitAsDefaultInstance();
  static TableState* default_instance_;
};
// -------------------------------------------------------------------

class VectorStateI8 : public ::google::protobuf::Message {
 public:
  VectorStateI8();
  virtual ~VectorStateI8();

  VectorStateI8(const VectorStateI8& from);

  inline VectorStateI8& operator=(const VectorStateI8& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VectorStateI8& default_instance();

  void Swap(VectorStateI8* other);

  // implements Message ----------------------------------------------

  VectorStateI8* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VectorStateI8& from);
  void MergeFrom(const VectorStateI8& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 ld = 2 [default = 1];
  inline bool has_ld() const;
  inline void clear_ld();
  static const int kLdFieldNumber = 2;
  inline ::google::protobuf::uint32 ld() const;
  inline void set_ld(::google::protobuf::uint32 value);

  // repeated int32 data = 3 [packed = true];
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline ::google::protobuf::int32 data(int index) const;
  inline void set_data(int index, ::google::protobuf::int32 value);
  inline void add_data(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      data() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:gsbn.VectorStateI8)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_ld();
  inline void clear_has_ld();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > data_;
  mutable int _data_cached_byte_size_;
  ::google::protobuf::uint32 ld_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gsbn_2eproto();
  friend void protobuf_AssignDesc_gsbn_2eproto();
  friend void protobuf_ShutdownFile_gsbn_2eproto();

  void InitAsDefaultInstance();
  static VectorStateI8* default_instance_;
};
// -------------------------------------------------------------------

class VectorStateI16 : public ::google::protobuf::Message {
 public:
  VectorStateI16();
  virtual ~VectorStateI16();

  VectorStateI16(const VectorStateI16& from);

  inline VectorStateI16& operator=(const VectorStateI16& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VectorStateI16& default_instance();

  void Swap(VectorStateI16* other);

  // implements Message ----------------------------------------------

  VectorStateI16* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VectorStateI16& from);
  void MergeFrom(const VectorStateI16& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 ld = 2 [default = 1];
  inline bool has_ld() const;
  inline void clear_ld();
  static const int kLdFieldNumber = 2;
  inline ::google::protobuf::uint32 ld() const;
  inline void set_ld(::google::protobuf::uint32 value);

  // repeated int32 data = 3 [packed = true];
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline ::google::protobuf::int32 data(int index) const;
  inline void set_data(int index, ::google::protobuf::int32 value);
  inline void add_data(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      data() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:gsbn.VectorStateI16)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_ld();
  inline void clear_has_ld();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > data_;
  mutable int _data_cached_byte_size_;
  ::google::protobuf::uint32 ld_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gsbn_2eproto();
  friend void protobuf_AssignDesc_gsbn_2eproto();
  friend void protobuf_ShutdownFile_gsbn_2eproto();

  void InitAsDefaultInstance();
  static VectorStateI16* default_instance_;
};
// -------------------------------------------------------------------

class VectorStateI32 : public ::google::protobuf::Message {
 public:
  VectorStateI32();
  virtual ~VectorStateI32();

  VectorStateI32(const VectorStateI32& from);

  inline VectorStateI32& operator=(const VectorStateI32& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VectorStateI32& default_instance();

  void Swap(VectorStateI32* other);

  // implements Message ----------------------------------------------

  VectorStateI32* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VectorStateI32& from);
  void MergeFrom(const VectorStateI32& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 ld = 2 [default = 1];
  inline bool has_ld() const;
  inline void clear_ld();
  static const int kLdFieldNumber = 2;
  inline ::google::protobuf::uint32 ld() const;
  inline void set_ld(::google::protobuf::uint32 value);

  // repeated int32 data = 3 [packed = true];
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline ::google::protobuf::int32 data(int index) const;
  inline void set_data(int index, ::google::protobuf::int32 value);
  inline void add_data(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      data() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:gsbn.VectorStateI32)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_ld();
  inline void clear_has_ld();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > data_;
  mutable int _data_cached_byte_size_;
  ::google::protobuf::uint32 ld_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gsbn_2eproto();
  friend void protobuf_AssignDesc_gsbn_2eproto();
  friend void protobuf_ShutdownFile_gsbn_2eproto();

  void InitAsDefaultInstance();
  static VectorStateI32* default_instance_;
};
// -------------------------------------------------------------------

class VectorStateI64 : public ::google::protobuf::Message {
 public:
  VectorStateI64();
  virtual ~VectorStateI64();

  VectorStateI64(const VectorStateI64& from);

  inline VectorStateI64& operator=(const VectorStateI64& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VectorStateI64& default_instance();

  void Swap(VectorStateI64* other);

  // implements Message ----------------------------------------------

  VectorStateI64* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VectorStateI64& from);
  void MergeFrom(const VectorStateI64& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 ld = 2 [default = 1];
  inline bool has_ld() const;
  inline void clear_ld();
  static const int kLdFieldNumber = 2;
  inline ::google::protobuf::uint32 ld() const;
  inline void set_ld(::google::protobuf::uint32 value);

  // repeated int64 data = 3 [packed = true];
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline ::google::protobuf::int64 data(int index) const;
  inline void set_data(int index, ::google::protobuf::int64 value);
  inline void add_data(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      data() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:gsbn.VectorStateI64)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_ld();
  inline void clear_has_ld();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > data_;
  mutable int _data_cached_byte_size_;
  ::google::protobuf::uint32 ld_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gsbn_2eproto();
  friend void protobuf_AssignDesc_gsbn_2eproto();
  friend void protobuf_ShutdownFile_gsbn_2eproto();

  void InitAsDefaultInstance();
  static VectorStateI64* default_instance_;
};
// -------------------------------------------------------------------

class VectorStateF16 : public ::google::protobuf::Message {
 public:
  VectorStateF16();
  virtual ~VectorStateF16();

  VectorStateF16(const VectorStateF16& from);

  inline VectorStateF16& operator=(const VectorStateF16& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VectorStateF16& default_instance();

  void Swap(VectorStateF16* other);

  // implements Message ----------------------------------------------

  VectorStateF16* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VectorStateF16& from);
  void MergeFrom(const VectorStateF16& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 ld = 2 [default = 1];
  inline bool has_ld() const;
  inline void clear_ld();
  static const int kLdFieldNumber = 2;
  inline ::google::protobuf::uint32 ld() const;
  inline void set_ld(::google::protobuf::uint32 value);

  // repeated float data = 3 [packed = true];
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline float data(int index) const;
  inline void set_data(int index, float value);
  inline void add_data(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      data() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:gsbn.VectorStateF16)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_ld();
  inline void clear_has_ld();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::RepeatedField< float > data_;
  mutable int _data_cached_byte_size_;
  ::google::protobuf::uint32 ld_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gsbn_2eproto();
  friend void protobuf_AssignDesc_gsbn_2eproto();
  friend void protobuf_ShutdownFile_gsbn_2eproto();

  void InitAsDefaultInstance();
  static VectorStateF16* default_instance_;
};
// -------------------------------------------------------------------

class VectorStateF32 : public ::google::protobuf::Message {
 public:
  VectorStateF32();
  virtual ~VectorStateF32();

  VectorStateF32(const VectorStateF32& from);

  inline VectorStateF32& operator=(const VectorStateF32& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VectorStateF32& default_instance();

  void Swap(VectorStateF32* other);

  // implements Message ----------------------------------------------

  VectorStateF32* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VectorStateF32& from);
  void MergeFrom(const VectorStateF32& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 ld = 2 [default = 1];
  inline bool has_ld() const;
  inline void clear_ld();
  static const int kLdFieldNumber = 2;
  inline ::google::protobuf::uint32 ld() const;
  inline void set_ld(::google::protobuf::uint32 value);

  // repeated float data = 3 [packed = true];
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline float data(int index) const;
  inline void set_data(int index, float value);
  inline void add_data(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      data() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:gsbn.VectorStateF32)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_ld();
  inline void clear_has_ld();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::RepeatedField< float > data_;
  mutable int _data_cached_byte_size_;
  ::google::protobuf::uint32 ld_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gsbn_2eproto();
  friend void protobuf_AssignDesc_gsbn_2eproto();
  friend void protobuf_ShutdownFile_gsbn_2eproto();

  void InitAsDefaultInstance();
  static VectorStateF32* default_instance_;
};
// -------------------------------------------------------------------

class VectorStateF64 : public ::google::protobuf::Message {
 public:
  VectorStateF64();
  virtual ~VectorStateF64();

  VectorStateF64(const VectorStateF64& from);

  inline VectorStateF64& operator=(const VectorStateF64& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VectorStateF64& default_instance();

  void Swap(VectorStateF64* other);

  // implements Message ----------------------------------------------

  VectorStateF64* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VectorStateF64& from);
  void MergeFrom(const VectorStateF64& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 ld = 2 [default = 1];
  inline bool has_ld() const;
  inline void clear_ld();
  static const int kLdFieldNumber = 2;
  inline ::google::protobuf::uint32 ld() const;
  inline void set_ld(::google::protobuf::uint32 value);

  // repeated double data = 3 [packed = true];
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline double data(int index) const;
  inline void set_data(int index, double value);
  inline void add_data(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      data() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:gsbn.VectorStateF64)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_ld();
  inline void clear_has_ld();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::RepeatedField< double > data_;
  mutable int _data_cached_byte_size_;
  ::google::protobuf::uint32 ld_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gsbn_2eproto();
  friend void protobuf_AssignDesc_gsbn_2eproto();
  friend void protobuf_ShutdownFile_gsbn_2eproto();

  void InitAsDefaultInstance();
  static VectorStateF64* default_instance_;
};
// -------------------------------------------------------------------

class StimRawData : public ::google::protobuf::Message {
 public:
  StimRawData();
  virtual ~StimRawData();

  StimRawData(const StimRawData& from);

  inline StimRawData& operator=(const StimRawData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StimRawData& default_instance();

  void Swap(StimRawData* other);

  // implements Message ----------------------------------------------

  StimRawData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StimRawData& from);
  void MergeFrom(const StimRawData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 data_rows = 1;
  inline bool has_data_rows() const;
  inline void clear_data_rows();
  static const int kDataRowsFieldNumber = 1;
  inline ::google::protobuf::uint32 data_rows() const;
  inline void set_data_rows(::google::protobuf::uint32 value);

  // required uint32 data_cols = 2;
  inline bool has_data_cols() const;
  inline void clear_data_cols();
  static const int kDataColsFieldNumber = 2;
  inline ::google::protobuf::uint32 data_cols() const;
  inline void set_data_cols(::google::protobuf::uint32 value);

  // repeated uint32 data = 3 [packed = true];
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline ::google::protobuf::uint32 data(int index) const;
  inline void set_data(int index, ::google::protobuf::uint32 value);
  inline void add_data(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      data() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_data();

  // required uint32 mask_rows = 4;
  inline bool has_mask_rows() const;
  inline void clear_mask_rows();
  static const int kMaskRowsFieldNumber = 4;
  inline ::google::protobuf::uint32 mask_rows() const;
  inline void set_mask_rows(::google::protobuf::uint32 value);

  // required uint32 mask_cols = 5;
  inline bool has_mask_cols() const;
  inline void clear_mask_cols();
  static const int kMaskColsFieldNumber = 5;
  inline ::google::protobuf::uint32 mask_cols() const;
  inline void set_mask_cols(::google::protobuf::uint32 value);

  // repeated float mask = 6 [packed = true];
  inline int mask_size() const;
  inline void clear_mask();
  static const int kMaskFieldNumber = 6;
  inline float mask(int index) const;
  inline void set_mask(int index, float value);
  inline void add_mask(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      mask() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_mask();

  // @@protoc_insertion_point(class_scope:gsbn.StimRawData)
 private:
  inline void set_has_data_rows();
  inline void clear_has_data_rows();
  inline void set_has_data_cols();
  inline void clear_has_data_cols();
  inline void set_has_mask_rows();
  inline void clear_has_mask_rows();
  inline void set_has_mask_cols();
  inline void clear_has_mask_cols();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 data_rows_;
  ::google::protobuf::uint32 data_cols_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > data_;
  mutable int _data_cached_byte_size_;
  ::google::protobuf::uint32 mask_rows_;
  ::google::protobuf::uint32 mask_cols_;
  ::google::protobuf::RepeatedField< float > mask_;
  mutable int _mask_cached_byte_size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_gsbn_2eproto();
  friend void protobuf_AssignDesc_gsbn_2eproto();
  friend void protobuf_ShutdownFile_gsbn_2eproto();

  void InitAsDefaultInstance();
  static StimRawData* default_instance_;
};
// ===================================================================


// ===================================================================

// SolverParam

// required .gsbn.GenParam gen_param = 1;
inline bool SolverParam::has_gen_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SolverParam::set_has_gen_param() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SolverParam::clear_has_gen_param() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SolverParam::clear_gen_param() {
  if (gen_param_ != NULL) gen_param_->::gsbn::GenParam::Clear();
  clear_has_gen_param();
}
inline const ::gsbn::GenParam& SolverParam::gen_param() const {
  return gen_param_ != NULL ? *gen_param_ : *default_instance_->gen_param_;
}
inline ::gsbn::GenParam* SolverParam::mutable_gen_param() {
  set_has_gen_param();
  if (gen_param_ == NULL) gen_param_ = new ::gsbn::GenParam;
  return gen_param_;
}
inline ::gsbn::GenParam* SolverParam::release_gen_param() {
  clear_has_gen_param();
  ::gsbn::GenParam* temp = gen_param_;
  gen_param_ = NULL;
  return temp;
}
inline void SolverParam::set_allocated_gen_param(::gsbn::GenParam* gen_param) {
  delete gen_param_;
  gen_param_ = gen_param;
  if (gen_param) {
    set_has_gen_param();
  } else {
    clear_has_gen_param();
  }
}

// required .gsbn.NetParam net_param = 2;
inline bool SolverParam::has_net_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SolverParam::set_has_net_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SolverParam::clear_has_net_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SolverParam::clear_net_param() {
  if (net_param_ != NULL) net_param_->::gsbn::NetParam::Clear();
  clear_has_net_param();
}
inline const ::gsbn::NetParam& SolverParam::net_param() const {
  return net_param_ != NULL ? *net_param_ : *default_instance_->net_param_;
}
inline ::gsbn::NetParam* SolverParam::mutable_net_param() {
  set_has_net_param();
  if (net_param_ == NULL) net_param_ = new ::gsbn::NetParam;
  return net_param_;
}
inline ::gsbn::NetParam* SolverParam::release_net_param() {
  clear_has_net_param();
  ::gsbn::NetParam* temp = net_param_;
  net_param_ = NULL;
  return temp;
}
inline void SolverParam::set_allocated_net_param(::gsbn::NetParam* net_param) {
  delete net_param_;
  net_param_ = net_param;
  if (net_param) {
    set_has_net_param();
  } else {
    clear_has_net_param();
  }
}

// required .gsbn.RecParam rec_param = 3;
inline bool SolverParam::has_rec_param() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SolverParam::set_has_rec_param() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SolverParam::clear_has_rec_param() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SolverParam::clear_rec_param() {
  if (rec_param_ != NULL) rec_param_->::gsbn::RecParam::Clear();
  clear_has_rec_param();
}
inline const ::gsbn::RecParam& SolverParam::rec_param() const {
  return rec_param_ != NULL ? *rec_param_ : *default_instance_->rec_param_;
}
inline ::gsbn::RecParam* SolverParam::mutable_rec_param() {
  set_has_rec_param();
  if (rec_param_ == NULL) rec_param_ = new ::gsbn::RecParam;
  return rec_param_;
}
inline ::gsbn::RecParam* SolverParam::release_rec_param() {
  clear_has_rec_param();
  ::gsbn::RecParam* temp = rec_param_;
  rec_param_ = NULL;
  return temp;
}
inline void SolverParam::set_allocated_rec_param(::gsbn::RecParam* rec_param) {
  delete rec_param_;
  rec_param_ = rec_param;
  if (rec_param) {
    set_has_rec_param();
  } else {
    clear_has_rec_param();
  }
}

// repeated .gsbn.ProcParam proc_param = 4;
inline int SolverParam::proc_param_size() const {
  return proc_param_.size();
}
inline void SolverParam::clear_proc_param() {
  proc_param_.Clear();
}
inline const ::gsbn::ProcParam& SolverParam::proc_param(int index) const {
  return proc_param_.Get(index);
}
inline ::gsbn::ProcParam* SolverParam::mutable_proc_param(int index) {
  return proc_param_.Mutable(index);
}
inline ::gsbn::ProcParam* SolverParam::add_proc_param() {
  return proc_param_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gsbn::ProcParam >&
SolverParam::proc_param() const {
  return proc_param_;
}
inline ::google::protobuf::RepeatedPtrField< ::gsbn::ProcParam >*
SolverParam::mutable_proc_param() {
  return &proc_param_;
}

// -------------------------------------------------------------------

// GenParam

// optional string stim_file = 1;
inline bool GenParam::has_stim_file() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GenParam::set_has_stim_file() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GenParam::clear_has_stim_file() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GenParam::clear_stim_file() {
  if (stim_file_ != &::google::protobuf::internal::kEmptyString) {
    stim_file_->clear();
  }
  clear_has_stim_file();
}
inline const ::std::string& GenParam::stim_file() const {
  return *stim_file_;
}
inline void GenParam::set_stim_file(const ::std::string& value) {
  set_has_stim_file();
  if (stim_file_ == &::google::protobuf::internal::kEmptyString) {
    stim_file_ = new ::std::string;
  }
  stim_file_->assign(value);
}
inline void GenParam::set_stim_file(const char* value) {
  set_has_stim_file();
  if (stim_file_ == &::google::protobuf::internal::kEmptyString) {
    stim_file_ = new ::std::string;
  }
  stim_file_->assign(value);
}
inline void GenParam::set_stim_file(const char* value, size_t size) {
  set_has_stim_file();
  if (stim_file_ == &::google::protobuf::internal::kEmptyString) {
    stim_file_ = new ::std::string;
  }
  stim_file_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GenParam::mutable_stim_file() {
  set_has_stim_file();
  if (stim_file_ == &::google::protobuf::internal::kEmptyString) {
    stim_file_ = new ::std::string;
  }
  return stim_file_;
}
inline ::std::string* GenParam::release_stim_file() {
  clear_has_stim_file();
  if (stim_file_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stim_file_;
    stim_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GenParam::set_allocated_stim_file(::std::string* stim_file) {
  if (stim_file_ != &::google::protobuf::internal::kEmptyString) {
    delete stim_file_;
  }
  if (stim_file) {
    set_has_stim_file();
    stim_file_ = stim_file;
  } else {
    clear_has_stim_file();
    stim_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required float dt = 2;
inline bool GenParam::has_dt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GenParam::set_has_dt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GenParam::clear_has_dt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GenParam::clear_dt() {
  dt_ = 0;
  clear_has_dt();
}
inline float GenParam::dt() const {
  return dt_;
}
inline void GenParam::set_dt(float value) {
  set_has_dt();
  dt_ = value;
}

// required float eps = 3 [default = 0.001];
inline bool GenParam::has_eps() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GenParam::set_has_eps() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GenParam::clear_has_eps() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GenParam::clear_eps() {
  eps_ = 0.001f;
  clear_has_eps();
}
inline float GenParam::eps() const {
  return eps_;
}
inline void GenParam::set_eps(float value) {
  set_has_eps();
  eps_ = value;
}

// repeated .gsbn.ModeParam mode_param = 4;
inline int GenParam::mode_param_size() const {
  return mode_param_.size();
}
inline void GenParam::clear_mode_param() {
  mode_param_.Clear();
}
inline const ::gsbn::ModeParam& GenParam::mode_param(int index) const {
  return mode_param_.Get(index);
}
inline ::gsbn::ModeParam* GenParam::mutable_mode_param(int index) {
  return mode_param_.Mutable(index);
}
inline ::gsbn::ModeParam* GenParam::add_mode_param() {
  return mode_param_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gsbn::ModeParam >&
GenParam::mode_param() const {
  return mode_param_;
}
inline ::google::protobuf::RepeatedPtrField< ::gsbn::ModeParam >*
GenParam::mutable_mode_param() {
  return &mode_param_;
}

// repeated string procedure = 5;
inline int GenParam::procedure_size() const {
  return procedure_.size();
}
inline void GenParam::clear_procedure() {
  procedure_.Clear();
}
inline const ::std::string& GenParam::procedure(int index) const {
  return procedure_.Get(index);
}
inline ::std::string* GenParam::mutable_procedure(int index) {
  return procedure_.Mutable(index);
}
inline void GenParam::set_procedure(int index, const ::std::string& value) {
  procedure_.Mutable(index)->assign(value);
}
inline void GenParam::set_procedure(int index, const char* value) {
  procedure_.Mutable(index)->assign(value);
}
inline void GenParam::set_procedure(int index, const char* value, size_t size) {
  procedure_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GenParam::add_procedure() {
  return procedure_.Add();
}
inline void GenParam::add_procedure(const ::std::string& value) {
  procedure_.Add()->assign(value);
}
inline void GenParam::add_procedure(const char* value) {
  procedure_.Add()->assign(value);
}
inline void GenParam::add_procedure(const char* value, size_t size) {
  procedure_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GenParam::procedure() const {
  return procedure_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GenParam::mutable_procedure() {
  return &procedure_;
}

// -------------------------------------------------------------------

// ModeParam

// required float begin_time = 1;
inline bool ModeParam::has_begin_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ModeParam::set_has_begin_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ModeParam::clear_has_begin_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ModeParam::clear_begin_time() {
  begin_time_ = 0;
  clear_has_begin_time();
}
inline float ModeParam::begin_time() const {
  return begin_time_;
}
inline void ModeParam::set_begin_time(float value) {
  set_has_begin_time();
  begin_time_ = value;
}

// required float end_time = 2;
inline bool ModeParam::has_end_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ModeParam::set_has_end_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ModeParam::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ModeParam::clear_end_time() {
  end_time_ = 0;
  clear_has_end_time();
}
inline float ModeParam::end_time() const {
  return end_time_;
}
inline void ModeParam::set_end_time(float value) {
  set_has_end_time();
  end_time_ = value;
}

// optional uint32 begin_lgidx_id = 3 [default = 0];
inline bool ModeParam::has_begin_lgidx_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ModeParam::set_has_begin_lgidx_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ModeParam::clear_has_begin_lgidx_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ModeParam::clear_begin_lgidx_id() {
  begin_lgidx_id_ = 0u;
  clear_has_begin_lgidx_id();
}
inline ::google::protobuf::uint32 ModeParam::begin_lgidx_id() const {
  return begin_lgidx_id_;
}
inline void ModeParam::set_begin_lgidx_id(::google::protobuf::uint32 value) {
  set_has_begin_lgidx_id();
  begin_lgidx_id_ = value;
}

// optional uint32 begin_lgexp_id = 4 [default = 0];
inline bool ModeParam::has_begin_lgexp_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ModeParam::set_has_begin_lgexp_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ModeParam::clear_has_begin_lgexp_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ModeParam::clear_begin_lgexp_id() {
  begin_lgexp_id_ = 0u;
  clear_has_begin_lgexp_id();
}
inline ::google::protobuf::uint32 ModeParam::begin_lgexp_id() const {
  return begin_lgexp_id_;
}
inline void ModeParam::set_begin_lgexp_id(::google::protobuf::uint32 value) {
  set_has_begin_lgexp_id();
  begin_lgexp_id_ = value;
}

// optional uint32 begin_wmask_id = 5 [default = 0];
inline bool ModeParam::has_begin_wmask_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ModeParam::set_has_begin_wmask_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ModeParam::clear_has_begin_wmask_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ModeParam::clear_begin_wmask_id() {
  begin_wmask_id_ = 0u;
  clear_has_begin_wmask_id();
}
inline ::google::protobuf::uint32 ModeParam::begin_wmask_id() const {
  return begin_wmask_id_;
}
inline void ModeParam::set_begin_wmask_id(::google::protobuf::uint32 value) {
  set_has_begin_wmask_id();
  begin_wmask_id_ = value;
}

// optional uint32 time_step = 6 [default = 1];
inline bool ModeParam::has_time_step() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ModeParam::set_has_time_step() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ModeParam::clear_has_time_step() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ModeParam::clear_time_step() {
  time_step_ = 1u;
  clear_has_time_step();
}
inline ::google::protobuf::uint32 ModeParam::time_step() const {
  return time_step_;
}
inline void ModeParam::set_time_step(::google::protobuf::uint32 value) {
  set_has_time_step();
  time_step_ = value;
}

// optional uint32 lgidx_step = 7 [default = 1];
inline bool ModeParam::has_lgidx_step() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ModeParam::set_has_lgidx_step() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ModeParam::clear_has_lgidx_step() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ModeParam::clear_lgidx_step() {
  lgidx_step_ = 1u;
  clear_has_lgidx_step();
}
inline ::google::protobuf::uint32 ModeParam::lgidx_step() const {
  return lgidx_step_;
}
inline void ModeParam::set_lgidx_step(::google::protobuf::uint32 value) {
  set_has_lgidx_step();
  lgidx_step_ = value;
}

// optional uint32 lgexp_step = 8 [default = 1];
inline bool ModeParam::has_lgexp_step() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ModeParam::set_has_lgexp_step() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ModeParam::clear_has_lgexp_step() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ModeParam::clear_lgexp_step() {
  lgexp_step_ = 1u;
  clear_has_lgexp_step();
}
inline ::google::protobuf::uint32 ModeParam::lgexp_step() const {
  return lgexp_step_;
}
inline void ModeParam::set_lgexp_step(::google::protobuf::uint32 value) {
  set_has_lgexp_step();
  lgexp_step_ = value;
}

// optional uint32 wmask_step = 9 [default = 1];
inline bool ModeParam::has_wmask_step() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ModeParam::set_has_wmask_step() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ModeParam::clear_has_wmask_step() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ModeParam::clear_wmask_step() {
  wmask_step_ = 1u;
  clear_has_wmask_step();
}
inline ::google::protobuf::uint32 ModeParam::wmask_step() const {
  return wmask_step_;
}
inline void ModeParam::set_wmask_step(::google::protobuf::uint32 value) {
  set_has_wmask_step();
  wmask_step_ = value;
}

// optional float prn = 10 [default = 1];
inline bool ModeParam::has_prn() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ModeParam::set_has_prn() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ModeParam::clear_has_prn() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ModeParam::clear_prn() {
  prn_ = 1;
  clear_has_prn();
}
inline float ModeParam::prn() const {
  return prn_;
}
inline void ModeParam::set_prn(float value) {
  set_has_prn();
  prn_ = value;
}

// optional uint32 plasticity = 11 [default = 1];
inline bool ModeParam::has_plasticity() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ModeParam::set_has_plasticity() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ModeParam::clear_has_plasticity() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ModeParam::clear_plasticity() {
  plasticity_ = 1u;
  clear_has_plasticity();
}
inline ::google::protobuf::uint32 ModeParam::plasticity() const {
  return plasticity_;
}
inline void ModeParam::set_plasticity(::google::protobuf::uint32 value) {
  set_has_plasticity();
  plasticity_ = value;
}

// -------------------------------------------------------------------

// NetParam

// repeated .gsbn.PopParam pop_param = 1;
inline int NetParam::pop_param_size() const {
  return pop_param_.size();
}
inline void NetParam::clear_pop_param() {
  pop_param_.Clear();
}
inline const ::gsbn::PopParam& NetParam::pop_param(int index) const {
  return pop_param_.Get(index);
}
inline ::gsbn::PopParam* NetParam::mutable_pop_param(int index) {
  return pop_param_.Mutable(index);
}
inline ::gsbn::PopParam* NetParam::add_pop_param() {
  return pop_param_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gsbn::PopParam >&
NetParam::pop_param() const {
  return pop_param_;
}
inline ::google::protobuf::RepeatedPtrField< ::gsbn::PopParam >*
NetParam::mutable_pop_param() {
  return &pop_param_;
}

// repeated .gsbn.ProjParam proj_param = 2;
inline int NetParam::proj_param_size() const {
  return proj_param_.size();
}
inline void NetParam::clear_proj_param() {
  proj_param_.Clear();
}
inline const ::gsbn::ProjParam& NetParam::proj_param(int index) const {
  return proj_param_.Get(index);
}
inline ::gsbn::ProjParam* NetParam::mutable_proj_param(int index) {
  return proj_param_.Mutable(index);
}
inline ::gsbn::ProjParam* NetParam::add_proj_param() {
  return proj_param_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gsbn::ProjParam >&
NetParam::proj_param() const {
  return proj_param_;
}
inline ::google::protobuf::RepeatedPtrField< ::gsbn::ProjParam >*
NetParam::mutable_proj_param() {
  return &proj_param_;
}

// -------------------------------------------------------------------

// PopParam

// required uint32 pop_num = 1;
inline bool PopParam::has_pop_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PopParam::set_has_pop_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PopParam::clear_has_pop_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PopParam::clear_pop_num() {
  pop_num_ = 0u;
  clear_has_pop_num();
}
inline ::google::protobuf::uint32 PopParam::pop_num() const {
  return pop_num_;
}
inline void PopParam::set_pop_num(::google::protobuf::uint32 value) {
  set_has_pop_num();
  pop_num_ = value;
}

// required uint32 hcu_num = 2;
inline bool PopParam::has_hcu_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PopParam::set_has_hcu_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PopParam::clear_has_hcu_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PopParam::clear_hcu_num() {
  hcu_num_ = 0u;
  clear_has_hcu_num();
}
inline ::google::protobuf::uint32 PopParam::hcu_num() const {
  return hcu_num_;
}
inline void PopParam::set_hcu_num(::google::protobuf::uint32 value) {
  set_has_hcu_num();
  hcu_num_ = value;
}

// required uint32 mcu_num = 3;
inline bool PopParam::has_mcu_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PopParam::set_has_mcu_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PopParam::clear_has_mcu_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PopParam::clear_mcu_num() {
  mcu_num_ = 0u;
  clear_has_mcu_num();
}
inline ::google::protobuf::uint32 PopParam::mcu_num() const {
  return mcu_num_;
}
inline void PopParam::set_mcu_num(::google::protobuf::uint32 value) {
  set_has_mcu_num();
  mcu_num_ = value;
}

// required uint32 fanout_num = 4;
inline bool PopParam::has_fanout_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PopParam::set_has_fanout_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PopParam::clear_has_fanout_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PopParam::clear_fanout_num() {
  fanout_num_ = 0u;
  clear_has_fanout_num();
}
inline ::google::protobuf::uint32 PopParam::fanout_num() const {
  return fanout_num_;
}
inline void PopParam::set_fanout_num(::google::protobuf::uint32 value) {
  set_has_fanout_num();
  fanout_num_ = value;
}

// optional float taum = 5 [default = 0.01];
inline bool PopParam::has_taum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PopParam::set_has_taum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PopParam::clear_has_taum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PopParam::clear_taum() {
  taum_ = 0.01f;
  clear_has_taum();
}
inline float PopParam::taum() const {
  return taum_;
}
inline void PopParam::set_taum(float value) {
  set_has_taum();
  taum_ = value;
}

// optional float wtagain = 6 [default = 4];
inline bool PopParam::has_wtagain() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PopParam::set_has_wtagain() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PopParam::clear_has_wtagain() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PopParam::clear_wtagain() {
  wtagain_ = 4;
  clear_has_wtagain();
}
inline float PopParam::wtagain() const {
  return wtagain_;
}
inline void PopParam::set_wtagain(float value) {
  set_has_wtagain();
  wtagain_ = value;
}

// optional float maxfq = 7 [default = 100];
inline bool PopParam::has_maxfq() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PopParam::set_has_maxfq() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PopParam::clear_has_maxfq() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PopParam::clear_maxfq() {
  maxfq_ = 100;
  clear_has_maxfq();
}
inline float PopParam::maxfq() const {
  return maxfq_;
}
inline void PopParam::set_maxfq(float value) {
  set_has_maxfq();
  maxfq_ = value;
}

// optional float igain = 8 [default = 1];
inline bool PopParam::has_igain() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PopParam::set_has_igain() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PopParam::clear_has_igain() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PopParam::clear_igain() {
  igain_ = 1;
  clear_has_igain();
}
inline float PopParam::igain() const {
  return igain_;
}
inline void PopParam::set_igain(float value) {
  set_has_igain();
  igain_ = value;
}

// optional float wgain = 9 [default = 1];
inline bool PopParam::has_wgain() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PopParam::set_has_wgain() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PopParam::clear_has_wgain() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PopParam::clear_wgain() {
  wgain_ = 1;
  clear_has_wgain();
}
inline float PopParam::wgain() const {
  return wgain_;
}
inline void PopParam::set_wgain(float value) {
  set_has_wgain();
  wgain_ = value;
}

// optional float lgbias = 10 [default = 0];
inline bool PopParam::has_lgbias() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PopParam::set_has_lgbias() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PopParam::clear_has_lgbias() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PopParam::clear_lgbias() {
  lgbias_ = 0;
  clear_has_lgbias();
}
inline float PopParam::lgbias() const {
  return lgbias_;
}
inline void PopParam::set_lgbias(float value) {
  set_has_lgbias();
  lgbias_ = value;
}

// optional float snoise = 11 [default = 0];
inline bool PopParam::has_snoise() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PopParam::set_has_snoise() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PopParam::clear_has_snoise() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PopParam::clear_snoise() {
  snoise_ = 0;
  clear_has_snoise();
}
inline float PopParam::snoise() const {
  return snoise_;
}
inline void PopParam::set_snoise(float value) {
  set_has_snoise();
  snoise_ = value;
}

// optional float adgain = 12 [default = 1];
inline bool PopParam::has_adgain() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PopParam::set_has_adgain() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PopParam::clear_has_adgain() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PopParam::clear_adgain() {
  adgain_ = 1;
  clear_has_adgain();
}
inline float PopParam::adgain() const {
  return adgain_;
}
inline void PopParam::set_adgain(float value) {
  set_has_adgain();
  adgain_ = value;
}

// optional float taua = 13 [default = 0.05];
inline bool PopParam::has_taua() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PopParam::set_has_taua() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PopParam::clear_has_taua() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PopParam::clear_taua() {
  taua_ = 0.05f;
  clear_has_taua();
}
inline float PopParam::taua() const {
  return taua_;
}
inline void PopParam::set_taua(float value) {
  set_has_taua();
  taua_ = value;
}

// repeated int32 position = 15 [packed = true];
inline int PopParam::position_size() const {
  return position_.size();
}
inline void PopParam::clear_position() {
  position_.Clear();
}
inline ::google::protobuf::int32 PopParam::position(int index) const {
  return position_.Get(index);
}
inline void PopParam::set_position(int index, ::google::protobuf::int32 value) {
  position_.Set(index, value);
}
inline void PopParam::add_position(::google::protobuf::int32 value) {
  position_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PopParam::position() const {
  return position_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PopParam::mutable_position() {
  return &position_;
}

// repeated uint32 shape = 16 [packed = true];
inline int PopParam::shape_size() const {
  return shape_.size();
}
inline void PopParam::clear_shape() {
  shape_.Clear();
}
inline ::google::protobuf::uint32 PopParam::shape(int index) const {
  return shape_.Get(index);
}
inline void PopParam::set_shape(int index, ::google::protobuf::uint32 value) {
  shape_.Set(index, value);
}
inline void PopParam::add_shape(::google::protobuf::uint32 value) {
  shape_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PopParam::shape() const {
  return shape_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PopParam::mutable_shape() {
  return &shape_;
}

// optional uint32 type = 17 [default = 0];
inline bool PopParam::has_type() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void PopParam::set_has_type() {
  _has_bits_[0] |= 0x00008000u;
}
inline void PopParam::clear_has_type() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void PopParam::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 PopParam::type() const {
  return type_;
}
inline void PopParam::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional uint32 rank = 18 [default = 0];
inline bool PopParam::has_rank() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void PopParam::set_has_rank() {
  _has_bits_[0] |= 0x00010000u;
}
inline void PopParam::clear_has_rank() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void PopParam::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 PopParam::rank() const {
  return rank_;
}
inline void PopParam::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
}

// -------------------------------------------------------------------

// ProjParam

// required uint32 src_pop = 1;
inline bool ProjParam::has_src_pop() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProjParam::set_has_src_pop() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProjParam::clear_has_src_pop() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProjParam::clear_src_pop() {
  src_pop_ = 0u;
  clear_has_src_pop();
}
inline ::google::protobuf::uint32 ProjParam::src_pop() const {
  return src_pop_;
}
inline void ProjParam::set_src_pop(::google::protobuf::uint32 value) {
  set_has_src_pop();
  src_pop_ = value;
}

// required uint32 dest_pop = 2;
inline bool ProjParam::has_dest_pop() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProjParam::set_has_dest_pop() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProjParam::clear_has_dest_pop() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProjParam::clear_dest_pop() {
  dest_pop_ = 0u;
  clear_has_dest_pop();
}
inline ::google::protobuf::uint32 ProjParam::dest_pop() const {
  return dest_pop_;
}
inline void ProjParam::set_dest_pop(::google::protobuf::uint32 value) {
  set_has_dest_pop();
  dest_pop_ = value;
}

// required float tauzi = 3;
inline bool ProjParam::has_tauzi() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProjParam::set_has_tauzi() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProjParam::clear_has_tauzi() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProjParam::clear_tauzi() {
  tauzi_ = 0;
  clear_has_tauzi();
}
inline float ProjParam::tauzi() const {
  return tauzi_;
}
inline void ProjParam::set_tauzi(float value) {
  set_has_tauzi();
  tauzi_ = value;
}

// required float tauzj = 4;
inline bool ProjParam::has_tauzj() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProjParam::set_has_tauzj() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProjParam::clear_has_tauzj() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProjParam::clear_tauzj() {
  tauzj_ = 0;
  clear_has_tauzj();
}
inline float ProjParam::tauzj() const {
  return tauzj_;
}
inline void ProjParam::set_tauzj(float value) {
  set_has_tauzj();
  tauzj_ = value;
}

// required float taue = 5;
inline bool ProjParam::has_taue() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProjParam::set_has_taue() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProjParam::clear_has_taue() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProjParam::clear_taue() {
  taue_ = 0;
  clear_has_taue();
}
inline float ProjParam::taue() const {
  return taue_;
}
inline void ProjParam::set_taue(float value) {
  set_has_taue();
  taue_ = value;
}

// required float taup = 6;
inline bool ProjParam::has_taup() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProjParam::set_has_taup() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProjParam::clear_has_taup() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProjParam::clear_taup() {
  taup_ = 0;
  clear_has_taup();
}
inline float ProjParam::taup() const {
  return taup_;
}
inline void ProjParam::set_taup(float value) {
  set_has_taup();
  taup_ = value;
}

// optional float maxfq = 7 [default = 100];
inline bool ProjParam::has_maxfq() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProjParam::set_has_maxfq() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProjParam::clear_has_maxfq() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProjParam::clear_maxfq() {
  maxfq_ = 100;
  clear_has_maxfq();
}
inline float ProjParam::maxfq() const {
  return maxfq_;
}
inline void ProjParam::set_maxfq(float value) {
  set_has_maxfq();
  maxfq_ = value;
}

// optional float bgain = 8 [default = 0];
inline bool ProjParam::has_bgain() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProjParam::set_has_bgain() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProjParam::clear_has_bgain() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProjParam::clear_bgain() {
  bgain_ = 0;
  clear_has_bgain();
}
inline float ProjParam::bgain() const {
  return bgain_;
}
inline void ProjParam::set_bgain(float value) {
  set_has_bgain();
  bgain_ = value;
}

// optional float wgain = 9 [default = 0];
inline bool ProjParam::has_wgain() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ProjParam::set_has_wgain() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ProjParam::clear_has_wgain() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ProjParam::clear_wgain() {
  wgain_ = 0;
  clear_has_wgain();
}
inline float ProjParam::wgain() const {
  return wgain_;
}
inline void ProjParam::set_wgain(float value) {
  set_has_wgain();
  wgain_ = value;
}

// optional float tauepsc = 10;
inline bool ProjParam::has_tauepsc() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ProjParam::set_has_tauepsc() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ProjParam::clear_has_tauepsc() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ProjParam::clear_tauepsc() {
  tauepsc_ = 0;
  clear_has_tauepsc();
}
inline float ProjParam::tauepsc() const {
  return tauepsc_;
}
inline void ProjParam::set_tauepsc(float value) {
  set_has_tauepsc();
  tauepsc_ = value;
}

// required float slot_num = 11;
inline bool ProjParam::has_slot_num() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ProjParam::set_has_slot_num() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ProjParam::clear_has_slot_num() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ProjParam::clear_slot_num() {
  slot_num_ = 0;
  clear_has_slot_num();
}
inline float ProjParam::slot_num() const {
  return slot_num_;
}
inline void ProjParam::set_slot_num(float value) {
  set_has_slot_num();
  slot_num_ = value;
}

// optional float distance = 12 [default = 0];
inline bool ProjParam::has_distance() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ProjParam::set_has_distance() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ProjParam::clear_has_distance() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ProjParam::clear_distance() {
  distance_ = 0;
  clear_has_distance();
}
inline float ProjParam::distance() const {
  return distance_;
}
inline void ProjParam::set_distance(float value) {
  set_has_distance();
  distance_ = value;
}

// -------------------------------------------------------------------

// RecParam

// optional string directory = 1 [default = "."];
inline bool RecParam::has_directory() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RecParam::set_has_directory() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RecParam::clear_has_directory() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RecParam::clear_directory() {
  if (directory_ != _default_directory_) {
    directory_->assign(*_default_directory_);
  }
  clear_has_directory();
}
inline const ::std::string& RecParam::directory() const {
  return *directory_;
}
inline void RecParam::set_directory(const ::std::string& value) {
  set_has_directory();
  if (directory_ == _default_directory_) {
    directory_ = new ::std::string;
  }
  directory_->assign(value);
}
inline void RecParam::set_directory(const char* value) {
  set_has_directory();
  if (directory_ == _default_directory_) {
    directory_ = new ::std::string;
  }
  directory_->assign(value);
}
inline void RecParam::set_directory(const char* value, size_t size) {
  set_has_directory();
  if (directory_ == _default_directory_) {
    directory_ = new ::std::string;
  }
  directory_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RecParam::mutable_directory() {
  set_has_directory();
  if (directory_ == _default_directory_) {
    directory_ = new ::std::string(*_default_directory_);
  }
  return directory_;
}
inline ::std::string* RecParam::release_directory() {
  clear_has_directory();
  if (directory_ == _default_directory_) {
    return NULL;
  } else {
    ::std::string* temp = directory_;
    directory_ = const_cast< ::std::string*>(_default_directory_);
    return temp;
  }
}
inline void RecParam::set_allocated_directory(::std::string* directory) {
  if (directory_ != _default_directory_) {
    delete directory_;
  }
  if (directory) {
    set_has_directory();
    directory_ = directory;
  } else {
    clear_has_directory();
    directory_ = const_cast< ::std::string*>(_default_directory_);
  }
}

// -------------------------------------------------------------------

// ProcParam

// required string name = 1;
inline bool ProcParam::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProcParam::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProcParam::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProcParam::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ProcParam::name() const {
  return *name_;
}
inline void ProcParam::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ProcParam::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ProcParam::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProcParam::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ProcParam::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ProcParam::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .gsbn.ProcParamArgI argi = 2;
inline int ProcParam::argi_size() const {
  return argi_.size();
}
inline void ProcParam::clear_argi() {
  argi_.Clear();
}
inline const ::gsbn::ProcParamArgI& ProcParam::argi(int index) const {
  return argi_.Get(index);
}
inline ::gsbn::ProcParamArgI* ProcParam::mutable_argi(int index) {
  return argi_.Mutable(index);
}
inline ::gsbn::ProcParamArgI* ProcParam::add_argi() {
  return argi_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gsbn::ProcParamArgI >&
ProcParam::argi() const {
  return argi_;
}
inline ::google::protobuf::RepeatedPtrField< ::gsbn::ProcParamArgI >*
ProcParam::mutable_argi() {
  return &argi_;
}

// repeated .gsbn.ProcParamArgF argf = 3;
inline int ProcParam::argf_size() const {
  return argf_.size();
}
inline void ProcParam::clear_argf() {
  argf_.Clear();
}
inline const ::gsbn::ProcParamArgF& ProcParam::argf(int index) const {
  return argf_.Get(index);
}
inline ::gsbn::ProcParamArgF* ProcParam::mutable_argf(int index) {
  return argf_.Mutable(index);
}
inline ::gsbn::ProcParamArgF* ProcParam::add_argf() {
  return argf_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gsbn::ProcParamArgF >&
ProcParam::argf() const {
  return argf_;
}
inline ::google::protobuf::RepeatedPtrField< ::gsbn::ProcParamArgF >*
ProcParam::mutable_argf() {
  return &argf_;
}

// repeated .gsbn.ProcParamArgS args = 4;
inline int ProcParam::args_size() const {
  return args_.size();
}
inline void ProcParam::clear_args() {
  args_.Clear();
}
inline const ::gsbn::ProcParamArgS& ProcParam::args(int index) const {
  return args_.Get(index);
}
inline ::gsbn::ProcParamArgS* ProcParam::mutable_args(int index) {
  return args_.Mutable(index);
}
inline ::gsbn::ProcParamArgS* ProcParam::add_args() {
  return args_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gsbn::ProcParamArgS >&
ProcParam::args() const {
  return args_;
}
inline ::google::protobuf::RepeatedPtrField< ::gsbn::ProcParamArgS >*
ProcParam::mutable_args() {
  return &args_;
}

// -------------------------------------------------------------------

// ProcParamArgI

// required string key = 1;
inline bool ProcParamArgI::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProcParamArgI::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProcParamArgI::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProcParamArgI::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& ProcParamArgI::key() const {
  return *key_;
}
inline void ProcParamArgI::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void ProcParamArgI::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void ProcParamArgI::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProcParamArgI::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* ProcParamArgI::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ProcParamArgI::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 val = 2;
inline bool ProcParamArgI::has_val() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProcParamArgI::set_has_val() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProcParamArgI::clear_has_val() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProcParamArgI::clear_val() {
  val_ = 0;
  clear_has_val();
}
inline ::google::protobuf::int32 ProcParamArgI::val() const {
  return val_;
}
inline void ProcParamArgI::set_val(::google::protobuf::int32 value) {
  set_has_val();
  val_ = value;
}

// -------------------------------------------------------------------

// ProcParamArgF

// required string key = 1;
inline bool ProcParamArgF::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProcParamArgF::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProcParamArgF::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProcParamArgF::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& ProcParamArgF::key() const {
  return *key_;
}
inline void ProcParamArgF::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void ProcParamArgF::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void ProcParamArgF::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProcParamArgF::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* ProcParamArgF::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ProcParamArgF::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required float val = 2;
inline bool ProcParamArgF::has_val() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProcParamArgF::set_has_val() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProcParamArgF::clear_has_val() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProcParamArgF::clear_val() {
  val_ = 0;
  clear_has_val();
}
inline float ProcParamArgF::val() const {
  return val_;
}
inline void ProcParamArgF::set_val(float value) {
  set_has_val();
  val_ = value;
}

// -------------------------------------------------------------------

// ProcParamArgS

// required string key = 1;
inline bool ProcParamArgS::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProcParamArgS::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProcParamArgS::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProcParamArgS::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& ProcParamArgS::key() const {
  return *key_;
}
inline void ProcParamArgS::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void ProcParamArgS::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void ProcParamArgS::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProcParamArgS::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* ProcParamArgS::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ProcParamArgS::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string val = 2;
inline bool ProcParamArgS::has_val() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProcParamArgS::set_has_val() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProcParamArgS::clear_has_val() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProcParamArgS::clear_val() {
  if (val_ != &::google::protobuf::internal::kEmptyString) {
    val_->clear();
  }
  clear_has_val();
}
inline const ::std::string& ProcParamArgS::val() const {
  return *val_;
}
inline void ProcParamArgS::set_val(const ::std::string& value) {
  set_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    val_ = new ::std::string;
  }
  val_->assign(value);
}
inline void ProcParamArgS::set_val(const char* value) {
  set_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    val_ = new ::std::string;
  }
  val_->assign(value);
}
inline void ProcParamArgS::set_val(const char* value, size_t size) {
  set_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    val_ = new ::std::string;
  }
  val_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProcParamArgS::mutable_val() {
  set_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    val_ = new ::std::string;
  }
  return val_;
}
inline ::std::string* ProcParamArgS::release_val() {
  clear_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = val_;
    val_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ProcParamArgS::set_allocated_val(::std::string* val) {
  if (val_ != &::google::protobuf::internal::kEmptyString) {
    delete val_;
  }
  if (val) {
    set_has_val();
    val_ = val;
  } else {
    clear_has_val();
    val_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SolverState

// required float timestamp = 1;
inline bool SolverState::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SolverState::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SolverState::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SolverState::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline float SolverState::timestamp() const {
  return timestamp_;
}
inline void SolverState::set_timestamp(float value) {
  set_has_timestamp();
  timestamp_ = value;
}

// required float prn = 2;
inline bool SolverState::has_prn() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SolverState::set_has_prn() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SolverState::clear_has_prn() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SolverState::clear_prn() {
  prn_ = 0;
  clear_has_prn();
}
inline float SolverState::prn() const {
  return prn_;
}
inline void SolverState::set_prn(float value) {
  set_has_prn();
  prn_ = value;
}

// repeated .gsbn.TableState table_state = 3;
inline int SolverState::table_state_size() const {
  return table_state_.size();
}
inline void SolverState::clear_table_state() {
  table_state_.Clear();
}
inline const ::gsbn::TableState& SolverState::table_state(int index) const {
  return table_state_.Get(index);
}
inline ::gsbn::TableState* SolverState::mutable_table_state(int index) {
  return table_state_.Mutable(index);
}
inline ::gsbn::TableState* SolverState::add_table_state() {
  return table_state_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gsbn::TableState >&
SolverState::table_state() const {
  return table_state_;
}
inline ::google::protobuf::RepeatedPtrField< ::gsbn::TableState >*
SolverState::mutable_table_state() {
  return &table_state_;
}

// repeated .gsbn.VectorStateI8 vector_state_i8 = 4;
inline int SolverState::vector_state_i8_size() const {
  return vector_state_i8_.size();
}
inline void SolverState::clear_vector_state_i8() {
  vector_state_i8_.Clear();
}
inline const ::gsbn::VectorStateI8& SolverState::vector_state_i8(int index) const {
  return vector_state_i8_.Get(index);
}
inline ::gsbn::VectorStateI8* SolverState::mutable_vector_state_i8(int index) {
  return vector_state_i8_.Mutable(index);
}
inline ::gsbn::VectorStateI8* SolverState::add_vector_state_i8() {
  return vector_state_i8_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gsbn::VectorStateI8 >&
SolverState::vector_state_i8() const {
  return vector_state_i8_;
}
inline ::google::protobuf::RepeatedPtrField< ::gsbn::VectorStateI8 >*
SolverState::mutable_vector_state_i8() {
  return &vector_state_i8_;
}

// repeated .gsbn.VectorStateI16 vector_state_i16 = 5;
inline int SolverState::vector_state_i16_size() const {
  return vector_state_i16_.size();
}
inline void SolverState::clear_vector_state_i16() {
  vector_state_i16_.Clear();
}
inline const ::gsbn::VectorStateI16& SolverState::vector_state_i16(int index) const {
  return vector_state_i16_.Get(index);
}
inline ::gsbn::VectorStateI16* SolverState::mutable_vector_state_i16(int index) {
  return vector_state_i16_.Mutable(index);
}
inline ::gsbn::VectorStateI16* SolverState::add_vector_state_i16() {
  return vector_state_i16_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gsbn::VectorStateI16 >&
SolverState::vector_state_i16() const {
  return vector_state_i16_;
}
inline ::google::protobuf::RepeatedPtrField< ::gsbn::VectorStateI16 >*
SolverState::mutable_vector_state_i16() {
  return &vector_state_i16_;
}

// repeated .gsbn.VectorStateI32 vector_state_i32 = 6;
inline int SolverState::vector_state_i32_size() const {
  return vector_state_i32_.size();
}
inline void SolverState::clear_vector_state_i32() {
  vector_state_i32_.Clear();
}
inline const ::gsbn::VectorStateI32& SolverState::vector_state_i32(int index) const {
  return vector_state_i32_.Get(index);
}
inline ::gsbn::VectorStateI32* SolverState::mutable_vector_state_i32(int index) {
  return vector_state_i32_.Mutable(index);
}
inline ::gsbn::VectorStateI32* SolverState::add_vector_state_i32() {
  return vector_state_i32_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gsbn::VectorStateI32 >&
SolverState::vector_state_i32() const {
  return vector_state_i32_;
}
inline ::google::protobuf::RepeatedPtrField< ::gsbn::VectorStateI32 >*
SolverState::mutable_vector_state_i32() {
  return &vector_state_i32_;
}

// repeated .gsbn.VectorStateI64 vector_state_i64 = 7;
inline int SolverState::vector_state_i64_size() const {
  return vector_state_i64_.size();
}
inline void SolverState::clear_vector_state_i64() {
  vector_state_i64_.Clear();
}
inline const ::gsbn::VectorStateI64& SolverState::vector_state_i64(int index) const {
  return vector_state_i64_.Get(index);
}
inline ::gsbn::VectorStateI64* SolverState::mutable_vector_state_i64(int index) {
  return vector_state_i64_.Mutable(index);
}
inline ::gsbn::VectorStateI64* SolverState::add_vector_state_i64() {
  return vector_state_i64_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gsbn::VectorStateI64 >&
SolverState::vector_state_i64() const {
  return vector_state_i64_;
}
inline ::google::protobuf::RepeatedPtrField< ::gsbn::VectorStateI64 >*
SolverState::mutable_vector_state_i64() {
  return &vector_state_i64_;
}

// repeated .gsbn.VectorStateF16 vector_state_f16 = 8;
inline int SolverState::vector_state_f16_size() const {
  return vector_state_f16_.size();
}
inline void SolverState::clear_vector_state_f16() {
  vector_state_f16_.Clear();
}
inline const ::gsbn::VectorStateF16& SolverState::vector_state_f16(int index) const {
  return vector_state_f16_.Get(index);
}
inline ::gsbn::VectorStateF16* SolverState::mutable_vector_state_f16(int index) {
  return vector_state_f16_.Mutable(index);
}
inline ::gsbn::VectorStateF16* SolverState::add_vector_state_f16() {
  return vector_state_f16_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gsbn::VectorStateF16 >&
SolverState::vector_state_f16() const {
  return vector_state_f16_;
}
inline ::google::protobuf::RepeatedPtrField< ::gsbn::VectorStateF16 >*
SolverState::mutable_vector_state_f16() {
  return &vector_state_f16_;
}

// repeated .gsbn.VectorStateF32 vector_state_f32 = 9;
inline int SolverState::vector_state_f32_size() const {
  return vector_state_f32_.size();
}
inline void SolverState::clear_vector_state_f32() {
  vector_state_f32_.Clear();
}
inline const ::gsbn::VectorStateF32& SolverState::vector_state_f32(int index) const {
  return vector_state_f32_.Get(index);
}
inline ::gsbn::VectorStateF32* SolverState::mutable_vector_state_f32(int index) {
  return vector_state_f32_.Mutable(index);
}
inline ::gsbn::VectorStateF32* SolverState::add_vector_state_f32() {
  return vector_state_f32_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gsbn::VectorStateF32 >&
SolverState::vector_state_f32() const {
  return vector_state_f32_;
}
inline ::google::protobuf::RepeatedPtrField< ::gsbn::VectorStateF32 >*
SolverState::mutable_vector_state_f32() {
  return &vector_state_f32_;
}

// repeated .gsbn.VectorStateF64 vector_state_f64 = 10;
inline int SolverState::vector_state_f64_size() const {
  return vector_state_f64_.size();
}
inline void SolverState::clear_vector_state_f64() {
  vector_state_f64_.Clear();
}
inline const ::gsbn::VectorStateF64& SolverState::vector_state_f64(int index) const {
  return vector_state_f64_.Get(index);
}
inline ::gsbn::VectorStateF64* SolverState::mutable_vector_state_f64(int index) {
  return vector_state_f64_.Mutable(index);
}
inline ::gsbn::VectorStateF64* SolverState::add_vector_state_f64() {
  return vector_state_f64_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gsbn::VectorStateF64 >&
SolverState::vector_state_f64() const {
  return vector_state_f64_;
}
inline ::google::protobuf::RepeatedPtrField< ::gsbn::VectorStateF64 >*
SolverState::mutable_vector_state_f64() {
  return &vector_state_f64_;
}

// -------------------------------------------------------------------

// TableState

// required string name = 1;
inline bool TableState::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TableState::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TableState::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TableState::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& TableState::name() const {
  return *name_;
}
inline void TableState::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void TableState::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void TableState::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TableState::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* TableState::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TableState::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes desc = 2;
inline bool TableState::has_desc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TableState::set_has_desc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TableState::clear_has_desc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TableState::clear_desc() {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    desc_->clear();
  }
  clear_has_desc();
}
inline const ::std::string& TableState::desc() const {
  return *desc_;
}
inline void TableState::set_desc(const ::std::string& value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void TableState::set_desc(const char* value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void TableState::set_desc(const void* value, size_t size) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TableState::mutable_desc() {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  return desc_;
}
inline ::std::string* TableState::release_desc() {
  clear_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = desc_;
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TableState::set_allocated_desc(::std::string* desc) {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (desc) {
    set_has_desc();
    desc_ = desc;
  } else {
    clear_has_desc();
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes data = 3;
inline bool TableState::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TableState::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TableState::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TableState::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& TableState::data() const {
  return *data_;
}
inline void TableState::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void TableState::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void TableState::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TableState::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* TableState::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TableState::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// VectorStateI8

// required string name = 1;
inline bool VectorStateI8::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VectorStateI8::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VectorStateI8::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VectorStateI8::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& VectorStateI8::name() const {
  return *name_;
}
inline void VectorStateI8::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void VectorStateI8::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void VectorStateI8::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VectorStateI8::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* VectorStateI8::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VectorStateI8::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 ld = 2 [default = 1];
inline bool VectorStateI8::has_ld() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VectorStateI8::set_has_ld() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VectorStateI8::clear_has_ld() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VectorStateI8::clear_ld() {
  ld_ = 1u;
  clear_has_ld();
}
inline ::google::protobuf::uint32 VectorStateI8::ld() const {
  return ld_;
}
inline void VectorStateI8::set_ld(::google::protobuf::uint32 value) {
  set_has_ld();
  ld_ = value;
}

// repeated int32 data = 3 [packed = true];
inline int VectorStateI8::data_size() const {
  return data_.size();
}
inline void VectorStateI8::clear_data() {
  data_.Clear();
}
inline ::google::protobuf::int32 VectorStateI8::data(int index) const {
  return data_.Get(index);
}
inline void VectorStateI8::set_data(int index, ::google::protobuf::int32 value) {
  data_.Set(index, value);
}
inline void VectorStateI8::add_data(::google::protobuf::int32 value) {
  data_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
VectorStateI8::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
VectorStateI8::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// VectorStateI16

// required string name = 1;
inline bool VectorStateI16::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VectorStateI16::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VectorStateI16::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VectorStateI16::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& VectorStateI16::name() const {
  return *name_;
}
inline void VectorStateI16::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void VectorStateI16::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void VectorStateI16::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VectorStateI16::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* VectorStateI16::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VectorStateI16::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 ld = 2 [default = 1];
inline bool VectorStateI16::has_ld() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VectorStateI16::set_has_ld() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VectorStateI16::clear_has_ld() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VectorStateI16::clear_ld() {
  ld_ = 1u;
  clear_has_ld();
}
inline ::google::protobuf::uint32 VectorStateI16::ld() const {
  return ld_;
}
inline void VectorStateI16::set_ld(::google::protobuf::uint32 value) {
  set_has_ld();
  ld_ = value;
}

// repeated int32 data = 3 [packed = true];
inline int VectorStateI16::data_size() const {
  return data_.size();
}
inline void VectorStateI16::clear_data() {
  data_.Clear();
}
inline ::google::protobuf::int32 VectorStateI16::data(int index) const {
  return data_.Get(index);
}
inline void VectorStateI16::set_data(int index, ::google::protobuf::int32 value) {
  data_.Set(index, value);
}
inline void VectorStateI16::add_data(::google::protobuf::int32 value) {
  data_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
VectorStateI16::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
VectorStateI16::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// VectorStateI32

// required string name = 1;
inline bool VectorStateI32::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VectorStateI32::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VectorStateI32::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VectorStateI32::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& VectorStateI32::name() const {
  return *name_;
}
inline void VectorStateI32::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void VectorStateI32::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void VectorStateI32::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VectorStateI32::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* VectorStateI32::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VectorStateI32::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 ld = 2 [default = 1];
inline bool VectorStateI32::has_ld() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VectorStateI32::set_has_ld() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VectorStateI32::clear_has_ld() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VectorStateI32::clear_ld() {
  ld_ = 1u;
  clear_has_ld();
}
inline ::google::protobuf::uint32 VectorStateI32::ld() const {
  return ld_;
}
inline void VectorStateI32::set_ld(::google::protobuf::uint32 value) {
  set_has_ld();
  ld_ = value;
}

// repeated int32 data = 3 [packed = true];
inline int VectorStateI32::data_size() const {
  return data_.size();
}
inline void VectorStateI32::clear_data() {
  data_.Clear();
}
inline ::google::protobuf::int32 VectorStateI32::data(int index) const {
  return data_.Get(index);
}
inline void VectorStateI32::set_data(int index, ::google::protobuf::int32 value) {
  data_.Set(index, value);
}
inline void VectorStateI32::add_data(::google::protobuf::int32 value) {
  data_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
VectorStateI32::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
VectorStateI32::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// VectorStateI64

// required string name = 1;
inline bool VectorStateI64::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VectorStateI64::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VectorStateI64::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VectorStateI64::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& VectorStateI64::name() const {
  return *name_;
}
inline void VectorStateI64::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void VectorStateI64::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void VectorStateI64::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VectorStateI64::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* VectorStateI64::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VectorStateI64::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 ld = 2 [default = 1];
inline bool VectorStateI64::has_ld() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VectorStateI64::set_has_ld() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VectorStateI64::clear_has_ld() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VectorStateI64::clear_ld() {
  ld_ = 1u;
  clear_has_ld();
}
inline ::google::protobuf::uint32 VectorStateI64::ld() const {
  return ld_;
}
inline void VectorStateI64::set_ld(::google::protobuf::uint32 value) {
  set_has_ld();
  ld_ = value;
}

// repeated int64 data = 3 [packed = true];
inline int VectorStateI64::data_size() const {
  return data_.size();
}
inline void VectorStateI64::clear_data() {
  data_.Clear();
}
inline ::google::protobuf::int64 VectorStateI64::data(int index) const {
  return data_.Get(index);
}
inline void VectorStateI64::set_data(int index, ::google::protobuf::int64 value) {
  data_.Set(index, value);
}
inline void VectorStateI64::add_data(::google::protobuf::int64 value) {
  data_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
VectorStateI64::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
VectorStateI64::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// VectorStateF16

// required string name = 1;
inline bool VectorStateF16::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VectorStateF16::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VectorStateF16::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VectorStateF16::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& VectorStateF16::name() const {
  return *name_;
}
inline void VectorStateF16::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void VectorStateF16::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void VectorStateF16::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VectorStateF16::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* VectorStateF16::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VectorStateF16::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 ld = 2 [default = 1];
inline bool VectorStateF16::has_ld() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VectorStateF16::set_has_ld() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VectorStateF16::clear_has_ld() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VectorStateF16::clear_ld() {
  ld_ = 1u;
  clear_has_ld();
}
inline ::google::protobuf::uint32 VectorStateF16::ld() const {
  return ld_;
}
inline void VectorStateF16::set_ld(::google::protobuf::uint32 value) {
  set_has_ld();
  ld_ = value;
}

// repeated float data = 3 [packed = true];
inline int VectorStateF16::data_size() const {
  return data_.size();
}
inline void VectorStateF16::clear_data() {
  data_.Clear();
}
inline float VectorStateF16::data(int index) const {
  return data_.Get(index);
}
inline void VectorStateF16::set_data(int index, float value) {
  data_.Set(index, value);
}
inline void VectorStateF16::add_data(float value) {
  data_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
VectorStateF16::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedField< float >*
VectorStateF16::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// VectorStateF32

// required string name = 1;
inline bool VectorStateF32::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VectorStateF32::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VectorStateF32::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VectorStateF32::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& VectorStateF32::name() const {
  return *name_;
}
inline void VectorStateF32::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void VectorStateF32::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void VectorStateF32::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VectorStateF32::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* VectorStateF32::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VectorStateF32::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 ld = 2 [default = 1];
inline bool VectorStateF32::has_ld() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VectorStateF32::set_has_ld() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VectorStateF32::clear_has_ld() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VectorStateF32::clear_ld() {
  ld_ = 1u;
  clear_has_ld();
}
inline ::google::protobuf::uint32 VectorStateF32::ld() const {
  return ld_;
}
inline void VectorStateF32::set_ld(::google::protobuf::uint32 value) {
  set_has_ld();
  ld_ = value;
}

// repeated float data = 3 [packed = true];
inline int VectorStateF32::data_size() const {
  return data_.size();
}
inline void VectorStateF32::clear_data() {
  data_.Clear();
}
inline float VectorStateF32::data(int index) const {
  return data_.Get(index);
}
inline void VectorStateF32::set_data(int index, float value) {
  data_.Set(index, value);
}
inline void VectorStateF32::add_data(float value) {
  data_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
VectorStateF32::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedField< float >*
VectorStateF32::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// VectorStateF64

// required string name = 1;
inline bool VectorStateF64::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VectorStateF64::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VectorStateF64::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VectorStateF64::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& VectorStateF64::name() const {
  return *name_;
}
inline void VectorStateF64::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void VectorStateF64::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void VectorStateF64::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VectorStateF64::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* VectorStateF64::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VectorStateF64::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 ld = 2 [default = 1];
inline bool VectorStateF64::has_ld() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VectorStateF64::set_has_ld() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VectorStateF64::clear_has_ld() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VectorStateF64::clear_ld() {
  ld_ = 1u;
  clear_has_ld();
}
inline ::google::protobuf::uint32 VectorStateF64::ld() const {
  return ld_;
}
inline void VectorStateF64::set_ld(::google::protobuf::uint32 value) {
  set_has_ld();
  ld_ = value;
}

// repeated double data = 3 [packed = true];
inline int VectorStateF64::data_size() const {
  return data_.size();
}
inline void VectorStateF64::clear_data() {
  data_.Clear();
}
inline double VectorStateF64::data(int index) const {
  return data_.Get(index);
}
inline void VectorStateF64::set_data(int index, double value) {
  data_.Set(index, value);
}
inline void VectorStateF64::add_data(double value) {
  data_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
VectorStateF64::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedField< double >*
VectorStateF64::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// StimRawData

// required uint32 data_rows = 1;
inline bool StimRawData::has_data_rows() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StimRawData::set_has_data_rows() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StimRawData::clear_has_data_rows() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StimRawData::clear_data_rows() {
  data_rows_ = 0u;
  clear_has_data_rows();
}
inline ::google::protobuf::uint32 StimRawData::data_rows() const {
  return data_rows_;
}
inline void StimRawData::set_data_rows(::google::protobuf::uint32 value) {
  set_has_data_rows();
  data_rows_ = value;
}

// required uint32 data_cols = 2;
inline bool StimRawData::has_data_cols() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StimRawData::set_has_data_cols() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StimRawData::clear_has_data_cols() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StimRawData::clear_data_cols() {
  data_cols_ = 0u;
  clear_has_data_cols();
}
inline ::google::protobuf::uint32 StimRawData::data_cols() const {
  return data_cols_;
}
inline void StimRawData::set_data_cols(::google::protobuf::uint32 value) {
  set_has_data_cols();
  data_cols_ = value;
}

// repeated uint32 data = 3 [packed = true];
inline int StimRawData::data_size() const {
  return data_.size();
}
inline void StimRawData::clear_data() {
  data_.Clear();
}
inline ::google::protobuf::uint32 StimRawData::data(int index) const {
  return data_.Get(index);
}
inline void StimRawData::set_data(int index, ::google::protobuf::uint32 value) {
  data_.Set(index, value);
}
inline void StimRawData::add_data(::google::protobuf::uint32 value) {
  data_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
StimRawData::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
StimRawData::mutable_data() {
  return &data_;
}

// required uint32 mask_rows = 4;
inline bool StimRawData::has_mask_rows() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StimRawData::set_has_mask_rows() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StimRawData::clear_has_mask_rows() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StimRawData::clear_mask_rows() {
  mask_rows_ = 0u;
  clear_has_mask_rows();
}
inline ::google::protobuf::uint32 StimRawData::mask_rows() const {
  return mask_rows_;
}
inline void StimRawData::set_mask_rows(::google::protobuf::uint32 value) {
  set_has_mask_rows();
  mask_rows_ = value;
}

// required uint32 mask_cols = 5;
inline bool StimRawData::has_mask_cols() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StimRawData::set_has_mask_cols() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StimRawData::clear_has_mask_cols() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StimRawData::clear_mask_cols() {
  mask_cols_ = 0u;
  clear_has_mask_cols();
}
inline ::google::protobuf::uint32 StimRawData::mask_cols() const {
  return mask_cols_;
}
inline void StimRawData::set_mask_cols(::google::protobuf::uint32 value) {
  set_has_mask_cols();
  mask_cols_ = value;
}

// repeated float mask = 6 [packed = true];
inline int StimRawData::mask_size() const {
  return mask_.size();
}
inline void StimRawData::clear_mask() {
  mask_.Clear();
}
inline float StimRawData::mask(int index) const {
  return mask_.Get(index);
}
inline void StimRawData::set_mask(int index, float value) {
  mask_.Set(index, value);
}
inline void StimRawData::add_mask(float value) {
  mask_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
StimRawData::mask() const {
  return mask_;
}
inline ::google::protobuf::RepeatedField< float >*
StimRawData::mutable_mask() {
  return &mask_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gsbn

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_gsbn_2eproto__INCLUDED
