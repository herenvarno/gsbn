// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gsbn.proto

#include "gsbn.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_gsbn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GenParam_gsbn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gsbn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModeParam_gsbn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gsbn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_NetParam_gsbn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gsbn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PopParam_gsbn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gsbn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ProcParam_gsbn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gsbn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProcParamArgF_gsbn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gsbn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProcParamArgI_gsbn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gsbn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProcParamArgS_gsbn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gsbn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProjParam_gsbn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gsbn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RecParam_gsbn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gsbn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TableState_gsbn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gsbn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VectorStateF16_gsbn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gsbn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VectorStateF32_gsbn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gsbn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VectorStateF64_gsbn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gsbn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VectorStateI16_gsbn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gsbn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VectorStateI32_gsbn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gsbn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VectorStateI64_gsbn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gsbn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VectorStateI8_gsbn_2eproto;
namespace gsbn {
class SolverParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SolverParam> _instance;
} _SolverParam_default_instance_;
class GenParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GenParam> _instance;
} _GenParam_default_instance_;
class ModeParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModeParam> _instance;
} _ModeParam_default_instance_;
class NetParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetParam> _instance;
} _NetParam_default_instance_;
class PopParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PopParam> _instance;
} _PopParam_default_instance_;
class ProjParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProjParam> _instance;
} _ProjParam_default_instance_;
class RecParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RecParam> _instance;
} _RecParam_default_instance_;
class ProcParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProcParam> _instance;
} _ProcParam_default_instance_;
class ProcParamArgIDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProcParamArgI> _instance;
} _ProcParamArgI_default_instance_;
class ProcParamArgFDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProcParamArgF> _instance;
} _ProcParamArgF_default_instance_;
class ProcParamArgSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProcParamArgS> _instance;
} _ProcParamArgS_default_instance_;
class SolverStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SolverState> _instance;
} _SolverState_default_instance_;
class TableStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TableState> _instance;
} _TableState_default_instance_;
class VectorStateI8DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VectorStateI8> _instance;
} _VectorStateI8_default_instance_;
class VectorStateI16DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VectorStateI16> _instance;
} _VectorStateI16_default_instance_;
class VectorStateI32DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VectorStateI32> _instance;
} _VectorStateI32_default_instance_;
class VectorStateI64DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VectorStateI64> _instance;
} _VectorStateI64_default_instance_;
class VectorStateF16DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VectorStateF16> _instance;
} _VectorStateF16_default_instance_;
class VectorStateF32DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VectorStateF32> _instance;
} _VectorStateF32_default_instance_;
class VectorStateF64DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VectorStateF64> _instance;
} _VectorStateF64_default_instance_;
class StimRawDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StimRawData> _instance;
} _StimRawData_default_instance_;
}  // namespace gsbn
static void InitDefaultsscc_info_GenParam_gsbn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gsbn::_GenParam_default_instance_;
    new (ptr) ::gsbn::GenParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GenParam_gsbn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GenParam_gsbn_2eproto}, {
      &scc_info_ModeParam_gsbn_2eproto.base,}};

static void InitDefaultsscc_info_ModeParam_gsbn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gsbn::_ModeParam_default_instance_;
    new (ptr) ::gsbn::ModeParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModeParam_gsbn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ModeParam_gsbn_2eproto}, {}};

static void InitDefaultsscc_info_NetParam_gsbn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gsbn::_NetParam_default_instance_;
    new (ptr) ::gsbn::NetParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_NetParam_gsbn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_NetParam_gsbn_2eproto}, {
      &scc_info_PopParam_gsbn_2eproto.base,
      &scc_info_ProjParam_gsbn_2eproto.base,}};

static void InitDefaultsscc_info_PopParam_gsbn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gsbn::_PopParam_default_instance_;
    new (ptr) ::gsbn::PopParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PopParam_gsbn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PopParam_gsbn_2eproto}, {}};

static void InitDefaultsscc_info_ProcParam_gsbn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gsbn::_ProcParam_default_instance_;
    new (ptr) ::gsbn::ProcParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ProcParam_gsbn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ProcParam_gsbn_2eproto}, {
      &scc_info_ProcParamArgI_gsbn_2eproto.base,
      &scc_info_ProcParamArgF_gsbn_2eproto.base,
      &scc_info_ProcParamArgS_gsbn_2eproto.base,}};

static void InitDefaultsscc_info_ProcParamArgF_gsbn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gsbn::_ProcParamArgF_default_instance_;
    new (ptr) ::gsbn::ProcParamArgF();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProcParamArgF_gsbn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProcParamArgF_gsbn_2eproto}, {}};

static void InitDefaultsscc_info_ProcParamArgI_gsbn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gsbn::_ProcParamArgI_default_instance_;
    new (ptr) ::gsbn::ProcParamArgI();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProcParamArgI_gsbn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProcParamArgI_gsbn_2eproto}, {}};

static void InitDefaultsscc_info_ProcParamArgS_gsbn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gsbn::_ProcParamArgS_default_instance_;
    new (ptr) ::gsbn::ProcParamArgS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProcParamArgS_gsbn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProcParamArgS_gsbn_2eproto}, {}};

static void InitDefaultsscc_info_ProjParam_gsbn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gsbn::_ProjParam_default_instance_;
    new (ptr) ::gsbn::ProjParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProjParam_gsbn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProjParam_gsbn_2eproto}, {}};

static void InitDefaultsscc_info_RecParam_gsbn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gsbn::_RecParam_default_instance_;
    new (ptr) ::gsbn::RecParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RecParam_gsbn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RecParam_gsbn_2eproto}, {}};

static void InitDefaultsscc_info_SolverParam_gsbn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gsbn::_SolverParam_default_instance_;
    new (ptr) ::gsbn::SolverParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_SolverParam_gsbn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_SolverParam_gsbn_2eproto}, {
      &scc_info_GenParam_gsbn_2eproto.base,
      &scc_info_NetParam_gsbn_2eproto.base,
      &scc_info_RecParam_gsbn_2eproto.base,
      &scc_info_ProcParam_gsbn_2eproto.base,}};

static void InitDefaultsscc_info_SolverState_gsbn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gsbn::_SolverState_default_instance_;
    new (ptr) ::gsbn::SolverState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_SolverState_gsbn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 8, 0, InitDefaultsscc_info_SolverState_gsbn_2eproto}, {
      &scc_info_TableState_gsbn_2eproto.base,
      &scc_info_VectorStateI8_gsbn_2eproto.base,
      &scc_info_VectorStateI16_gsbn_2eproto.base,
      &scc_info_VectorStateI32_gsbn_2eproto.base,
      &scc_info_VectorStateI64_gsbn_2eproto.base,
      &scc_info_VectorStateF16_gsbn_2eproto.base,
      &scc_info_VectorStateF32_gsbn_2eproto.base,
      &scc_info_VectorStateF64_gsbn_2eproto.base,}};

static void InitDefaultsscc_info_StimRawData_gsbn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gsbn::_StimRawData_default_instance_;
    new (ptr) ::gsbn::StimRawData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StimRawData_gsbn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StimRawData_gsbn_2eproto}, {}};

static void InitDefaultsscc_info_TableState_gsbn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gsbn::_TableState_default_instance_;
    new (ptr) ::gsbn::TableState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TableState_gsbn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TableState_gsbn_2eproto}, {}};

static void InitDefaultsscc_info_VectorStateF16_gsbn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gsbn::_VectorStateF16_default_instance_;
    new (ptr) ::gsbn::VectorStateF16();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VectorStateF16_gsbn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VectorStateF16_gsbn_2eproto}, {}};

static void InitDefaultsscc_info_VectorStateF32_gsbn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gsbn::_VectorStateF32_default_instance_;
    new (ptr) ::gsbn::VectorStateF32();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VectorStateF32_gsbn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VectorStateF32_gsbn_2eproto}, {}};

static void InitDefaultsscc_info_VectorStateF64_gsbn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gsbn::_VectorStateF64_default_instance_;
    new (ptr) ::gsbn::VectorStateF64();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VectorStateF64_gsbn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VectorStateF64_gsbn_2eproto}, {}};

static void InitDefaultsscc_info_VectorStateI16_gsbn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gsbn::_VectorStateI16_default_instance_;
    new (ptr) ::gsbn::VectorStateI16();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VectorStateI16_gsbn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VectorStateI16_gsbn_2eproto}, {}};

static void InitDefaultsscc_info_VectorStateI32_gsbn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gsbn::_VectorStateI32_default_instance_;
    new (ptr) ::gsbn::VectorStateI32();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VectorStateI32_gsbn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VectorStateI32_gsbn_2eproto}, {}};

static void InitDefaultsscc_info_VectorStateI64_gsbn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gsbn::_VectorStateI64_default_instance_;
    new (ptr) ::gsbn::VectorStateI64();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VectorStateI64_gsbn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VectorStateI64_gsbn_2eproto}, {}};

static void InitDefaultsscc_info_VectorStateI8_gsbn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gsbn::_VectorStateI8_default_instance_;
    new (ptr) ::gsbn::VectorStateI8();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VectorStateI8_gsbn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VectorStateI8_gsbn_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_gsbn_2eproto[21];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_gsbn_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_gsbn_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_gsbn_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::gsbn::SolverParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gsbn::SolverParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gsbn::SolverParam, gen_param_),
  PROTOBUF_FIELD_OFFSET(::gsbn::SolverParam, net_param_),
  PROTOBUF_FIELD_OFFSET(::gsbn::SolverParam, rec_param_),
  PROTOBUF_FIELD_OFFSET(::gsbn::SolverParam, proc_param_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::gsbn::GenParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gsbn::GenParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gsbn::GenParam, stim_file_),
  PROTOBUF_FIELD_OFFSET(::gsbn::GenParam, dt_),
  PROTOBUF_FIELD_OFFSET(::gsbn::GenParam, eps_),
  PROTOBUF_FIELD_OFFSET(::gsbn::GenParam, mode_param_),
  PROTOBUF_FIELD_OFFSET(::gsbn::GenParam, procedure_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::gsbn::ModeParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gsbn::ModeParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gsbn::ModeParam, begin_time_),
  PROTOBUF_FIELD_OFFSET(::gsbn::ModeParam, end_time_),
  PROTOBUF_FIELD_OFFSET(::gsbn::ModeParam, begin_lgidx_id_),
  PROTOBUF_FIELD_OFFSET(::gsbn::ModeParam, begin_lgexp_id_),
  PROTOBUF_FIELD_OFFSET(::gsbn::ModeParam, begin_wmask_id_),
  PROTOBUF_FIELD_OFFSET(::gsbn::ModeParam, time_step_),
  PROTOBUF_FIELD_OFFSET(::gsbn::ModeParam, lgidx_step_),
  PROTOBUF_FIELD_OFFSET(::gsbn::ModeParam, lgexp_step_),
  PROTOBUF_FIELD_OFFSET(::gsbn::ModeParam, wmask_step_),
  PROTOBUF_FIELD_OFFSET(::gsbn::ModeParam, prn_),
  PROTOBUF_FIELD_OFFSET(::gsbn::ModeParam, plasticity_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gsbn::NetParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gsbn::NetParam, pop_param_),
  PROTOBUF_FIELD_OFFSET(::gsbn::NetParam, proj_param_),
  PROTOBUF_FIELD_OFFSET(::gsbn::PopParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gsbn::PopParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gsbn::PopParam, pop_num_),
  PROTOBUF_FIELD_OFFSET(::gsbn::PopParam, hcu_num_),
  PROTOBUF_FIELD_OFFSET(::gsbn::PopParam, mcu_num_),
  PROTOBUF_FIELD_OFFSET(::gsbn::PopParam, fanout_num_),
  PROTOBUF_FIELD_OFFSET(::gsbn::PopParam, taum_),
  PROTOBUF_FIELD_OFFSET(::gsbn::PopParam, wtagain_),
  PROTOBUF_FIELD_OFFSET(::gsbn::PopParam, maxfq_),
  PROTOBUF_FIELD_OFFSET(::gsbn::PopParam, igain_),
  PROTOBUF_FIELD_OFFSET(::gsbn::PopParam, wgain_),
  PROTOBUF_FIELD_OFFSET(::gsbn::PopParam, lgbias_),
  PROTOBUF_FIELD_OFFSET(::gsbn::PopParam, snoise_),
  PROTOBUF_FIELD_OFFSET(::gsbn::PopParam, adgain_),
  PROTOBUF_FIELD_OFFSET(::gsbn::PopParam, taua_),
  PROTOBUF_FIELD_OFFSET(::gsbn::PopParam, position_),
  PROTOBUF_FIELD_OFFSET(::gsbn::PopParam, shape_),
  PROTOBUF_FIELD_OFFSET(::gsbn::PopParam, type_),
  PROTOBUF_FIELD_OFFSET(::gsbn::PopParam, rank_),
  0,
  1,
  2,
  3,
  9,
  10,
  11,
  12,
  13,
  4,
  5,
  14,
  8,
  ~0u,
  ~0u,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::gsbn::ProjParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gsbn::ProjParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gsbn::ProjParam, src_pop_),
  PROTOBUF_FIELD_OFFSET(::gsbn::ProjParam, dest_pop_),
  PROTOBUF_FIELD_OFFSET(::gsbn::ProjParam, tauzi_),
  PROTOBUF_FIELD_OFFSET(::gsbn::ProjParam, tauzj_),
  PROTOBUF_FIELD_OFFSET(::gsbn::ProjParam, taue_),
  PROTOBUF_FIELD_OFFSET(::gsbn::ProjParam, taup_),
  PROTOBUF_FIELD_OFFSET(::gsbn::ProjParam, maxfq_),
  PROTOBUF_FIELD_OFFSET(::gsbn::ProjParam, bgain_),
  PROTOBUF_FIELD_OFFSET(::gsbn::ProjParam, wgain_),
  PROTOBUF_FIELD_OFFSET(::gsbn::ProjParam, tauepsc_),
  PROTOBUF_FIELD_OFFSET(::gsbn::ProjParam, slot_num_),
  PROTOBUF_FIELD_OFFSET(::gsbn::ProjParam, distance_),
  0,
  1,
  2,
  3,
  4,
  5,
  11,
  6,
  7,
  8,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::gsbn::RecParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gsbn::RecParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gsbn::RecParam, directory_),
  0,
  PROTOBUF_FIELD_OFFSET(::gsbn::ProcParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gsbn::ProcParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gsbn::ProcParam, name_),
  PROTOBUF_FIELD_OFFSET(::gsbn::ProcParam, argi_),
  PROTOBUF_FIELD_OFFSET(::gsbn::ProcParam, argf_),
  PROTOBUF_FIELD_OFFSET(::gsbn::ProcParam, args_),
  0,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::gsbn::ProcParamArgI, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gsbn::ProcParamArgI, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gsbn::ProcParamArgI, key_),
  PROTOBUF_FIELD_OFFSET(::gsbn::ProcParamArgI, val_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::gsbn::ProcParamArgF, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gsbn::ProcParamArgF, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gsbn::ProcParamArgF, key_),
  PROTOBUF_FIELD_OFFSET(::gsbn::ProcParamArgF, val_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::gsbn::ProcParamArgS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gsbn::ProcParamArgS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gsbn::ProcParamArgS, key_),
  PROTOBUF_FIELD_OFFSET(::gsbn::ProcParamArgS, val_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::gsbn::SolverState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gsbn::SolverState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gsbn::SolverState, timestamp_),
  PROTOBUF_FIELD_OFFSET(::gsbn::SolverState, prn_),
  PROTOBUF_FIELD_OFFSET(::gsbn::SolverState, table_state_),
  PROTOBUF_FIELD_OFFSET(::gsbn::SolverState, vector_state_i8_),
  PROTOBUF_FIELD_OFFSET(::gsbn::SolverState, vector_state_i16_),
  PROTOBUF_FIELD_OFFSET(::gsbn::SolverState, vector_state_i32_),
  PROTOBUF_FIELD_OFFSET(::gsbn::SolverState, vector_state_i64_),
  PROTOBUF_FIELD_OFFSET(::gsbn::SolverState, vector_state_f16_),
  PROTOBUF_FIELD_OFFSET(::gsbn::SolverState, vector_state_f32_),
  PROTOBUF_FIELD_OFFSET(::gsbn::SolverState, vector_state_f64_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::gsbn::TableState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gsbn::TableState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gsbn::TableState, name_),
  PROTOBUF_FIELD_OFFSET(::gsbn::TableState, desc_),
  PROTOBUF_FIELD_OFFSET(::gsbn::TableState, data_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::gsbn::VectorStateI8, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gsbn::VectorStateI8, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gsbn::VectorStateI8, name_),
  PROTOBUF_FIELD_OFFSET(::gsbn::VectorStateI8, ld_),
  PROTOBUF_FIELD_OFFSET(::gsbn::VectorStateI8, data_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::gsbn::VectorStateI16, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gsbn::VectorStateI16, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gsbn::VectorStateI16, name_),
  PROTOBUF_FIELD_OFFSET(::gsbn::VectorStateI16, ld_),
  PROTOBUF_FIELD_OFFSET(::gsbn::VectorStateI16, data_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::gsbn::VectorStateI32, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gsbn::VectorStateI32, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gsbn::VectorStateI32, name_),
  PROTOBUF_FIELD_OFFSET(::gsbn::VectorStateI32, ld_),
  PROTOBUF_FIELD_OFFSET(::gsbn::VectorStateI32, data_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::gsbn::VectorStateI64, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gsbn::VectorStateI64, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gsbn::VectorStateI64, name_),
  PROTOBUF_FIELD_OFFSET(::gsbn::VectorStateI64, ld_),
  PROTOBUF_FIELD_OFFSET(::gsbn::VectorStateI64, data_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::gsbn::VectorStateF16, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gsbn::VectorStateF16, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gsbn::VectorStateF16, name_),
  PROTOBUF_FIELD_OFFSET(::gsbn::VectorStateF16, ld_),
  PROTOBUF_FIELD_OFFSET(::gsbn::VectorStateF16, data_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::gsbn::VectorStateF32, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gsbn::VectorStateF32, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gsbn::VectorStateF32, name_),
  PROTOBUF_FIELD_OFFSET(::gsbn::VectorStateF32, ld_),
  PROTOBUF_FIELD_OFFSET(::gsbn::VectorStateF32, data_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::gsbn::VectorStateF64, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gsbn::VectorStateF64, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gsbn::VectorStateF64, name_),
  PROTOBUF_FIELD_OFFSET(::gsbn::VectorStateF64, ld_),
  PROTOBUF_FIELD_OFFSET(::gsbn::VectorStateF64, data_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::gsbn::StimRawData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gsbn::StimRawData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gsbn::StimRawData, data_rows_),
  PROTOBUF_FIELD_OFFSET(::gsbn::StimRawData, data_cols_),
  PROTOBUF_FIELD_OFFSET(::gsbn::StimRawData, data_),
  PROTOBUF_FIELD_OFFSET(::gsbn::StimRawData, mask_rows_),
  PROTOBUF_FIELD_OFFSET(::gsbn::StimRawData, mask_cols_),
  PROTOBUF_FIELD_OFFSET(::gsbn::StimRawData, mask_),
  0,
  1,
  ~0u,
  2,
  3,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::gsbn::SolverParam)},
  { 13, 23, sizeof(::gsbn::GenParam)},
  { 28, 44, sizeof(::gsbn::ModeParam)},
  { 55, -1, sizeof(::gsbn::NetParam)},
  { 62, 84, sizeof(::gsbn::PopParam)},
  { 101, 118, sizeof(::gsbn::ProjParam)},
  { 130, 136, sizeof(::gsbn::RecParam)},
  { 137, 146, sizeof(::gsbn::ProcParam)},
  { 150, 157, sizeof(::gsbn::ProcParamArgI)},
  { 159, 166, sizeof(::gsbn::ProcParamArgF)},
  { 168, 175, sizeof(::gsbn::ProcParamArgS)},
  { 177, 192, sizeof(::gsbn::SolverState)},
  { 202, 210, sizeof(::gsbn::TableState)},
  { 213, 221, sizeof(::gsbn::VectorStateI8)},
  { 224, 232, sizeof(::gsbn::VectorStateI16)},
  { 235, 243, sizeof(::gsbn::VectorStateI32)},
  { 246, 254, sizeof(::gsbn::VectorStateI64)},
  { 257, 265, sizeof(::gsbn::VectorStateF16)},
  { 268, 276, sizeof(::gsbn::VectorStateF32)},
  { 279, 287, sizeof(::gsbn::VectorStateF64)},
  { 290, 301, sizeof(::gsbn::StimRawData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gsbn::_SolverParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gsbn::_GenParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gsbn::_ModeParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gsbn::_NetParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gsbn::_PopParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gsbn::_ProjParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gsbn::_RecParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gsbn::_ProcParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gsbn::_ProcParamArgI_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gsbn::_ProcParamArgF_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gsbn::_ProcParamArgS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gsbn::_SolverState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gsbn::_TableState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gsbn::_VectorStateI8_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gsbn::_VectorStateI16_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gsbn::_VectorStateI32_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gsbn::_VectorStateI64_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gsbn::_VectorStateF16_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gsbn::_VectorStateF32_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gsbn::_VectorStateF64_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gsbn::_StimRawData_default_instance_),
};

const char descriptor_table_protodef_gsbn_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ngsbn.proto\022\004gsbn\"\233\001\n\013SolverParam\022!\n\tge"
  "n_param\030\001 \002(\0132\016.gsbn.GenParam\022!\n\tnet_par"
  "am\030\002 \002(\0132\016.gsbn.NetParam\022!\n\trec_param\030\003 "
  "\002(\0132\016.gsbn.RecParam\022#\n\nproc_param\030\004 \003(\0132"
  "\017.gsbn.ProcParam\"u\n\010GenParam\022\021\n\tstim_fil"
  "e\030\001 \001(\t\022\n\n\002dt\030\002 \002(\002\022\022\n\003eps\030\003 \002(\002:\0050.001\022"
  "#\n\nmode_param\030\004 \003(\0132\017.gsbn.ModeParam\022\021\n\t"
  "procedure\030\005 \003(\t\"\204\002\n\tModeParam\022\022\n\nbegin_t"
  "ime\030\001 \002(\002\022\020\n\010end_time\030\002 \002(\002\022\031\n\016begin_lgi"
  "dx_id\030\003 \001(\r:\0010\022\031\n\016begin_lgexp_id\030\004 \001(\r:\001"
  "0\022\031\n\016begin_wmask_id\030\005 \001(\r:\0010\022\024\n\ttime_ste"
  "p\030\006 \001(\r:\0011\022\025\n\nlgidx_step\030\007 \001(\r:\0011\022\025\n\nlge"
  "xp_step\030\010 \001(\r:\0011\022\025\n\nwmask_step\030\t \001(\r:\0011\022"
  "\016\n\003prn\030\n \001(\002:\0011\022\025\n\nplasticity\030\013 \001(\r:\0011\"R"
  "\n\010NetParam\022!\n\tpop_param\030\001 \003(\0132\016.gsbn.Pop"
  "Param\022#\n\nproj_param\030\002 \003(\0132\017.gsbn.ProjPar"
  "am\"\311\002\n\010PopParam\022\017\n\007pop_num\030\001 \002(\r\022\017\n\007hcu_"
  "num\030\002 \002(\r\022\017\n\007mcu_num\030\003 \002(\r\022\022\n\nfanout_num"
  "\030\004 \002(\r\022\022\n\004taum\030\005 \001(\002:\0040.01\022\022\n\007wtagain\030\006 "
  "\001(\002:\0014\022\022\n\005maxfq\030\007 \001(\002:\003100\022\020\n\005igain\030\010 \001("
  "\002:\0011\022\020\n\005wgain\030\t \001(\002:\0011\022\021\n\006lgbias\030\n \001(\002:\001"
  "0\022\021\n\006snoise\030\013 \001(\002:\0010\022\021\n\006adgain\030\014 \001(\002:\0011\022"
  "\022\n\004taua\030\r \001(\002:\0040.05\022\024\n\010position\030\017 \003(\005B\002\020"
  "\001\022\021\n\005shape\030\020 \003(\rB\002\020\001\022\017\n\004type\030\021 \001(\r:\0010\022\017\n"
  "\004rank\030\022 \001(\r:\0010\"\330\001\n\tProjParam\022\017\n\007src_pop\030"
  "\001 \002(\r\022\020\n\010dest_pop\030\002 \002(\r\022\r\n\005tauzi\030\003 \002(\002\022\r"
  "\n\005tauzj\030\004 \002(\002\022\014\n\004taue\030\005 \002(\002\022\014\n\004taup\030\006 \002("
  "\002\022\022\n\005maxfq\030\007 \001(\002:\003100\022\020\n\005bgain\030\010 \001(\002:\0010\022"
  "\020\n\005wgain\030\t \001(\002:\0010\022\017\n\007tauepsc\030\n \001(\002\022\020\n\010sl"
  "ot_num\030\013 \002(\002\022\023\n\010distance\030\014 \001(\002:\0010\" \n\010Rec"
  "Param\022\024\n\tdirectory\030\001 \001(\t:\001.\"\202\001\n\tProcPara"
  "m\022\014\n\004name\030\001 \002(\t\022!\n\004argi\030\002 \003(\0132\023.gsbn.Pro"
  "cParamArgI\022!\n\004argf\030\003 \003(\0132\023.gsbn.ProcPara"
  "mArgF\022!\n\004args\030\004 \003(\0132\023.gsbn.ProcParamArgS"
  "\")\n\rProcParamArgI\022\013\n\003key\030\001 \002(\t\022\013\n\003val\030\002 "
  "\002(\005\")\n\rProcParamArgF\022\013\n\003key\030\001 \002(\t\022\013\n\003val"
  "\030\002 \002(\002\")\n\rProcParamArgS\022\013\n\003key\030\001 \002(\t\022\013\n\003"
  "val\030\002 \002(\t\"\242\003\n\013SolverState\022\021\n\ttimestamp\030\001"
  " \002(\002\022\013\n\003prn\030\002 \002(\002\022%\n\013table_state\030\003 \003(\0132\020"
  ".gsbn.TableState\022,\n\017vector_state_i8\030\004 \003("
  "\0132\023.gsbn.VectorStateI8\022.\n\020vector_state_i"
  "16\030\005 \003(\0132\024.gsbn.VectorStateI16\022.\n\020vector"
  "_state_i32\030\006 \003(\0132\024.gsbn.VectorStateI32\022."
  "\n\020vector_state_i64\030\007 \003(\0132\024.gsbn.VectorSt"
  "ateI64\022.\n\020vector_state_f16\030\010 \003(\0132\024.gsbn."
  "VectorStateF16\022.\n\020vector_state_f32\030\t \003(\013"
  "2\024.gsbn.VectorStateF32\022.\n\020vector_state_f"
  "64\030\n \003(\0132\024.gsbn.VectorStateF64\"6\n\nTableS"
  "tate\022\014\n\004name\030\001 \002(\t\022\014\n\004desc\030\002 \002(\014\022\014\n\004data"
  "\030\003 \002(\014\">\n\rVectorStateI8\022\014\n\004name\030\001 \002(\t\022\r\n"
  "\002ld\030\002 \001(\r:\0011\022\020\n\004data\030\003 \003(\005B\002\020\001\"\?\n\016Vector"
  "StateI16\022\014\n\004name\030\001 \002(\t\022\r\n\002ld\030\002 \001(\r:\0011\022\020\n"
  "\004data\030\003 \003(\005B\002\020\001\"\?\n\016VectorStateI32\022\014\n\004nam"
  "e\030\001 \002(\t\022\r\n\002ld\030\002 \001(\r:\0011\022\020\n\004data\030\003 \003(\005B\002\020\001"
  "\"\?\n\016VectorStateI64\022\014\n\004name\030\001 \002(\t\022\r\n\002ld\030\002"
  " \001(\r:\0011\022\020\n\004data\030\003 \003(\003B\002\020\001\"\?\n\016VectorState"
  "F16\022\014\n\004name\030\001 \002(\t\022\r\n\002ld\030\002 \001(\r:\0011\022\020\n\004data"
  "\030\003 \003(\002B\002\020\001\"\?\n\016VectorStateF32\022\014\n\004name\030\001 \002"
  "(\t\022\r\n\002ld\030\002 \001(\r:\0011\022\020\n\004data\030\003 \003(\002B\002\020\001\"\?\n\016V"
  "ectorStateF64\022\014\n\004name\030\001 \002(\t\022\r\n\002ld\030\002 \001(\r:"
  "\0011\022\020\n\004data\030\003 \003(\001B\002\020\001\"}\n\013StimRawData\022\021\n\td"
  "ata_rows\030\001 \002(\r\022\021\n\tdata_cols\030\002 \002(\r\022\020\n\004dat"
  "a\030\003 \003(\rB\002\020\001\022\021\n\tmask_rows\030\004 \002(\r\022\021\n\tmask_c"
  "ols\030\005 \002(\r\022\020\n\004mask\030\006 \003(\002B\002\020\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_gsbn_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_gsbn_2eproto_sccs[21] = {
  &scc_info_GenParam_gsbn_2eproto.base,
  &scc_info_ModeParam_gsbn_2eproto.base,
  &scc_info_NetParam_gsbn_2eproto.base,
  &scc_info_PopParam_gsbn_2eproto.base,
  &scc_info_ProcParam_gsbn_2eproto.base,
  &scc_info_ProcParamArgF_gsbn_2eproto.base,
  &scc_info_ProcParamArgI_gsbn_2eproto.base,
  &scc_info_ProcParamArgS_gsbn_2eproto.base,
  &scc_info_ProjParam_gsbn_2eproto.base,
  &scc_info_RecParam_gsbn_2eproto.base,
  &scc_info_SolverParam_gsbn_2eproto.base,
  &scc_info_SolverState_gsbn_2eproto.base,
  &scc_info_StimRawData_gsbn_2eproto.base,
  &scc_info_TableState_gsbn_2eproto.base,
  &scc_info_VectorStateF16_gsbn_2eproto.base,
  &scc_info_VectorStateF32_gsbn_2eproto.base,
  &scc_info_VectorStateF64_gsbn_2eproto.base,
  &scc_info_VectorStateI16_gsbn_2eproto.base,
  &scc_info_VectorStateI32_gsbn_2eproto.base,
  &scc_info_VectorStateI64_gsbn_2eproto.base,
  &scc_info_VectorStateI8_gsbn_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_gsbn_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gsbn_2eproto = {
  false, false, descriptor_table_protodef_gsbn_2eproto, "gsbn.proto", 2547,
  &descriptor_table_gsbn_2eproto_once, descriptor_table_gsbn_2eproto_sccs, descriptor_table_gsbn_2eproto_deps, 21, 0,
  schemas, file_default_instances, TableStruct_gsbn_2eproto::offsets,
  file_level_metadata_gsbn_2eproto, 21, file_level_enum_descriptors_gsbn_2eproto, file_level_service_descriptors_gsbn_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_gsbn_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_gsbn_2eproto)), true);
namespace gsbn {

// ===================================================================

class SolverParam::_Internal {
 public:
  using HasBits = decltype(std::declval<SolverParam>()._has_bits_);
  static const ::gsbn::GenParam& gen_param(const SolverParam* msg);
  static void set_has_gen_param(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::gsbn::NetParam& net_param(const SolverParam* msg);
  static void set_has_net_param(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::gsbn::RecParam& rec_param(const SolverParam* msg);
  static void set_has_rec_param(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::gsbn::GenParam&
SolverParam::_Internal::gen_param(const SolverParam* msg) {
  return *msg->gen_param_;
}
const ::gsbn::NetParam&
SolverParam::_Internal::net_param(const SolverParam* msg) {
  return *msg->net_param_;
}
const ::gsbn::RecParam&
SolverParam::_Internal::rec_param(const SolverParam* msg) {
  return *msg->rec_param_;
}
SolverParam::SolverParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  proc_param_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gsbn.SolverParam)
}
SolverParam::SolverParam(const SolverParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      proc_param_(from.proc_param_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_gen_param()) {
    gen_param_ = new ::gsbn::GenParam(*from.gen_param_);
  } else {
    gen_param_ = nullptr;
  }
  if (from._internal_has_net_param()) {
    net_param_ = new ::gsbn::NetParam(*from.net_param_);
  } else {
    net_param_ = nullptr;
  }
  if (from._internal_has_rec_param()) {
    rec_param_ = new ::gsbn::RecParam(*from.rec_param_);
  } else {
    rec_param_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gsbn.SolverParam)
}

void SolverParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SolverParam_gsbn_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&gen_param_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&rec_param_) -
      reinterpret_cast<char*>(&gen_param_)) + sizeof(rec_param_));
}

SolverParam::~SolverParam() {
  // @@protoc_insertion_point(destructor:gsbn.SolverParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SolverParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete gen_param_;
  if (this != internal_default_instance()) delete net_param_;
  if (this != internal_default_instance()) delete rec_param_;
}

void SolverParam::ArenaDtor(void* object) {
  SolverParam* _this = reinterpret_cast< SolverParam* >(object);
  (void)_this;
}
void SolverParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SolverParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SolverParam& SolverParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SolverParam_gsbn_2eproto.base);
  return *internal_default_instance();
}


void SolverParam::Clear() {
// @@protoc_insertion_point(message_clear_start:gsbn.SolverParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  proc_param_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(gen_param_ != nullptr);
      gen_param_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(net_param_ != nullptr);
      net_param_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(rec_param_ != nullptr);
      rec_param_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SolverParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .gsbn.GenParam gen_param = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_gen_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .gsbn.NetParam net_param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_net_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .gsbn.RecParam rec_param = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rec_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .gsbn.ProcParam proc_param = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_proc_param(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SolverParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gsbn.SolverParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .gsbn.GenParam gen_param = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::gen_param(this), target, stream);
  }

  // required .gsbn.NetParam net_param = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::net_param(this), target, stream);
  }

  // required .gsbn.RecParam rec_param = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::rec_param(this), target, stream);
  }

  // repeated .gsbn.ProcParam proc_param = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_proc_param_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_proc_param(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gsbn.SolverParam)
  return target;
}

size_t SolverParam::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gsbn.SolverParam)
  size_t total_size = 0;

  if (_internal_has_gen_param()) {
    // required .gsbn.GenParam gen_param = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gen_param_);
  }

  if (_internal_has_net_param()) {
    // required .gsbn.NetParam net_param = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *net_param_);
  }

  if (_internal_has_rec_param()) {
    // required .gsbn.RecParam rec_param = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rec_param_);
  }

  return total_size;
}
size_t SolverParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gsbn.SolverParam)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .gsbn.GenParam gen_param = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gen_param_);

    // required .gsbn.NetParam net_param = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *net_param_);

    // required .gsbn.RecParam rec_param = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rec_param_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gsbn.ProcParam proc_param = 4;
  total_size += 1UL * this->_internal_proc_param_size();
  for (const auto& msg : this->proc_param_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SolverParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gsbn.SolverParam)
  GOOGLE_DCHECK_NE(&from, this);
  const SolverParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SolverParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gsbn.SolverParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gsbn.SolverParam)
    MergeFrom(*source);
  }
}

void SolverParam::MergeFrom(const SolverParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gsbn.SolverParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  proc_param_.MergeFrom(from.proc_param_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_gen_param()->::gsbn::GenParam::MergeFrom(from._internal_gen_param());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_net_param()->::gsbn::NetParam::MergeFrom(from._internal_net_param());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_rec_param()->::gsbn::RecParam::MergeFrom(from._internal_rec_param());
    }
  }
}

void SolverParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gsbn.SolverParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SolverParam::CopyFrom(const SolverParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gsbn.SolverParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SolverParam::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(proc_param_)) return false;
  if (_internal_has_gen_param()) {
    if (!gen_param_->IsInitialized()) return false;
  }
  if (_internal_has_net_param()) {
    if (!net_param_->IsInitialized()) return false;
  }
  return true;
}

void SolverParam::InternalSwap(SolverParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  proc_param_.InternalSwap(&other->proc_param_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SolverParam, rec_param_)
      + sizeof(SolverParam::rec_param_)
      - PROTOBUF_FIELD_OFFSET(SolverParam, gen_param_)>(
          reinterpret_cast<char*>(&gen_param_),
          reinterpret_cast<char*>(&other->gen_param_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SolverParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GenParam::_Internal {
 public:
  using HasBits = decltype(std::declval<GenParam>()._has_bits_);
  static void set_has_stim_file(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dt(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_eps(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000006) ^ 0x00000006) != 0;
  }
};

GenParam::GenParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mode_param_(arena),
  procedure_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gsbn.GenParam)
}
GenParam::GenParam(const GenParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      mode_param_(from.mode_param_),
      procedure_(from.procedure_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stim_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_stim_file()) {
    stim_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stim_file(), 
      GetArena());
  }
  ::memcpy(&dt_, &from.dt_,
    static_cast<size_t>(reinterpret_cast<char*>(&eps_) -
    reinterpret_cast<char*>(&dt_)) + sizeof(eps_));
  // @@protoc_insertion_point(copy_constructor:gsbn.GenParam)
}

void GenParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GenParam_gsbn_2eproto.base);
  stim_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dt_ = 0;
  eps_ = 0.001f;
}

GenParam::~GenParam() {
  // @@protoc_insertion_point(destructor:gsbn.GenParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GenParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  stim_file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GenParam::ArenaDtor(void* object) {
  GenParam* _this = reinterpret_cast< GenParam* >(object);
  (void)_this;
}
void GenParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GenParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GenParam& GenParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GenParam_gsbn_2eproto.base);
  return *internal_default_instance();
}


void GenParam::Clear() {
// @@protoc_insertion_point(message_clear_start:gsbn.GenParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mode_param_.Clear();
  procedure_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    stim_file_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    dt_ = 0;
    eps_ = 0.001f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string stim_file = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_stim_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gsbn.GenParam.stim_file");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float dt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_dt(&has_bits);
          dt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float eps = 3 [default = 0.001];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_eps(&has_bits);
          eps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .gsbn.ModeParam mode_param = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mode_param(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string procedure = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_procedure();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gsbn.GenParam.procedure");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gsbn.GenParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string stim_file = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_stim_file().data(), static_cast<int>(this->_internal_stim_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gsbn.GenParam.stim_file");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_stim_file(), target);
  }

  // required float dt = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_dt(), target);
  }

  // required float eps = 3 [default = 0.001];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_eps(), target);
  }

  // repeated .gsbn.ModeParam mode_param = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mode_param_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_mode_param(i), target, stream);
  }

  // repeated string procedure = 5;
  for (int i = 0, n = this->_internal_procedure_size(); i < n; i++) {
    const auto& s = this->_internal_procedure(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gsbn.GenParam.procedure");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gsbn.GenParam)
  return target;
}

size_t GenParam::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gsbn.GenParam)
  size_t total_size = 0;

  if (_internal_has_dt()) {
    // required float dt = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_eps()) {
    // required float eps = 3 [default = 0.001];
    total_size += 1 + 4;
  }

  return total_size;
}
size_t GenParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gsbn.GenParam)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required float dt = 2;
    total_size += 1 + 4;

    // required float eps = 3 [default = 0.001];
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gsbn.ModeParam mode_param = 4;
  total_size += 1UL * this->_internal_mode_param_size();
  for (const auto& msg : this->mode_param_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string procedure = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(procedure_.size());
  for (int i = 0, n = procedure_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      procedure_.Get(i));
  }

  // optional string stim_file = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stim_file());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gsbn.GenParam)
  GOOGLE_DCHECK_NE(&from, this);
  const GenParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GenParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gsbn.GenParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gsbn.GenParam)
    MergeFrom(*source);
  }
}

void GenParam::MergeFrom(const GenParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gsbn.GenParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mode_param_.MergeFrom(from.mode_param_);
  procedure_.MergeFrom(from.procedure_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_stim_file(from._internal_stim_file());
    }
    if (cached_has_bits & 0x00000002u) {
      dt_ = from.dt_;
    }
    if (cached_has_bits & 0x00000004u) {
      eps_ = from.eps_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GenParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gsbn.GenParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenParam::CopyFrom(const GenParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gsbn.GenParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenParam::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(mode_param_)) return false;
  return true;
}

void GenParam::InternalSwap(GenParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mode_param_.InternalSwap(&other->mode_param_);
  procedure_.InternalSwap(&other->procedure_);
  stim_file_.Swap(&other->stim_file_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(dt_, other->dt_);
  swap(eps_, other->eps_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GenParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ModeParam::_Internal {
 public:
  using HasBits = decltype(std::declval<ModeParam>()._has_bits_);
  static void set_has_begin_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_end_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_begin_lgidx_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_begin_lgexp_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_begin_wmask_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_time_step(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_lgidx_step(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_lgexp_step(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_wmask_step(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_prn(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_plasticity(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

ModeParam::ModeParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gsbn.ModeParam)
}
ModeParam::ModeParam(const ModeParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&begin_time_, &from.begin_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&plasticity_) -
    reinterpret_cast<char*>(&begin_time_)) + sizeof(plasticity_));
  // @@protoc_insertion_point(copy_constructor:gsbn.ModeParam)
}

void ModeParam::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&begin_time_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&begin_wmask_id_) -
      reinterpret_cast<char*>(&begin_time_)) + sizeof(begin_wmask_id_));
  time_step_ = 1u;
  lgidx_step_ = 1u;
  lgexp_step_ = 1u;
  wmask_step_ = 1u;
  prn_ = 1;
  plasticity_ = 1u;
}

ModeParam::~ModeParam() {
  // @@protoc_insertion_point(destructor:gsbn.ModeParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModeParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ModeParam::ArenaDtor(void* object) {
  ModeParam* _this = reinterpret_cast< ModeParam* >(object);
  (void)_this;
}
void ModeParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModeParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModeParam& ModeParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModeParam_gsbn_2eproto.base);
  return *internal_default_instance();
}


void ModeParam::Clear() {
// @@protoc_insertion_point(message_clear_start:gsbn.ModeParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&begin_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&begin_wmask_id_) -
        reinterpret_cast<char*>(&begin_time_)) + sizeof(begin_wmask_id_));
    time_step_ = 1u;
    lgidx_step_ = 1u;
    lgexp_step_ = 1u;
  }
  if (cached_has_bits & 0x00000700u) {
    wmask_step_ = 1u;
    prn_ = 1;
    plasticity_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModeParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required float begin_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_begin_time(&has_bits);
          begin_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float end_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_end_time(&has_bits);
          end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 begin_lgidx_id = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_begin_lgidx_id(&has_bits);
          begin_lgidx_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 begin_lgexp_id = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_begin_lgexp_id(&has_bits);
          begin_lgexp_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 begin_wmask_id = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_begin_wmask_id(&has_bits);
          begin_wmask_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 time_step = 6 [default = 1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_time_step(&has_bits);
          time_step_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 lgidx_step = 7 [default = 1];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_lgidx_step(&has_bits);
          lgidx_step_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 lgexp_step = 8 [default = 1];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_lgexp_step(&has_bits);
          lgexp_step_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 wmask_step = 9 [default = 1];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_wmask_step(&has_bits);
          wmask_step_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float prn = 10 [default = 1];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_prn(&has_bits);
          prn_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 plasticity = 11 [default = 1];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_plasticity(&has_bits);
          plasticity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModeParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gsbn.ModeParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float begin_time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_begin_time(), target);
  }

  // required float end_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_end_time(), target);
  }

  // optional uint32 begin_lgidx_id = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_begin_lgidx_id(), target);
  }

  // optional uint32 begin_lgexp_id = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_begin_lgexp_id(), target);
  }

  // optional uint32 begin_wmask_id = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_begin_wmask_id(), target);
  }

  // optional uint32 time_step = 6 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_time_step(), target);
  }

  // optional uint32 lgidx_step = 7 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_lgidx_step(), target);
  }

  // optional uint32 lgexp_step = 8 [default = 1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_lgexp_step(), target);
  }

  // optional uint32 wmask_step = 9 [default = 1];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_wmask_step(), target);
  }

  // optional float prn = 10 [default = 1];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_prn(), target);
  }

  // optional uint32 plasticity = 11 [default = 1];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_plasticity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gsbn.ModeParam)
  return target;
}

size_t ModeParam::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gsbn.ModeParam)
  size_t total_size = 0;

  if (_internal_has_begin_time()) {
    // required float begin_time = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_end_time()) {
    // required float end_time = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t ModeParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gsbn.ModeParam)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float begin_time = 1;
    total_size += 1 + 4;

    // required float end_time = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000fcu) {
    // optional uint32 begin_lgidx_id = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_begin_lgidx_id());
    }

    // optional uint32 begin_lgexp_id = 4 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_begin_lgexp_id());
    }

    // optional uint32 begin_wmask_id = 5 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_begin_wmask_id());
    }

    // optional uint32 time_step = 6 [default = 1];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_time_step());
    }

    // optional uint32 lgidx_step = 7 [default = 1];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lgidx_step());
    }

    // optional uint32 lgexp_step = 8 [default = 1];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lgexp_step());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional uint32 wmask_step = 9 [default = 1];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_wmask_step());
    }

    // optional float prn = 10 [default = 1];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional uint32 plasticity = 11 [default = 1];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_plasticity());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModeParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gsbn.ModeParam)
  GOOGLE_DCHECK_NE(&from, this);
  const ModeParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModeParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gsbn.ModeParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gsbn.ModeParam)
    MergeFrom(*source);
  }
}

void ModeParam::MergeFrom(const ModeParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gsbn.ModeParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      begin_time_ = from.begin_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      end_time_ = from.end_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      begin_lgidx_id_ = from.begin_lgidx_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      begin_lgexp_id_ = from.begin_lgexp_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      begin_wmask_id_ = from.begin_wmask_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      time_step_ = from.time_step_;
    }
    if (cached_has_bits & 0x00000040u) {
      lgidx_step_ = from.lgidx_step_;
    }
    if (cached_has_bits & 0x00000080u) {
      lgexp_step_ = from.lgexp_step_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      wmask_step_ = from.wmask_step_;
    }
    if (cached_has_bits & 0x00000200u) {
      prn_ = from.prn_;
    }
    if (cached_has_bits & 0x00000400u) {
      plasticity_ = from.plasticity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ModeParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gsbn.ModeParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModeParam::CopyFrom(const ModeParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gsbn.ModeParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModeParam::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ModeParam::InternalSwap(ModeParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModeParam, begin_wmask_id_)
      + sizeof(ModeParam::begin_wmask_id_)
      - PROTOBUF_FIELD_OFFSET(ModeParam, begin_time_)>(
          reinterpret_cast<char*>(&begin_time_),
          reinterpret_cast<char*>(&other->begin_time_));
  swap(time_step_, other->time_step_);
  swap(lgidx_step_, other->lgidx_step_);
  swap(lgexp_step_, other->lgexp_step_);
  swap(wmask_step_, other->wmask_step_);
  swap(prn_, other->prn_);
  swap(plasticity_, other->plasticity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModeParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NetParam::_Internal {
 public:
};

NetParam::NetParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pop_param_(arena),
  proj_param_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gsbn.NetParam)
}
NetParam::NetParam(const NetParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pop_param_(from.pop_param_),
      proj_param_(from.proj_param_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gsbn.NetParam)
}

void NetParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NetParam_gsbn_2eproto.base);
}

NetParam::~NetParam() {
  // @@protoc_insertion_point(destructor:gsbn.NetParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NetParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NetParam::ArenaDtor(void* object) {
  NetParam* _this = reinterpret_cast< NetParam* >(object);
  (void)_this;
}
void NetParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetParam& NetParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetParam_gsbn_2eproto.base);
  return *internal_default_instance();
}


void NetParam::Clear() {
// @@protoc_insertion_point(message_clear_start:gsbn.NetParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pop_param_.Clear();
  proj_param_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .gsbn.PopParam pop_param = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pop_param(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .gsbn.ProjParam proj_param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_proj_param(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NetParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gsbn.NetParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gsbn.PopParam pop_param = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pop_param_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_pop_param(i), target, stream);
  }

  // repeated .gsbn.ProjParam proj_param = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_proj_param_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_proj_param(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gsbn.NetParam)
  return target;
}

size_t NetParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gsbn.NetParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gsbn.PopParam pop_param = 1;
  total_size += 1UL * this->_internal_pop_param_size();
  for (const auto& msg : this->pop_param_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .gsbn.ProjParam proj_param = 2;
  total_size += 1UL * this->_internal_proj_param_size();
  for (const auto& msg : this->proj_param_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gsbn.NetParam)
  GOOGLE_DCHECK_NE(&from, this);
  const NetParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NetParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gsbn.NetParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gsbn.NetParam)
    MergeFrom(*source);
  }
}

void NetParam::MergeFrom(const NetParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gsbn.NetParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pop_param_.MergeFrom(from.pop_param_);
  proj_param_.MergeFrom(from.proj_param_);
}

void NetParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gsbn.NetParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetParam::CopyFrom(const NetParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gsbn.NetParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetParam::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(pop_param_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(proj_param_)) return false;
  return true;
}

void NetParam::InternalSwap(NetParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pop_param_.InternalSwap(&other->pop_param_);
  proj_param_.InternalSwap(&other->proj_param_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PopParam::_Internal {
 public:
  using HasBits = decltype(std::declval<PopParam>()._has_bits_);
  static void set_has_pop_num(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hcu_num(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mcu_num(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_fanout_num(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_taum(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_wtagain(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_maxfq(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_igain(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_wgain(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_lgbias(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_snoise(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_adgain(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_taua(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_rank(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

PopParam::PopParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  position_(arena),
  shape_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gsbn.PopParam)
}
PopParam::PopParam(const PopParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      position_(from.position_),
      shape_(from.shape_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pop_num_, &from.pop_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&adgain_) -
    reinterpret_cast<char*>(&pop_num_)) + sizeof(adgain_));
  // @@protoc_insertion_point(copy_constructor:gsbn.PopParam)
}

void PopParam::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&pop_num_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&rank_) -
      reinterpret_cast<char*>(&pop_num_)) + sizeof(rank_));
  taua_ = 0.05f;
  taum_ = 0.01f;
  wtagain_ = 4;
  maxfq_ = 100;
  igain_ = 1;
  wgain_ = 1;
  adgain_ = 1;
}

PopParam::~PopParam() {
  // @@protoc_insertion_point(destructor:gsbn.PopParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PopParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PopParam::ArenaDtor(void* object) {
  PopParam* _this = reinterpret_cast< PopParam* >(object);
  (void)_this;
}
void PopParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PopParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PopParam& PopParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PopParam_gsbn_2eproto.base);
  return *internal_default_instance();
}


void PopParam::Clear() {
// @@protoc_insertion_point(message_clear_start:gsbn.PopParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  position_.Clear();
  shape_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&pop_num_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rank_) -
        reinterpret_cast<char*>(&pop_num_)) + sizeof(rank_));
  }
  if (cached_has_bits & 0x00007f00u) {
    taua_ = 0.05f;
    taum_ = 0.01f;
    wtagain_ = 4;
    maxfq_ = 100;
    igain_ = 1;
    wgain_ = 1;
    adgain_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PopParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 pop_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_pop_num(&has_bits);
          pop_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 hcu_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_hcu_num(&has_bits);
          hcu_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 mcu_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_mcu_num(&has_bits);
          mcu_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 fanout_num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_fanout_num(&has_bits);
          fanout_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float taum = 5 [default = 0.01];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_taum(&has_bits);
          taum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float wtagain = 6 [default = 4];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_wtagain(&has_bits);
          wtagain_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float maxfq = 7 [default = 100];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_maxfq(&has_bits);
          maxfq_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float igain = 8 [default = 1];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_igain(&has_bits);
          igain_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float wgain = 9 [default = 1];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_wgain(&has_bits);
          wgain_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float lgbias = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_lgbias(&has_bits);
          lgbias_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float snoise = 11 [default = 0];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_snoise(&has_bits);
          snoise_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float adgain = 12 [default = 1];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_adgain(&has_bits);
          adgain_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float taua = 13 [default = 0.05];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_taua(&has_bits);
          taua_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated int32 position = 15 [packed = true];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_position(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120) {
          _internal_add_position(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 shape = 16 [packed = true];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_shape(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128) {
          _internal_add_shape(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 type = 17 [default = 0];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rank = 18 [default = 0];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_rank(&has_bits);
          rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PopParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gsbn.PopParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 pop_num = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pop_num(), target);
  }

  // required uint32 hcu_num = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_hcu_num(), target);
  }

  // required uint32 mcu_num = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_mcu_num(), target);
  }

  // required uint32 fanout_num = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_fanout_num(), target);
  }

  // optional float taum = 5 [default = 0.01];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_taum(), target);
  }

  // optional float wtagain = 6 [default = 4];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_wtagain(), target);
  }

  // optional float maxfq = 7 [default = 100];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_maxfq(), target);
  }

  // optional float igain = 8 [default = 1];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_igain(), target);
  }

  // optional float wgain = 9 [default = 1];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_wgain(), target);
  }

  // optional float lgbias = 10 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_lgbias(), target);
  }

  // optional float snoise = 11 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_snoise(), target);
  }

  // optional float adgain = 12 [default = 1];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_adgain(), target);
  }

  // optional float taua = 13 [default = 0.05];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_taua(), target);
  }

  // repeated int32 position = 15 [packed = true];
  {
    int byte_size = _position_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          15, _internal_position(), byte_size, target);
    }
  }

  // repeated uint32 shape = 16 [packed = true];
  {
    int byte_size = _shape_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          16, _internal_shape(), byte_size, target);
    }
  }

  // optional uint32 type = 17 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_type(), target);
  }

  // optional uint32 rank = 18 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_rank(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gsbn.PopParam)
  return target;
}

size_t PopParam::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gsbn.PopParam)
  size_t total_size = 0;

  if (_internal_has_pop_num()) {
    // required uint32 pop_num = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pop_num());
  }

  if (_internal_has_hcu_num()) {
    // required uint32 hcu_num = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hcu_num());
  }

  if (_internal_has_mcu_num()) {
    // required uint32 mcu_num = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mcu_num());
  }

  if (_internal_has_fanout_num()) {
    // required uint32 fanout_num = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_fanout_num());
  }

  return total_size;
}
size_t PopParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gsbn.PopParam)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint32 pop_num = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pop_num());

    // required uint32 hcu_num = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hcu_num());

    // required uint32 mcu_num = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mcu_num());

    // required uint32 fanout_num = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_fanout_num());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 position = 15 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->position_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _position_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 shape = 16 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->shape_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _shape_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000f0u) {
    // optional float lgbias = 10 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float snoise = 11 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional uint32 type = 17 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_type());
    }

    // optional uint32 rank = 18 [default = 0];
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rank());
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional float taua = 13 [default = 0.05];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float taum = 5 [default = 0.01];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional float wtagain = 6 [default = 4];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional float maxfq = 7 [default = 100];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional float igain = 8 [default = 1];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional float wgain = 9 [default = 1];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional float adgain = 12 [default = 1];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PopParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gsbn.PopParam)
  GOOGLE_DCHECK_NE(&from, this);
  const PopParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PopParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gsbn.PopParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gsbn.PopParam)
    MergeFrom(*source);
  }
}

void PopParam::MergeFrom(const PopParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gsbn.PopParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  position_.MergeFrom(from.position_);
  shape_.MergeFrom(from.shape_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      pop_num_ = from.pop_num_;
    }
    if (cached_has_bits & 0x00000002u) {
      hcu_num_ = from.hcu_num_;
    }
    if (cached_has_bits & 0x00000004u) {
      mcu_num_ = from.mcu_num_;
    }
    if (cached_has_bits & 0x00000008u) {
      fanout_num_ = from.fanout_num_;
    }
    if (cached_has_bits & 0x00000010u) {
      lgbias_ = from.lgbias_;
    }
    if (cached_has_bits & 0x00000020u) {
      snoise_ = from.snoise_;
    }
    if (cached_has_bits & 0x00000040u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000080u) {
      rank_ = from.rank_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      taua_ = from.taua_;
    }
    if (cached_has_bits & 0x00000200u) {
      taum_ = from.taum_;
    }
    if (cached_has_bits & 0x00000400u) {
      wtagain_ = from.wtagain_;
    }
    if (cached_has_bits & 0x00000800u) {
      maxfq_ = from.maxfq_;
    }
    if (cached_has_bits & 0x00001000u) {
      igain_ = from.igain_;
    }
    if (cached_has_bits & 0x00002000u) {
      wgain_ = from.wgain_;
    }
    if (cached_has_bits & 0x00004000u) {
      adgain_ = from.adgain_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PopParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gsbn.PopParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PopParam::CopyFrom(const PopParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gsbn.PopParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PopParam::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PopParam::InternalSwap(PopParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  position_.InternalSwap(&other->position_);
  shape_.InternalSwap(&other->shape_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PopParam, rank_)
      + sizeof(PopParam::rank_)
      - PROTOBUF_FIELD_OFFSET(PopParam, pop_num_)>(
          reinterpret_cast<char*>(&pop_num_),
          reinterpret_cast<char*>(&other->pop_num_));
  swap(taua_, other->taua_);
  swap(taum_, other->taum_);
  swap(wtagain_, other->wtagain_);
  swap(maxfq_, other->maxfq_);
  swap(igain_, other->igain_);
  swap(wgain_, other->wgain_);
  swap(adgain_, other->adgain_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PopParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProjParam::_Internal {
 public:
  using HasBits = decltype(std::declval<ProjParam>()._has_bits_);
  static void set_has_src_pop(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dest_pop(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tauzi(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tauzj(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_taue(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_taup(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_maxfq(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_bgain(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_wgain(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_tauepsc(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_slot_num(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000023f) ^ 0x0000023f) != 0;
  }
};

ProjParam::ProjParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gsbn.ProjParam)
}
ProjParam::ProjParam(const ProjParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&src_pop_, &from.src_pop_,
    static_cast<size_t>(reinterpret_cast<char*>(&maxfq_) -
    reinterpret_cast<char*>(&src_pop_)) + sizeof(maxfq_));
  // @@protoc_insertion_point(copy_constructor:gsbn.ProjParam)
}

void ProjParam::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&src_pop_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&distance_) -
      reinterpret_cast<char*>(&src_pop_)) + sizeof(distance_));
  maxfq_ = 100;
}

ProjParam::~ProjParam() {
  // @@protoc_insertion_point(destructor:gsbn.ProjParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProjParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ProjParam::ArenaDtor(void* object) {
  ProjParam* _this = reinterpret_cast< ProjParam* >(object);
  (void)_this;
}
void ProjParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProjParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProjParam& ProjParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProjParam_gsbn_2eproto.base);
  return *internal_default_instance();
}


void ProjParam::Clear() {
// @@protoc_insertion_point(message_clear_start:gsbn.ProjParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&src_pop_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&wgain_) -
        reinterpret_cast<char*>(&src_pop_)) + sizeof(wgain_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&tauepsc_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&distance_) -
        reinterpret_cast<char*>(&tauepsc_)) + sizeof(distance_));
    maxfq_ = 100;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProjParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 src_pop = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_src_pop(&has_bits);
          src_pop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 dest_pop = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_dest_pop(&has_bits);
          dest_pop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float tauzi = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_tauzi(&has_bits);
          tauzi_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float tauzj = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_tauzj(&has_bits);
          tauzj_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float taue = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_taue(&has_bits);
          taue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float taup = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_taup(&has_bits);
          taup_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float maxfq = 7 [default = 100];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_maxfq(&has_bits);
          maxfq_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float bgain = 8 [default = 0];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_bgain(&has_bits);
          bgain_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float wgain = 9 [default = 0];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_wgain(&has_bits);
          wgain_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float tauepsc = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_tauepsc(&has_bits);
          tauepsc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float slot_num = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_slot_num(&has_bits);
          slot_num_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float distance = 12 [default = 0];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_distance(&has_bits);
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProjParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gsbn.ProjParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 src_pop = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_src_pop(), target);
  }

  // required uint32 dest_pop = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_dest_pop(), target);
  }

  // required float tauzi = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_tauzi(), target);
  }

  // required float tauzj = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_tauzj(), target);
  }

  // required float taue = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_taue(), target);
  }

  // required float taup = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_taup(), target);
  }

  // optional float maxfq = 7 [default = 100];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_maxfq(), target);
  }

  // optional float bgain = 8 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_bgain(), target);
  }

  // optional float wgain = 9 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_wgain(), target);
  }

  // optional float tauepsc = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_tauepsc(), target);
  }

  // required float slot_num = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_slot_num(), target);
  }

  // optional float distance = 12 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gsbn.ProjParam)
  return target;
}

size_t ProjParam::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gsbn.ProjParam)
  size_t total_size = 0;

  if (_internal_has_src_pop()) {
    // required uint32 src_pop = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_src_pop());
  }

  if (_internal_has_dest_pop()) {
    // required uint32 dest_pop = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dest_pop());
  }

  if (_internal_has_tauzi()) {
    // required float tauzi = 3;
    total_size += 1 + 4;
  }

  if (_internal_has_tauzj()) {
    // required float tauzj = 4;
    total_size += 1 + 4;
  }

  if (_internal_has_taue()) {
    // required float taue = 5;
    total_size += 1 + 4;
  }

  if (_internal_has_taup()) {
    // required float taup = 6;
    total_size += 1 + 4;
  }

  if (_internal_has_slot_num()) {
    // required float slot_num = 11;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t ProjParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gsbn.ProjParam)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000023f) ^ 0x0000023f) == 0) {  // All required fields are present.
    // required uint32 src_pop = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_src_pop());

    // required uint32 dest_pop = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dest_pop());

    // required float tauzi = 3;
    total_size += 1 + 4;

    // required float tauzj = 4;
    total_size += 1 + 4;

    // required float taue = 5;
    total_size += 1 + 4;

    // required float taup = 6;
    total_size += 1 + 4;

    // required float slot_num = 11;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000c0u) {
    // optional float bgain = 8 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float wgain = 9 [default = 0];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  // optional float tauepsc = 10;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 4;
  }

  if (cached_has_bits & 0x00000c00u) {
    // optional float distance = 12 [default = 0];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional float maxfq = 7 [default = 100];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProjParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gsbn.ProjParam)
  GOOGLE_DCHECK_NE(&from, this);
  const ProjParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProjParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gsbn.ProjParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gsbn.ProjParam)
    MergeFrom(*source);
  }
}

void ProjParam::MergeFrom(const ProjParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gsbn.ProjParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      src_pop_ = from.src_pop_;
    }
    if (cached_has_bits & 0x00000002u) {
      dest_pop_ = from.dest_pop_;
    }
    if (cached_has_bits & 0x00000004u) {
      tauzi_ = from.tauzi_;
    }
    if (cached_has_bits & 0x00000008u) {
      tauzj_ = from.tauzj_;
    }
    if (cached_has_bits & 0x00000010u) {
      taue_ = from.taue_;
    }
    if (cached_has_bits & 0x00000020u) {
      taup_ = from.taup_;
    }
    if (cached_has_bits & 0x00000040u) {
      bgain_ = from.bgain_;
    }
    if (cached_has_bits & 0x00000080u) {
      wgain_ = from.wgain_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      tauepsc_ = from.tauepsc_;
    }
    if (cached_has_bits & 0x00000200u) {
      slot_num_ = from.slot_num_;
    }
    if (cached_has_bits & 0x00000400u) {
      distance_ = from.distance_;
    }
    if (cached_has_bits & 0x00000800u) {
      maxfq_ = from.maxfq_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProjParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gsbn.ProjParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProjParam::CopyFrom(const ProjParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gsbn.ProjParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProjParam::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ProjParam::InternalSwap(ProjParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProjParam, distance_)
      + sizeof(ProjParam::distance_)
      - PROTOBUF_FIELD_OFFSET(ProjParam, src_pop_)>(
          reinterpret_cast<char*>(&src_pop_),
          reinterpret_cast<char*>(&other->src_pop_));
  swap(maxfq_, other->maxfq_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProjParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RecParam::_Internal {
 public:
  using HasBits = decltype(std::declval<RecParam>()._has_bits_);
  static void set_has_directory(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::internal::LazyString RecParam::_i_give_permission_to_break_this_code_default_directory_{{{".", 1}}, {nullptr}};
RecParam::RecParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gsbn.RecParam)
}
RecParam::RecParam(const RecParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  directory_.UnsafeSetDefault(nullptr);
  if (from._internal_has_directory()) {
    directory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_directory(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:gsbn.RecParam)
}

void RecParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RecParam_gsbn_2eproto.base);
  directory_.UnsafeSetDefault(nullptr);
}

RecParam::~RecParam() {
  // @@protoc_insertion_point(destructor:gsbn.RecParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RecParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  directory_.DestroyNoArena(nullptr);
}

void RecParam::ArenaDtor(void* object) {
  RecParam* _this = reinterpret_cast< RecParam* >(object);
  (void)_this;
}
void RecParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecParam& RecParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RecParam_gsbn_2eproto.base);
  return *internal_default_instance();
}


void RecParam::Clear() {
// @@protoc_insertion_point(message_clear_start:gsbn.RecParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    directory_.ClearToDefault(::gsbn::RecParam::_i_give_permission_to_break_this_code_default_directory_, GetArena());
     }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string directory = 1 [default = "."];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_directory();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gsbn.RecParam.directory");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gsbn.RecParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string directory = 1 [default = "."];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_directory().data(), static_cast<int>(this->_internal_directory().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gsbn.RecParam.directory");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_directory(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gsbn.RecParam)
  return target;
}

size_t RecParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gsbn.RecParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string directory = 1 [default = "."];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_directory());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gsbn.RecParam)
  GOOGLE_DCHECK_NE(&from, this);
  const RecParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gsbn.RecParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gsbn.RecParam)
    MergeFrom(*source);
  }
}

void RecParam::MergeFrom(const RecParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gsbn.RecParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_directory()) {
    _internal_set_directory(from._internal_directory());
  }
}

void RecParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gsbn.RecParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecParam::CopyFrom(const RecParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gsbn.RecParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecParam::IsInitialized() const {
  return true;
}

void RecParam::InternalSwap(RecParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  directory_.Swap(&other->directory_, nullptr, GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RecParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProcParam::_Internal {
 public:
  using HasBits = decltype(std::declval<ProcParam>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ProcParam::ProcParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  argi_(arena),
  argf_(arena),
  args_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gsbn.ProcParam)
}
ProcParam::ProcParam(const ProcParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      argi_(from.argi_),
      argf_(from.argf_),
      args_(from.args_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:gsbn.ProcParam)
}

void ProcParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProcParam_gsbn_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ProcParam::~ProcParam() {
  // @@protoc_insertion_point(destructor:gsbn.ProcParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProcParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProcParam::ArenaDtor(void* object) {
  ProcParam* _this = reinterpret_cast< ProcParam* >(object);
  (void)_this;
}
void ProcParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProcParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProcParam& ProcParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProcParam_gsbn_2eproto.base);
  return *internal_default_instance();
}


void ProcParam::Clear() {
// @@protoc_insertion_point(message_clear_start:gsbn.ProcParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  argi_.Clear();
  argf_.Clear();
  args_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gsbn.ProcParam.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .gsbn.ProcParamArgI argi = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_argi(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .gsbn.ProcParamArgF argf = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_argf(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .gsbn.ProcParamArgS args = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_args(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProcParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gsbn.ProcParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gsbn.ProcParam.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .gsbn.ProcParamArgI argi = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_argi_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_argi(i), target, stream);
  }

  // repeated .gsbn.ProcParamArgF argf = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_argf_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_argf(i), target, stream);
  }

  // repeated .gsbn.ProcParamArgS args = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_args_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_args(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gsbn.ProcParam)
  return target;
}

size_t ProcParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gsbn.ProcParam)
  size_t total_size = 0;

  // required string name = 1;
  if (_internal_has_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gsbn.ProcParamArgI argi = 2;
  total_size += 1UL * this->_internal_argi_size();
  for (const auto& msg : this->argi_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .gsbn.ProcParamArgF argf = 3;
  total_size += 1UL * this->_internal_argf_size();
  for (const auto& msg : this->argf_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .gsbn.ProcParamArgS args = 4;
  total_size += 1UL * this->_internal_args_size();
  for (const auto& msg : this->args_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gsbn.ProcParam)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProcParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gsbn.ProcParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gsbn.ProcParam)
    MergeFrom(*source);
  }
}

void ProcParam::MergeFrom(const ProcParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gsbn.ProcParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  argi_.MergeFrom(from.argi_);
  argf_.MergeFrom(from.argf_);
  args_.MergeFrom(from.args_);
  if (from._internal_has_name()) {
    _internal_set_name(from._internal_name());
  }
}

void ProcParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gsbn.ProcParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcParam::CopyFrom(const ProcParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gsbn.ProcParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcParam::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(argi_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(argf_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(args_)) return false;
  return true;
}

void ProcParam::InternalSwap(ProcParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  argi_.InternalSwap(&other->argi_);
  argf_.InternalSwap(&other->argf_);
  args_.InternalSwap(&other->args_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProcParamArgI::_Internal {
 public:
  using HasBits = decltype(std::declval<ProcParamArgI>()._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_val(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

ProcParamArgI::ProcParamArgI(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gsbn.ProcParamArgI)
}
ProcParamArgI::ProcParamArgI(const ProcParamArgI& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_key()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArena());
  }
  val_ = from.val_;
  // @@protoc_insertion_point(copy_constructor:gsbn.ProcParamArgI)
}

void ProcParamArgI::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProcParamArgI_gsbn_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  val_ = 0;
}

ProcParamArgI::~ProcParamArgI() {
  // @@protoc_insertion_point(destructor:gsbn.ProcParamArgI)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProcParamArgI::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProcParamArgI::ArenaDtor(void* object) {
  ProcParamArgI* _this = reinterpret_cast< ProcParamArgI* >(object);
  (void)_this;
}
void ProcParamArgI::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProcParamArgI::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProcParamArgI& ProcParamArgI::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProcParamArgI_gsbn_2eproto.base);
  return *internal_default_instance();
}


void ProcParamArgI::Clear() {
// @@protoc_insertion_point(message_clear_start:gsbn.ProcParamArgI)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    key_.ClearNonDefaultToEmpty();
  }
  val_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcParamArgI::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gsbn.ProcParamArgI.key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 val = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_val(&has_bits);
          val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProcParamArgI::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gsbn.ProcParamArgI)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gsbn.ProcParamArgI.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // required int32 val = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gsbn.ProcParamArgI)
  return target;
}

size_t ProcParamArgI::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gsbn.ProcParamArgI)
  size_t total_size = 0;

  if (_internal_has_key()) {
    // required string key = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  if (_internal_has_val()) {
    // required int32 val = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_val());
  }

  return total_size;
}
size_t ProcParamArgI::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gsbn.ProcParamArgI)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string key = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());

    // required int32 val = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_val());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcParamArgI::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gsbn.ProcParamArgI)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcParamArgI* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProcParamArgI>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gsbn.ProcParamArgI)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gsbn.ProcParamArgI)
    MergeFrom(*source);
  }
}

void ProcParamArgI::MergeFrom(const ProcParamArgI& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gsbn.ProcParamArgI)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      val_ = from.val_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProcParamArgI::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gsbn.ProcParamArgI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcParamArgI::CopyFrom(const ProcParamArgI& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gsbn.ProcParamArgI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcParamArgI::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ProcParamArgI::InternalSwap(ProcParamArgI* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(val_, other->val_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcParamArgI::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProcParamArgF::_Internal {
 public:
  using HasBits = decltype(std::declval<ProcParamArgF>()._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_val(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

ProcParamArgF::ProcParamArgF(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gsbn.ProcParamArgF)
}
ProcParamArgF::ProcParamArgF(const ProcParamArgF& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_key()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArena());
  }
  val_ = from.val_;
  // @@protoc_insertion_point(copy_constructor:gsbn.ProcParamArgF)
}

void ProcParamArgF::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProcParamArgF_gsbn_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  val_ = 0;
}

ProcParamArgF::~ProcParamArgF() {
  // @@protoc_insertion_point(destructor:gsbn.ProcParamArgF)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProcParamArgF::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProcParamArgF::ArenaDtor(void* object) {
  ProcParamArgF* _this = reinterpret_cast< ProcParamArgF* >(object);
  (void)_this;
}
void ProcParamArgF::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProcParamArgF::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProcParamArgF& ProcParamArgF::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProcParamArgF_gsbn_2eproto.base);
  return *internal_default_instance();
}


void ProcParamArgF::Clear() {
// @@protoc_insertion_point(message_clear_start:gsbn.ProcParamArgF)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    key_.ClearNonDefaultToEmpty();
  }
  val_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcParamArgF::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gsbn.ProcParamArgF.key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float val = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_val(&has_bits);
          val_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProcParamArgF::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gsbn.ProcParamArgF)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gsbn.ProcParamArgF.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // required float val = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gsbn.ProcParamArgF)
  return target;
}

size_t ProcParamArgF::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gsbn.ProcParamArgF)
  size_t total_size = 0;

  if (_internal_has_key()) {
    // required string key = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  if (_internal_has_val()) {
    // required float val = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t ProcParamArgF::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gsbn.ProcParamArgF)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string key = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());

    // required float val = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcParamArgF::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gsbn.ProcParamArgF)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcParamArgF* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProcParamArgF>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gsbn.ProcParamArgF)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gsbn.ProcParamArgF)
    MergeFrom(*source);
  }
}

void ProcParamArgF::MergeFrom(const ProcParamArgF& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gsbn.ProcParamArgF)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      val_ = from.val_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProcParamArgF::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gsbn.ProcParamArgF)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcParamArgF::CopyFrom(const ProcParamArgF& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gsbn.ProcParamArgF)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcParamArgF::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ProcParamArgF::InternalSwap(ProcParamArgF* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(val_, other->val_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcParamArgF::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProcParamArgS::_Internal {
 public:
  using HasBits = decltype(std::declval<ProcParamArgS>()._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_val(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

ProcParamArgS::ProcParamArgS(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gsbn.ProcParamArgS)
}
ProcParamArgS::ProcParamArgS(const ProcParamArgS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_key()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArena());
  }
  val_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_val()) {
    val_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_val(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:gsbn.ProcParamArgS)
}

void ProcParamArgS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProcParamArgS_gsbn_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  val_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ProcParamArgS::~ProcParamArgS() {
  // @@protoc_insertion_point(destructor:gsbn.ProcParamArgS)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProcParamArgS::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  val_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProcParamArgS::ArenaDtor(void* object) {
  ProcParamArgS* _this = reinterpret_cast< ProcParamArgS* >(object);
  (void)_this;
}
void ProcParamArgS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProcParamArgS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProcParamArgS& ProcParamArgS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProcParamArgS_gsbn_2eproto.base);
  return *internal_default_instance();
}


void ProcParamArgS::Clear() {
// @@protoc_insertion_point(message_clear_start:gsbn.ProcParamArgS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      val_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcParamArgS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gsbn.ProcParamArgS.key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string val = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_val();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gsbn.ProcParamArgS.val");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProcParamArgS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gsbn.ProcParamArgS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gsbn.ProcParamArgS.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // required string val = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_val().data(), static_cast<int>(this->_internal_val().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gsbn.ProcParamArgS.val");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gsbn.ProcParamArgS)
  return target;
}

size_t ProcParamArgS::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gsbn.ProcParamArgS)
  size_t total_size = 0;

  if (_internal_has_key()) {
    // required string key = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  if (_internal_has_val()) {
    // required string val = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_val());
  }

  return total_size;
}
size_t ProcParamArgS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gsbn.ProcParamArgS)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string key = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());

    // required string val = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_val());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcParamArgS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gsbn.ProcParamArgS)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcParamArgS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProcParamArgS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gsbn.ProcParamArgS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gsbn.ProcParamArgS)
    MergeFrom(*source);
  }
}

void ProcParamArgS::MergeFrom(const ProcParamArgS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gsbn.ProcParamArgS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_val(from._internal_val());
    }
  }
}

void ProcParamArgS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gsbn.ProcParamArgS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcParamArgS::CopyFrom(const ProcParamArgS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gsbn.ProcParamArgS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcParamArgS::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ProcParamArgS::InternalSwap(ProcParamArgS* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  val_.Swap(&other->val_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcParamArgS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SolverState::_Internal {
 public:
  using HasBits = decltype(std::declval<SolverState>()._has_bits_);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_prn(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

SolverState::SolverState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  table_state_(arena),
  vector_state_i8_(arena),
  vector_state_i16_(arena),
  vector_state_i32_(arena),
  vector_state_i64_(arena),
  vector_state_f16_(arena),
  vector_state_f32_(arena),
  vector_state_f64_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gsbn.SolverState)
}
SolverState::SolverState(const SolverState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      table_state_(from.table_state_),
      vector_state_i8_(from.vector_state_i8_),
      vector_state_i16_(from.vector_state_i16_),
      vector_state_i32_(from.vector_state_i32_),
      vector_state_i64_(from.vector_state_i64_),
      vector_state_f16_(from.vector_state_f16_),
      vector_state_f32_(from.vector_state_f32_),
      vector_state_f64_(from.vector_state_f64_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&prn_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(prn_));
  // @@protoc_insertion_point(copy_constructor:gsbn.SolverState)
}

void SolverState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SolverState_gsbn_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&prn_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(prn_));
}

SolverState::~SolverState() {
  // @@protoc_insertion_point(destructor:gsbn.SolverState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SolverState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SolverState::ArenaDtor(void* object) {
  SolverState* _this = reinterpret_cast< SolverState* >(object);
  (void)_this;
}
void SolverState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SolverState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SolverState& SolverState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SolverState_gsbn_2eproto.base);
  return *internal_default_instance();
}


void SolverState::Clear() {
// @@protoc_insertion_point(message_clear_start:gsbn.SolverState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  table_state_.Clear();
  vector_state_i8_.Clear();
  vector_state_i16_.Clear();
  vector_state_i32_.Clear();
  vector_state_i64_.Clear();
  vector_state_f16_.Clear();
  vector_state_f32_.Clear();
  vector_state_f64_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&prn_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(prn_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SolverState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required float timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float prn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_prn(&has_bits);
          prn_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .gsbn.TableState table_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_table_state(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .gsbn.VectorStateI8 vector_state_i8 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vector_state_i8(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .gsbn.VectorStateI16 vector_state_i16 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vector_state_i16(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .gsbn.VectorStateI32 vector_state_i32 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vector_state_i32(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .gsbn.VectorStateI64 vector_state_i64 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vector_state_i64(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .gsbn.VectorStateF16 vector_state_f16 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vector_state_f16(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .gsbn.VectorStateF32 vector_state_f32 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vector_state_f32(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .gsbn.VectorStateF64 vector_state_f64 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vector_state_f64(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SolverState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gsbn.SolverState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_timestamp(), target);
  }

  // required float prn = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_prn(), target);
  }

  // repeated .gsbn.TableState table_state = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_table_state_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_table_state(i), target, stream);
  }

  // repeated .gsbn.VectorStateI8 vector_state_i8 = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vector_state_i8_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_vector_state_i8(i), target, stream);
  }

  // repeated .gsbn.VectorStateI16 vector_state_i16 = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vector_state_i16_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_vector_state_i16(i), target, stream);
  }

  // repeated .gsbn.VectorStateI32 vector_state_i32 = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vector_state_i32_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_vector_state_i32(i), target, stream);
  }

  // repeated .gsbn.VectorStateI64 vector_state_i64 = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vector_state_i64_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_vector_state_i64(i), target, stream);
  }

  // repeated .gsbn.VectorStateF16 vector_state_f16 = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vector_state_f16_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_vector_state_f16(i), target, stream);
  }

  // repeated .gsbn.VectorStateF32 vector_state_f32 = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vector_state_f32_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_vector_state_f32(i), target, stream);
  }

  // repeated .gsbn.VectorStateF64 vector_state_f64 = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vector_state_f64_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_vector_state_f64(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gsbn.SolverState)
  return target;
}

size_t SolverState::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gsbn.SolverState)
  size_t total_size = 0;

  if (_internal_has_timestamp()) {
    // required float timestamp = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_prn()) {
    // required float prn = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t SolverState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gsbn.SolverState)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float timestamp = 1;
    total_size += 1 + 4;

    // required float prn = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gsbn.TableState table_state = 3;
  total_size += 1UL * this->_internal_table_state_size();
  for (const auto& msg : this->table_state_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .gsbn.VectorStateI8 vector_state_i8 = 4;
  total_size += 1UL * this->_internal_vector_state_i8_size();
  for (const auto& msg : this->vector_state_i8_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .gsbn.VectorStateI16 vector_state_i16 = 5;
  total_size += 1UL * this->_internal_vector_state_i16_size();
  for (const auto& msg : this->vector_state_i16_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .gsbn.VectorStateI32 vector_state_i32 = 6;
  total_size += 1UL * this->_internal_vector_state_i32_size();
  for (const auto& msg : this->vector_state_i32_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .gsbn.VectorStateI64 vector_state_i64 = 7;
  total_size += 1UL * this->_internal_vector_state_i64_size();
  for (const auto& msg : this->vector_state_i64_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .gsbn.VectorStateF16 vector_state_f16 = 8;
  total_size += 1UL * this->_internal_vector_state_f16_size();
  for (const auto& msg : this->vector_state_f16_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .gsbn.VectorStateF32 vector_state_f32 = 9;
  total_size += 1UL * this->_internal_vector_state_f32_size();
  for (const auto& msg : this->vector_state_f32_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .gsbn.VectorStateF64 vector_state_f64 = 10;
  total_size += 1UL * this->_internal_vector_state_f64_size();
  for (const auto& msg : this->vector_state_f64_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SolverState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gsbn.SolverState)
  GOOGLE_DCHECK_NE(&from, this);
  const SolverState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SolverState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gsbn.SolverState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gsbn.SolverState)
    MergeFrom(*source);
  }
}

void SolverState::MergeFrom(const SolverState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gsbn.SolverState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  table_state_.MergeFrom(from.table_state_);
  vector_state_i8_.MergeFrom(from.vector_state_i8_);
  vector_state_i16_.MergeFrom(from.vector_state_i16_);
  vector_state_i32_.MergeFrom(from.vector_state_i32_);
  vector_state_i64_.MergeFrom(from.vector_state_i64_);
  vector_state_f16_.MergeFrom(from.vector_state_f16_);
  vector_state_f32_.MergeFrom(from.vector_state_f32_);
  vector_state_f64_.MergeFrom(from.vector_state_f64_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      prn_ = from.prn_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SolverState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gsbn.SolverState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SolverState::CopyFrom(const SolverState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gsbn.SolverState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SolverState::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(table_state_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(vector_state_i8_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(vector_state_i16_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(vector_state_i32_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(vector_state_i64_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(vector_state_f16_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(vector_state_f32_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(vector_state_f64_)) return false;
  return true;
}

void SolverState::InternalSwap(SolverState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  table_state_.InternalSwap(&other->table_state_);
  vector_state_i8_.InternalSwap(&other->vector_state_i8_);
  vector_state_i16_.InternalSwap(&other->vector_state_i16_);
  vector_state_i32_.InternalSwap(&other->vector_state_i32_);
  vector_state_i64_.InternalSwap(&other->vector_state_i64_);
  vector_state_f16_.InternalSwap(&other->vector_state_f16_);
  vector_state_f32_.InternalSwap(&other->vector_state_f32_);
  vector_state_f64_.InternalSwap(&other->vector_state_f64_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SolverState, prn_)
      + sizeof(SolverState::prn_)
      - PROTOBUF_FIELD_OFFSET(SolverState, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SolverState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TableState::_Internal {
 public:
  using HasBits = decltype(std::declval<TableState>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_desc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

TableState::TableState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gsbn.TableState)
}
TableState::TableState(const TableState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_desc()) {
    desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_desc(), 
      GetArena());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_data()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:gsbn.TableState)
}

void TableState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TableState_gsbn_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TableState::~TableState() {
  // @@protoc_insertion_point(destructor:gsbn.TableState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TableState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  desc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TableState::ArenaDtor(void* object) {
  TableState* _this = reinterpret_cast< TableState* >(object);
  (void)_this;
}
void TableState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TableState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TableState& TableState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TableState_gsbn_2eproto.base);
  return *internal_default_instance();
}


void TableState::Clear() {
// @@protoc_insertion_point(message_clear_start:gsbn.TableState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      desc_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      data_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gsbn.TableState.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes desc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_desc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TableState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gsbn.TableState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gsbn.TableState.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // required bytes desc = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_desc(), target);
  }

  // required bytes data = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gsbn.TableState)
  return target;
}

size_t TableState::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gsbn.TableState)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_desc()) {
    // required bytes desc = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_desc());
  }

  if (_internal_has_data()) {
    // required bytes data = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  return total_size;
}
size_t TableState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gsbn.TableState)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required bytes desc = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_desc());

    // required bytes data = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TableState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gsbn.TableState)
  GOOGLE_DCHECK_NE(&from, this);
  const TableState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TableState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gsbn.TableState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gsbn.TableState)
    MergeFrom(*source);
  }
}

void TableState::MergeFrom(const TableState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gsbn.TableState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_desc(from._internal_desc());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_data(from._internal_data());
    }
  }
}

void TableState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gsbn.TableState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableState::CopyFrom(const TableState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gsbn.TableState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableState::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TableState::InternalSwap(TableState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  desc_.Swap(&other->desc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TableState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VectorStateI8::_Internal {
 public:
  using HasBits = decltype(std::declval<VectorStateI8>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ld(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

VectorStateI8::VectorStateI8(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gsbn.VectorStateI8)
}
VectorStateI8::VectorStateI8(const VectorStateI8& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ld_ = from.ld_;
  // @@protoc_insertion_point(copy_constructor:gsbn.VectorStateI8)
}

void VectorStateI8::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VectorStateI8_gsbn_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ld_ = 1u;
}

VectorStateI8::~VectorStateI8() {
  // @@protoc_insertion_point(destructor:gsbn.VectorStateI8)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VectorStateI8::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VectorStateI8::ArenaDtor(void* object) {
  VectorStateI8* _this = reinterpret_cast< VectorStateI8* >(object);
  (void)_this;
}
void VectorStateI8::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VectorStateI8::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VectorStateI8& VectorStateI8::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VectorStateI8_gsbn_2eproto.base);
  return *internal_default_instance();
}


void VectorStateI8::Clear() {
// @@protoc_insertion_point(message_clear_start:gsbn.VectorStateI8)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    ld_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VectorStateI8::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gsbn.VectorStateI8.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ld = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ld(&has_bits);
          ld_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 data = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VectorStateI8::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gsbn.VectorStateI8)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gsbn.VectorStateI8.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional uint32 ld = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ld(), target);
  }

  // repeated int32 data = 3 [packed = true];
  {
    int byte_size = _data_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_data(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gsbn.VectorStateI8)
  return target;
}

size_t VectorStateI8::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gsbn.VectorStateI8)
  size_t total_size = 0;

  // required string name = 1;
  if (_internal_has_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 data = 3 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->data_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // optional uint32 ld = 2 [default = 1];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ld());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VectorStateI8::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gsbn.VectorStateI8)
  GOOGLE_DCHECK_NE(&from, this);
  const VectorStateI8* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VectorStateI8>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gsbn.VectorStateI8)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gsbn.VectorStateI8)
    MergeFrom(*source);
  }
}

void VectorStateI8::MergeFrom(const VectorStateI8& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gsbn.VectorStateI8)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      ld_ = from.ld_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VectorStateI8::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gsbn.VectorStateI8)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorStateI8::CopyFrom(const VectorStateI8& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gsbn.VectorStateI8)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorStateI8::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void VectorStateI8::InternalSwap(VectorStateI8* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ld_, other->ld_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VectorStateI8::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VectorStateI16::_Internal {
 public:
  using HasBits = decltype(std::declval<VectorStateI16>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ld(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

VectorStateI16::VectorStateI16(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gsbn.VectorStateI16)
}
VectorStateI16::VectorStateI16(const VectorStateI16& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ld_ = from.ld_;
  // @@protoc_insertion_point(copy_constructor:gsbn.VectorStateI16)
}

void VectorStateI16::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VectorStateI16_gsbn_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ld_ = 1u;
}

VectorStateI16::~VectorStateI16() {
  // @@protoc_insertion_point(destructor:gsbn.VectorStateI16)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VectorStateI16::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VectorStateI16::ArenaDtor(void* object) {
  VectorStateI16* _this = reinterpret_cast< VectorStateI16* >(object);
  (void)_this;
}
void VectorStateI16::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VectorStateI16::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VectorStateI16& VectorStateI16::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VectorStateI16_gsbn_2eproto.base);
  return *internal_default_instance();
}


void VectorStateI16::Clear() {
// @@protoc_insertion_point(message_clear_start:gsbn.VectorStateI16)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    ld_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VectorStateI16::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gsbn.VectorStateI16.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ld = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ld(&has_bits);
          ld_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 data = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VectorStateI16::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gsbn.VectorStateI16)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gsbn.VectorStateI16.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional uint32 ld = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ld(), target);
  }

  // repeated int32 data = 3 [packed = true];
  {
    int byte_size = _data_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_data(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gsbn.VectorStateI16)
  return target;
}

size_t VectorStateI16::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gsbn.VectorStateI16)
  size_t total_size = 0;

  // required string name = 1;
  if (_internal_has_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 data = 3 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->data_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // optional uint32 ld = 2 [default = 1];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ld());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VectorStateI16::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gsbn.VectorStateI16)
  GOOGLE_DCHECK_NE(&from, this);
  const VectorStateI16* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VectorStateI16>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gsbn.VectorStateI16)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gsbn.VectorStateI16)
    MergeFrom(*source);
  }
}

void VectorStateI16::MergeFrom(const VectorStateI16& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gsbn.VectorStateI16)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      ld_ = from.ld_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VectorStateI16::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gsbn.VectorStateI16)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorStateI16::CopyFrom(const VectorStateI16& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gsbn.VectorStateI16)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorStateI16::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void VectorStateI16::InternalSwap(VectorStateI16* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ld_, other->ld_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VectorStateI16::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VectorStateI32::_Internal {
 public:
  using HasBits = decltype(std::declval<VectorStateI32>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ld(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

VectorStateI32::VectorStateI32(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gsbn.VectorStateI32)
}
VectorStateI32::VectorStateI32(const VectorStateI32& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ld_ = from.ld_;
  // @@protoc_insertion_point(copy_constructor:gsbn.VectorStateI32)
}

void VectorStateI32::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VectorStateI32_gsbn_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ld_ = 1u;
}

VectorStateI32::~VectorStateI32() {
  // @@protoc_insertion_point(destructor:gsbn.VectorStateI32)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VectorStateI32::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VectorStateI32::ArenaDtor(void* object) {
  VectorStateI32* _this = reinterpret_cast< VectorStateI32* >(object);
  (void)_this;
}
void VectorStateI32::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VectorStateI32::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VectorStateI32& VectorStateI32::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VectorStateI32_gsbn_2eproto.base);
  return *internal_default_instance();
}


void VectorStateI32::Clear() {
// @@protoc_insertion_point(message_clear_start:gsbn.VectorStateI32)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    ld_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VectorStateI32::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gsbn.VectorStateI32.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ld = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ld(&has_bits);
          ld_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 data = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VectorStateI32::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gsbn.VectorStateI32)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gsbn.VectorStateI32.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional uint32 ld = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ld(), target);
  }

  // repeated int32 data = 3 [packed = true];
  {
    int byte_size = _data_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_data(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gsbn.VectorStateI32)
  return target;
}

size_t VectorStateI32::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gsbn.VectorStateI32)
  size_t total_size = 0;

  // required string name = 1;
  if (_internal_has_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 data = 3 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->data_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // optional uint32 ld = 2 [default = 1];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ld());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VectorStateI32::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gsbn.VectorStateI32)
  GOOGLE_DCHECK_NE(&from, this);
  const VectorStateI32* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VectorStateI32>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gsbn.VectorStateI32)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gsbn.VectorStateI32)
    MergeFrom(*source);
  }
}

void VectorStateI32::MergeFrom(const VectorStateI32& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gsbn.VectorStateI32)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      ld_ = from.ld_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VectorStateI32::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gsbn.VectorStateI32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorStateI32::CopyFrom(const VectorStateI32& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gsbn.VectorStateI32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorStateI32::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void VectorStateI32::InternalSwap(VectorStateI32* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ld_, other->ld_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VectorStateI32::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VectorStateI64::_Internal {
 public:
  using HasBits = decltype(std::declval<VectorStateI64>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ld(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

VectorStateI64::VectorStateI64(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gsbn.VectorStateI64)
}
VectorStateI64::VectorStateI64(const VectorStateI64& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ld_ = from.ld_;
  // @@protoc_insertion_point(copy_constructor:gsbn.VectorStateI64)
}

void VectorStateI64::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VectorStateI64_gsbn_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ld_ = 1u;
}

VectorStateI64::~VectorStateI64() {
  // @@protoc_insertion_point(destructor:gsbn.VectorStateI64)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VectorStateI64::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VectorStateI64::ArenaDtor(void* object) {
  VectorStateI64* _this = reinterpret_cast< VectorStateI64* >(object);
  (void)_this;
}
void VectorStateI64::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VectorStateI64::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VectorStateI64& VectorStateI64::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VectorStateI64_gsbn_2eproto.base);
  return *internal_default_instance();
}


void VectorStateI64::Clear() {
// @@protoc_insertion_point(message_clear_start:gsbn.VectorStateI64)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    ld_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VectorStateI64::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gsbn.VectorStateI64.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ld = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ld(&has_bits);
          ld_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 data = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VectorStateI64::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gsbn.VectorStateI64)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gsbn.VectorStateI64.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional uint32 ld = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ld(), target);
  }

  // repeated int64 data = 3 [packed = true];
  {
    int byte_size = _data_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_data(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gsbn.VectorStateI64)
  return target;
}

size_t VectorStateI64::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gsbn.VectorStateI64)
  size_t total_size = 0;

  // required string name = 1;
  if (_internal_has_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 data = 3 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->data_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // optional uint32 ld = 2 [default = 1];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ld());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VectorStateI64::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gsbn.VectorStateI64)
  GOOGLE_DCHECK_NE(&from, this);
  const VectorStateI64* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VectorStateI64>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gsbn.VectorStateI64)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gsbn.VectorStateI64)
    MergeFrom(*source);
  }
}

void VectorStateI64::MergeFrom(const VectorStateI64& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gsbn.VectorStateI64)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      ld_ = from.ld_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VectorStateI64::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gsbn.VectorStateI64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorStateI64::CopyFrom(const VectorStateI64& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gsbn.VectorStateI64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorStateI64::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void VectorStateI64::InternalSwap(VectorStateI64* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ld_, other->ld_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VectorStateI64::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VectorStateF16::_Internal {
 public:
  using HasBits = decltype(std::declval<VectorStateF16>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ld(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

VectorStateF16::VectorStateF16(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gsbn.VectorStateF16)
}
VectorStateF16::VectorStateF16(const VectorStateF16& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ld_ = from.ld_;
  // @@protoc_insertion_point(copy_constructor:gsbn.VectorStateF16)
}

void VectorStateF16::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VectorStateF16_gsbn_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ld_ = 1u;
}

VectorStateF16::~VectorStateF16() {
  // @@protoc_insertion_point(destructor:gsbn.VectorStateF16)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VectorStateF16::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VectorStateF16::ArenaDtor(void* object) {
  VectorStateF16* _this = reinterpret_cast< VectorStateF16* >(object);
  (void)_this;
}
void VectorStateF16::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VectorStateF16::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VectorStateF16& VectorStateF16::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VectorStateF16_gsbn_2eproto.base);
  return *internal_default_instance();
}


void VectorStateF16::Clear() {
// @@protoc_insertion_point(message_clear_start:gsbn.VectorStateF16)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    ld_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VectorStateF16::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gsbn.VectorStateF16.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ld = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ld(&has_bits);
          ld_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float data = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VectorStateF16::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gsbn.VectorStateF16)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gsbn.VectorStateF16.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional uint32 ld = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ld(), target);
  }

  // repeated float data = 3 [packed = true];
  if (this->_internal_data_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gsbn.VectorStateF16)
  return target;
}

size_t VectorStateF16::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gsbn.VectorStateF16)
  size_t total_size = 0;

  // required string name = 1;
  if (_internal_has_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float data = 3 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_data_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // optional uint32 ld = 2 [default = 1];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ld());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VectorStateF16::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gsbn.VectorStateF16)
  GOOGLE_DCHECK_NE(&from, this);
  const VectorStateF16* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VectorStateF16>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gsbn.VectorStateF16)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gsbn.VectorStateF16)
    MergeFrom(*source);
  }
}

void VectorStateF16::MergeFrom(const VectorStateF16& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gsbn.VectorStateF16)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      ld_ = from.ld_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VectorStateF16::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gsbn.VectorStateF16)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorStateF16::CopyFrom(const VectorStateF16& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gsbn.VectorStateF16)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorStateF16::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void VectorStateF16::InternalSwap(VectorStateF16* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ld_, other->ld_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VectorStateF16::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VectorStateF32::_Internal {
 public:
  using HasBits = decltype(std::declval<VectorStateF32>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ld(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

VectorStateF32::VectorStateF32(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gsbn.VectorStateF32)
}
VectorStateF32::VectorStateF32(const VectorStateF32& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ld_ = from.ld_;
  // @@protoc_insertion_point(copy_constructor:gsbn.VectorStateF32)
}

void VectorStateF32::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VectorStateF32_gsbn_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ld_ = 1u;
}

VectorStateF32::~VectorStateF32() {
  // @@protoc_insertion_point(destructor:gsbn.VectorStateF32)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VectorStateF32::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VectorStateF32::ArenaDtor(void* object) {
  VectorStateF32* _this = reinterpret_cast< VectorStateF32* >(object);
  (void)_this;
}
void VectorStateF32::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VectorStateF32::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VectorStateF32& VectorStateF32::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VectorStateF32_gsbn_2eproto.base);
  return *internal_default_instance();
}


void VectorStateF32::Clear() {
// @@protoc_insertion_point(message_clear_start:gsbn.VectorStateF32)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    ld_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VectorStateF32::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gsbn.VectorStateF32.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ld = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ld(&has_bits);
          ld_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float data = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VectorStateF32::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gsbn.VectorStateF32)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gsbn.VectorStateF32.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional uint32 ld = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ld(), target);
  }

  // repeated float data = 3 [packed = true];
  if (this->_internal_data_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gsbn.VectorStateF32)
  return target;
}

size_t VectorStateF32::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gsbn.VectorStateF32)
  size_t total_size = 0;

  // required string name = 1;
  if (_internal_has_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float data = 3 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_data_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // optional uint32 ld = 2 [default = 1];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ld());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VectorStateF32::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gsbn.VectorStateF32)
  GOOGLE_DCHECK_NE(&from, this);
  const VectorStateF32* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VectorStateF32>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gsbn.VectorStateF32)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gsbn.VectorStateF32)
    MergeFrom(*source);
  }
}

void VectorStateF32::MergeFrom(const VectorStateF32& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gsbn.VectorStateF32)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      ld_ = from.ld_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VectorStateF32::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gsbn.VectorStateF32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorStateF32::CopyFrom(const VectorStateF32& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gsbn.VectorStateF32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorStateF32::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void VectorStateF32::InternalSwap(VectorStateF32* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ld_, other->ld_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VectorStateF32::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VectorStateF64::_Internal {
 public:
  using HasBits = decltype(std::declval<VectorStateF64>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ld(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

VectorStateF64::VectorStateF64(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gsbn.VectorStateF64)
}
VectorStateF64::VectorStateF64(const VectorStateF64& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ld_ = from.ld_;
  // @@protoc_insertion_point(copy_constructor:gsbn.VectorStateF64)
}

void VectorStateF64::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VectorStateF64_gsbn_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ld_ = 1u;
}

VectorStateF64::~VectorStateF64() {
  // @@protoc_insertion_point(destructor:gsbn.VectorStateF64)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VectorStateF64::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VectorStateF64::ArenaDtor(void* object) {
  VectorStateF64* _this = reinterpret_cast< VectorStateF64* >(object);
  (void)_this;
}
void VectorStateF64::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VectorStateF64::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VectorStateF64& VectorStateF64::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VectorStateF64_gsbn_2eproto.base);
  return *internal_default_instance();
}


void VectorStateF64::Clear() {
// @@protoc_insertion_point(message_clear_start:gsbn.VectorStateF64)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    ld_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VectorStateF64::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gsbn.VectorStateF64.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ld = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ld(&has_bits);
          ld_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double data = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VectorStateF64::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gsbn.VectorStateF64)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gsbn.VectorStateF64.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional uint32 ld = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ld(), target);
  }

  // repeated double data = 3 [packed = true];
  if (this->_internal_data_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gsbn.VectorStateF64)
  return target;
}

size_t VectorStateF64::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gsbn.VectorStateF64)
  size_t total_size = 0;

  // required string name = 1;
  if (_internal_has_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double data = 3 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_data_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // optional uint32 ld = 2 [default = 1];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ld());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VectorStateF64::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gsbn.VectorStateF64)
  GOOGLE_DCHECK_NE(&from, this);
  const VectorStateF64* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VectorStateF64>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gsbn.VectorStateF64)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gsbn.VectorStateF64)
    MergeFrom(*source);
  }
}

void VectorStateF64::MergeFrom(const VectorStateF64& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gsbn.VectorStateF64)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      ld_ = from.ld_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VectorStateF64::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gsbn.VectorStateF64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorStateF64::CopyFrom(const VectorStateF64& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gsbn.VectorStateF64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorStateF64::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void VectorStateF64::InternalSwap(VectorStateF64* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ld_, other->ld_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VectorStateF64::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StimRawData::_Internal {
 public:
  using HasBits = decltype(std::declval<StimRawData>()._has_bits_);
  static void set_has_data_rows(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_data_cols(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mask_rows(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mask_cols(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

StimRawData::StimRawData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_(arena),
  mask_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gsbn.StimRawData)
}
StimRawData::StimRawData(const StimRawData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      data_(from.data_),
      mask_(from.mask_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&data_rows_, &from.data_rows_,
    static_cast<size_t>(reinterpret_cast<char*>(&mask_cols_) -
    reinterpret_cast<char*>(&data_rows_)) + sizeof(mask_cols_));
  // @@protoc_insertion_point(copy_constructor:gsbn.StimRawData)
}

void StimRawData::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&data_rows_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&mask_cols_) -
      reinterpret_cast<char*>(&data_rows_)) + sizeof(mask_cols_));
}

StimRawData::~StimRawData() {
  // @@protoc_insertion_point(destructor:gsbn.StimRawData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StimRawData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StimRawData::ArenaDtor(void* object) {
  StimRawData* _this = reinterpret_cast< StimRawData* >(object);
  (void)_this;
}
void StimRawData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StimRawData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StimRawData& StimRawData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StimRawData_gsbn_2eproto.base);
  return *internal_default_instance();
}


void StimRawData::Clear() {
// @@protoc_insertion_point(message_clear_start:gsbn.StimRawData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  mask_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&data_rows_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mask_cols_) -
        reinterpret_cast<char*>(&data_rows_)) + sizeof(mask_cols_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StimRawData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 data_rows = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_data_rows(&has_bits);
          data_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 data_cols = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_data_cols(&has_bits);
          data_cols_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 data = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 mask_rows = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_mask_rows(&has_bits);
          mask_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 mask_cols = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_mask_cols(&has_bits);
          mask_cols_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float mask = 6 [packed = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_mask(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53) {
          _internal_add_mask(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StimRawData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gsbn.StimRawData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 data_rows = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_data_rows(), target);
  }

  // required uint32 data_cols = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_data_cols(), target);
  }

  // repeated uint32 data = 3 [packed = true];
  {
    int byte_size = _data_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_data(), byte_size, target);
    }
  }

  // required uint32 mask_rows = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_mask_rows(), target);
  }

  // required uint32 mask_cols = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_mask_cols(), target);
  }

  // repeated float mask = 6 [packed = true];
  if (this->_internal_mask_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_mask(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gsbn.StimRawData)
  return target;
}

size_t StimRawData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gsbn.StimRawData)
  size_t total_size = 0;

  if (_internal_has_data_rows()) {
    // required uint32 data_rows = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_data_rows());
  }

  if (_internal_has_data_cols()) {
    // required uint32 data_cols = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_data_cols());
  }

  if (_internal_has_mask_rows()) {
    // required uint32 mask_rows = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mask_rows());
  }

  if (_internal_has_mask_cols()) {
    // required uint32 mask_cols = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mask_cols());
  }

  return total_size;
}
size_t StimRawData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gsbn.StimRawData)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint32 data_rows = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_data_rows());

    // required uint32 data_cols = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_data_cols());

    // required uint32 mask_rows = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mask_rows());

    // required uint32 mask_cols = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mask_cols());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 data = 3 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->data_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float mask = 6 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_mask_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _mask_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StimRawData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gsbn.StimRawData)
  GOOGLE_DCHECK_NE(&from, this);
  const StimRawData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StimRawData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gsbn.StimRawData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gsbn.StimRawData)
    MergeFrom(*source);
  }
}

void StimRawData::MergeFrom(const StimRawData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gsbn.StimRawData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  mask_.MergeFrom(from.mask_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      data_rows_ = from.data_rows_;
    }
    if (cached_has_bits & 0x00000002u) {
      data_cols_ = from.data_cols_;
    }
    if (cached_has_bits & 0x00000004u) {
      mask_rows_ = from.mask_rows_;
    }
    if (cached_has_bits & 0x00000008u) {
      mask_cols_ = from.mask_cols_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StimRawData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gsbn.StimRawData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StimRawData::CopyFrom(const StimRawData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gsbn.StimRawData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StimRawData::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void StimRawData::InternalSwap(StimRawData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
  mask_.InternalSwap(&other->mask_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StimRawData, mask_cols_)
      + sizeof(StimRawData::mask_cols_)
      - PROTOBUF_FIELD_OFFSET(StimRawData, data_rows_)>(
          reinterpret_cast<char*>(&data_rows_),
          reinterpret_cast<char*>(&other->data_rows_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StimRawData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace gsbn
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gsbn::SolverParam* Arena::CreateMaybeMessage< ::gsbn::SolverParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gsbn::SolverParam >(arena);
}
template<> PROTOBUF_NOINLINE ::gsbn::GenParam* Arena::CreateMaybeMessage< ::gsbn::GenParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gsbn::GenParam >(arena);
}
template<> PROTOBUF_NOINLINE ::gsbn::ModeParam* Arena::CreateMaybeMessage< ::gsbn::ModeParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gsbn::ModeParam >(arena);
}
template<> PROTOBUF_NOINLINE ::gsbn::NetParam* Arena::CreateMaybeMessage< ::gsbn::NetParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gsbn::NetParam >(arena);
}
template<> PROTOBUF_NOINLINE ::gsbn::PopParam* Arena::CreateMaybeMessage< ::gsbn::PopParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gsbn::PopParam >(arena);
}
template<> PROTOBUF_NOINLINE ::gsbn::ProjParam* Arena::CreateMaybeMessage< ::gsbn::ProjParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gsbn::ProjParam >(arena);
}
template<> PROTOBUF_NOINLINE ::gsbn::RecParam* Arena::CreateMaybeMessage< ::gsbn::RecParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gsbn::RecParam >(arena);
}
template<> PROTOBUF_NOINLINE ::gsbn::ProcParam* Arena::CreateMaybeMessage< ::gsbn::ProcParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gsbn::ProcParam >(arena);
}
template<> PROTOBUF_NOINLINE ::gsbn::ProcParamArgI* Arena::CreateMaybeMessage< ::gsbn::ProcParamArgI >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gsbn::ProcParamArgI >(arena);
}
template<> PROTOBUF_NOINLINE ::gsbn::ProcParamArgF* Arena::CreateMaybeMessage< ::gsbn::ProcParamArgF >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gsbn::ProcParamArgF >(arena);
}
template<> PROTOBUF_NOINLINE ::gsbn::ProcParamArgS* Arena::CreateMaybeMessage< ::gsbn::ProcParamArgS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gsbn::ProcParamArgS >(arena);
}
template<> PROTOBUF_NOINLINE ::gsbn::SolverState* Arena::CreateMaybeMessage< ::gsbn::SolverState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gsbn::SolverState >(arena);
}
template<> PROTOBUF_NOINLINE ::gsbn::TableState* Arena::CreateMaybeMessage< ::gsbn::TableState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gsbn::TableState >(arena);
}
template<> PROTOBUF_NOINLINE ::gsbn::VectorStateI8* Arena::CreateMaybeMessage< ::gsbn::VectorStateI8 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gsbn::VectorStateI8 >(arena);
}
template<> PROTOBUF_NOINLINE ::gsbn::VectorStateI16* Arena::CreateMaybeMessage< ::gsbn::VectorStateI16 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gsbn::VectorStateI16 >(arena);
}
template<> PROTOBUF_NOINLINE ::gsbn::VectorStateI32* Arena::CreateMaybeMessage< ::gsbn::VectorStateI32 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gsbn::VectorStateI32 >(arena);
}
template<> PROTOBUF_NOINLINE ::gsbn::VectorStateI64* Arena::CreateMaybeMessage< ::gsbn::VectorStateI64 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gsbn::VectorStateI64 >(arena);
}
template<> PROTOBUF_NOINLINE ::gsbn::VectorStateF16* Arena::CreateMaybeMessage< ::gsbn::VectorStateF16 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gsbn::VectorStateF16 >(arena);
}
template<> PROTOBUF_NOINLINE ::gsbn::VectorStateF32* Arena::CreateMaybeMessage< ::gsbn::VectorStateF32 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gsbn::VectorStateF32 >(arena);
}
template<> PROTOBUF_NOINLINE ::gsbn::VectorStateF64* Arena::CreateMaybeMessage< ::gsbn::VectorStateF64 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gsbn::VectorStateF64 >(arena);
}
template<> PROTOBUF_NOINLINE ::gsbn::StimRawData* Arena::CreateMaybeMessage< ::gsbn::StimRawData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gsbn::StimRawData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
