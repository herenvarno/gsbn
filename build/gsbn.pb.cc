// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gsbn.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gsbn.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gsbn {

namespace {

const ::google::protobuf::Descriptor* SolverParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SolverParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* GenParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GenParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModeParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModeParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* NetParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* PopParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PopParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProjParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProjParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProcParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProcParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProcParamArgI_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProcParamArgI_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProcParamArgF_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProcParamArgF_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProcParamArgS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProcParamArgS_reflection_ = NULL;
const ::google::protobuf::Descriptor* SolverState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SolverState_reflection_ = NULL;
const ::google::protobuf::Descriptor* TableState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TableState_reflection_ = NULL;
const ::google::protobuf::Descriptor* VectorStateI8_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VectorStateI8_reflection_ = NULL;
const ::google::protobuf::Descriptor* VectorStateI16_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VectorStateI16_reflection_ = NULL;
const ::google::protobuf::Descriptor* VectorStateI32_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VectorStateI32_reflection_ = NULL;
const ::google::protobuf::Descriptor* VectorStateI64_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VectorStateI64_reflection_ = NULL;
const ::google::protobuf::Descriptor* VectorStateF16_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VectorStateF16_reflection_ = NULL;
const ::google::protobuf::Descriptor* VectorStateF32_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VectorStateF32_reflection_ = NULL;
const ::google::protobuf::Descriptor* VectorStateF64_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VectorStateF64_reflection_ = NULL;
const ::google::protobuf::Descriptor* StimRawData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StimRawData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_gsbn_2eproto() {
  protobuf_AddDesc_gsbn_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "gsbn.proto");
  GOOGLE_CHECK(file != NULL);
  SolverParam_descriptor_ = file->message_type(0);
  static const int SolverParam_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParam, gen_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParam, net_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParam, rec_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParam, proc_param_),
  };
  SolverParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SolverParam_descriptor_,
      SolverParam::default_instance_,
      SolverParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SolverParam));
  GenParam_descriptor_ = file->message_type(1);
  static const int GenParam_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenParam, stim_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenParam, dt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenParam, eps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenParam, mode_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenParam, procedure_),
  };
  GenParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GenParam_descriptor_,
      GenParam::default_instance_,
      GenParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GenParam));
  ModeParam_descriptor_ = file->message_type(2);
  static const int ModeParam_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModeParam, begin_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModeParam, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModeParam, begin_lgidx_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModeParam, begin_lgexp_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModeParam, begin_wmask_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModeParam, time_step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModeParam, lgidx_step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModeParam, lgexp_step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModeParam, wmask_step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModeParam, prn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModeParam, plasticity_),
  };
  ModeParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModeParam_descriptor_,
      ModeParam::default_instance_,
      ModeParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModeParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModeParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModeParam));
  NetParam_descriptor_ = file->message_type(3);
  static const int NetParam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParam, pop_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParam, proj_param_),
  };
  NetParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetParam_descriptor_,
      NetParam::default_instance_,
      NetParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetParam));
  PopParam_descriptor_ = file->message_type(4);
  static const int PopParam_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopParam, pop_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopParam, hcu_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopParam, mcu_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopParam, fanout_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopParam, taum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopParam, wtagain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopParam, maxfq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopParam, igain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopParam, wgain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopParam, lgbias_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopParam, snoise_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopParam, adgain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopParam, taua_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopParam, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopParam, shape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopParam, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopParam, rank_),
  };
  PopParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PopParam_descriptor_,
      PopParam::default_instance_,
      PopParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PopParam));
  ProjParam_descriptor_ = file->message_type(5);
  static const int ProjParam_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjParam, src_pop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjParam, dest_pop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjParam, tauzi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjParam, tauzj_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjParam, taue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjParam, taup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjParam, maxfq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjParam, bgain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjParam, wgain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjParam, tauepsc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjParam, slot_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjParam, distance_),
  };
  ProjParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProjParam_descriptor_,
      ProjParam::default_instance_,
      ProjParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProjParam));
  RecParam_descriptor_ = file->message_type(6);
  static const int RecParam_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecParam, directory_),
  };
  RecParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecParam_descriptor_,
      RecParam::default_instance_,
      RecParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecParam));
  ProcParam_descriptor_ = file->message_type(7);
  static const int ProcParam_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcParam, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcParam, argi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcParam, argf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcParam, args_),
  };
  ProcParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProcParam_descriptor_,
      ProcParam::default_instance_,
      ProcParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProcParam));
  ProcParamArgI_descriptor_ = file->message_type(8);
  static const int ProcParamArgI_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcParamArgI, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcParamArgI, val_),
  };
  ProcParamArgI_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProcParamArgI_descriptor_,
      ProcParamArgI::default_instance_,
      ProcParamArgI_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcParamArgI, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcParamArgI, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProcParamArgI));
  ProcParamArgF_descriptor_ = file->message_type(9);
  static const int ProcParamArgF_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcParamArgF, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcParamArgF, val_),
  };
  ProcParamArgF_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProcParamArgF_descriptor_,
      ProcParamArgF::default_instance_,
      ProcParamArgF_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcParamArgF, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcParamArgF, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProcParamArgF));
  ProcParamArgS_descriptor_ = file->message_type(10);
  static const int ProcParamArgS_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcParamArgS, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcParamArgS, val_),
  };
  ProcParamArgS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProcParamArgS_descriptor_,
      ProcParamArgS::default_instance_,
      ProcParamArgS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcParamArgS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcParamArgS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProcParamArgS));
  SolverState_descriptor_ = file->message_type(11);
  static const int SolverState_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverState, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverState, prn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverState, table_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverState, vector_state_i8_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverState, vector_state_i16_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverState, vector_state_i32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverState, vector_state_i64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverState, vector_state_f16_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverState, vector_state_f32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverState, vector_state_f64_),
  };
  SolverState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SolverState_descriptor_,
      SolverState::default_instance_,
      SolverState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SolverState));
  TableState_descriptor_ = file->message_type(12);
  static const int TableState_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableState, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableState, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableState, data_),
  };
  TableState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TableState_descriptor_,
      TableState::default_instance_,
      TableState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TableState));
  VectorStateI8_descriptor_ = file->message_type(13);
  static const int VectorStateI8_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorStateI8, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorStateI8, ld_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorStateI8, data_),
  };
  VectorStateI8_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VectorStateI8_descriptor_,
      VectorStateI8::default_instance_,
      VectorStateI8_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorStateI8, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorStateI8, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VectorStateI8));
  VectorStateI16_descriptor_ = file->message_type(14);
  static const int VectorStateI16_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorStateI16, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorStateI16, ld_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorStateI16, data_),
  };
  VectorStateI16_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VectorStateI16_descriptor_,
      VectorStateI16::default_instance_,
      VectorStateI16_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorStateI16, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorStateI16, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VectorStateI16));
  VectorStateI32_descriptor_ = file->message_type(15);
  static const int VectorStateI32_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorStateI32, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorStateI32, ld_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorStateI32, data_),
  };
  VectorStateI32_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VectorStateI32_descriptor_,
      VectorStateI32::default_instance_,
      VectorStateI32_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorStateI32, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorStateI32, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VectorStateI32));
  VectorStateI64_descriptor_ = file->message_type(16);
  static const int VectorStateI64_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorStateI64, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorStateI64, ld_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorStateI64, data_),
  };
  VectorStateI64_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VectorStateI64_descriptor_,
      VectorStateI64::default_instance_,
      VectorStateI64_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorStateI64, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorStateI64, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VectorStateI64));
  VectorStateF16_descriptor_ = file->message_type(17);
  static const int VectorStateF16_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorStateF16, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorStateF16, ld_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorStateF16, data_),
  };
  VectorStateF16_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VectorStateF16_descriptor_,
      VectorStateF16::default_instance_,
      VectorStateF16_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorStateF16, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorStateF16, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VectorStateF16));
  VectorStateF32_descriptor_ = file->message_type(18);
  static const int VectorStateF32_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorStateF32, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorStateF32, ld_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorStateF32, data_),
  };
  VectorStateF32_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VectorStateF32_descriptor_,
      VectorStateF32::default_instance_,
      VectorStateF32_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorStateF32, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorStateF32, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VectorStateF32));
  VectorStateF64_descriptor_ = file->message_type(19);
  static const int VectorStateF64_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorStateF64, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorStateF64, ld_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorStateF64, data_),
  };
  VectorStateF64_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VectorStateF64_descriptor_,
      VectorStateF64::default_instance_,
      VectorStateF64_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorStateF64, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorStateF64, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VectorStateF64));
  StimRawData_descriptor_ = file->message_type(20);
  static const int StimRawData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StimRawData, data_rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StimRawData, data_cols_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StimRawData, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StimRawData, mask_rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StimRawData, mask_cols_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StimRawData, mask_),
  };
  StimRawData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StimRawData_descriptor_,
      StimRawData::default_instance_,
      StimRawData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StimRawData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StimRawData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StimRawData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_gsbn_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SolverParam_descriptor_, &SolverParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GenParam_descriptor_, &GenParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModeParam_descriptor_, &ModeParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetParam_descriptor_, &NetParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PopParam_descriptor_, &PopParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProjParam_descriptor_, &ProjParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecParam_descriptor_, &RecParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProcParam_descriptor_, &ProcParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProcParamArgI_descriptor_, &ProcParamArgI::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProcParamArgF_descriptor_, &ProcParamArgF::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProcParamArgS_descriptor_, &ProcParamArgS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SolverState_descriptor_, &SolverState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TableState_descriptor_, &TableState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VectorStateI8_descriptor_, &VectorStateI8::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VectorStateI16_descriptor_, &VectorStateI16::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VectorStateI32_descriptor_, &VectorStateI32::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VectorStateI64_descriptor_, &VectorStateI64::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VectorStateF16_descriptor_, &VectorStateF16::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VectorStateF32_descriptor_, &VectorStateF32::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VectorStateF64_descriptor_, &VectorStateF64::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StimRawData_descriptor_, &StimRawData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_gsbn_2eproto() {
  delete SolverParam::default_instance_;
  delete SolverParam_reflection_;
  delete GenParam::default_instance_;
  delete GenParam_reflection_;
  delete ModeParam::default_instance_;
  delete ModeParam_reflection_;
  delete NetParam::default_instance_;
  delete NetParam_reflection_;
  delete PopParam::default_instance_;
  delete PopParam_reflection_;
  delete ProjParam::default_instance_;
  delete ProjParam_reflection_;
  delete RecParam::default_instance_;
  delete RecParam_reflection_;
  delete RecParam::_default_directory_;
  delete ProcParam::default_instance_;
  delete ProcParam_reflection_;
  delete ProcParamArgI::default_instance_;
  delete ProcParamArgI_reflection_;
  delete ProcParamArgF::default_instance_;
  delete ProcParamArgF_reflection_;
  delete ProcParamArgS::default_instance_;
  delete ProcParamArgS_reflection_;
  delete SolverState::default_instance_;
  delete SolverState_reflection_;
  delete TableState::default_instance_;
  delete TableState_reflection_;
  delete VectorStateI8::default_instance_;
  delete VectorStateI8_reflection_;
  delete VectorStateI16::default_instance_;
  delete VectorStateI16_reflection_;
  delete VectorStateI32::default_instance_;
  delete VectorStateI32_reflection_;
  delete VectorStateI64::default_instance_;
  delete VectorStateI64_reflection_;
  delete VectorStateF16::default_instance_;
  delete VectorStateF16_reflection_;
  delete VectorStateF32::default_instance_;
  delete VectorStateF32_reflection_;
  delete VectorStateF64::default_instance_;
  delete VectorStateF64_reflection_;
  delete StimRawData::default_instance_;
  delete StimRawData_reflection_;
}

void protobuf_AddDesc_gsbn_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ngsbn.proto\022\004gsbn\"\233\001\n\013SolverParam\022!\n\tge"
    "n_param\030\001 \002(\0132\016.gsbn.GenParam\022!\n\tnet_par"
    "am\030\002 \002(\0132\016.gsbn.NetParam\022!\n\trec_param\030\003 "
    "\002(\0132\016.gsbn.RecParam\022#\n\nproc_param\030\004 \003(\0132"
    "\017.gsbn.ProcParam\"u\n\010GenParam\022\021\n\tstim_fil"
    "e\030\001 \001(\t\022\n\n\002dt\030\002 \002(\002\022\022\n\003eps\030\003 \002(\002:\0050.001\022"
    "#\n\nmode_param\030\004 \003(\0132\017.gsbn.ModeParam\022\021\n\t"
    "procedure\030\005 \003(\t\"\204\002\n\tModeParam\022\022\n\nbegin_t"
    "ime\030\001 \002(\002\022\020\n\010end_time\030\002 \002(\002\022\031\n\016begin_lgi"
    "dx_id\030\003 \001(\r:\0010\022\031\n\016begin_lgexp_id\030\004 \001(\r:\001"
    "0\022\031\n\016begin_wmask_id\030\005 \001(\r:\0010\022\024\n\ttime_ste"
    "p\030\006 \001(\r:\0011\022\025\n\nlgidx_step\030\007 \001(\r:\0011\022\025\n\nlge"
    "xp_step\030\010 \001(\r:\0011\022\025\n\nwmask_step\030\t \001(\r:\0011\022"
    "\016\n\003prn\030\n \001(\002:\0011\022\025\n\nplasticity\030\013 \001(\r:\0011\"R"
    "\n\010NetParam\022!\n\tpop_param\030\001 \003(\0132\016.gsbn.Pop"
    "Param\022#\n\nproj_param\030\002 \003(\0132\017.gsbn.ProjPar"
    "am\"\311\002\n\010PopParam\022\017\n\007pop_num\030\001 \002(\r\022\017\n\007hcu_"
    "num\030\002 \002(\r\022\017\n\007mcu_num\030\003 \002(\r\022\022\n\nfanout_num"
    "\030\004 \002(\r\022\022\n\004taum\030\005 \001(\002:\0040.01\022\022\n\007wtagain\030\006 "
    "\001(\002:\0014\022\022\n\005maxfq\030\007 \001(\002:\003100\022\020\n\005igain\030\010 \001("
    "\002:\0011\022\020\n\005wgain\030\t \001(\002:\0011\022\021\n\006lgbias\030\n \001(\002:\001"
    "0\022\021\n\006snoise\030\013 \001(\002:\0010\022\021\n\006adgain\030\014 \001(\002:\0011\022"
    "\022\n\004taua\030\r \001(\002:\0040.05\022\024\n\010position\030\017 \003(\005B\002\020"
    "\001\022\021\n\005shape\030\020 \003(\rB\002\020\001\022\017\n\004type\030\021 \001(\r:\0010\022\017\n"
    "\004rank\030\022 \001(\r:\0010\"\330\001\n\tProjParam\022\017\n\007src_pop\030"
    "\001 \002(\r\022\020\n\010dest_pop\030\002 \002(\r\022\r\n\005tauzi\030\003 \002(\002\022\r"
    "\n\005tauzj\030\004 \002(\002\022\014\n\004taue\030\005 \002(\002\022\014\n\004taup\030\006 \002("
    "\002\022\022\n\005maxfq\030\007 \001(\002:\003100\022\020\n\005bgain\030\010 \001(\002:\0010\022"
    "\020\n\005wgain\030\t \001(\002:\0010\022\017\n\007tauepsc\030\n \001(\002\022\020\n\010sl"
    "ot_num\030\013 \002(\002\022\023\n\010distance\030\014 \001(\002:\0010\" \n\010Rec"
    "Param\022\024\n\tdirectory\030\001 \001(\t:\001.\"\202\001\n\tProcPara"
    "m\022\014\n\004name\030\001 \002(\t\022!\n\004argi\030\002 \003(\0132\023.gsbn.Pro"
    "cParamArgI\022!\n\004argf\030\003 \003(\0132\023.gsbn.ProcPara"
    "mArgF\022!\n\004args\030\004 \003(\0132\023.gsbn.ProcParamArgS"
    "\")\n\rProcParamArgI\022\013\n\003key\030\001 \002(\t\022\013\n\003val\030\002 "
    "\002(\005\")\n\rProcParamArgF\022\013\n\003key\030\001 \002(\t\022\013\n\003val"
    "\030\002 \002(\002\")\n\rProcParamArgS\022\013\n\003key\030\001 \002(\t\022\013\n\003"
    "val\030\002 \002(\t\"\242\003\n\013SolverState\022\021\n\ttimestamp\030\001"
    " \002(\002\022\013\n\003prn\030\002 \002(\002\022%\n\013table_state\030\003 \003(\0132\020"
    ".gsbn.TableState\022,\n\017vector_state_i8\030\004 \003("
    "\0132\023.gsbn.VectorStateI8\022.\n\020vector_state_i"
    "16\030\005 \003(\0132\024.gsbn.VectorStateI16\022.\n\020vector"
    "_state_i32\030\006 \003(\0132\024.gsbn.VectorStateI32\022."
    "\n\020vector_state_i64\030\007 \003(\0132\024.gsbn.VectorSt"
    "ateI64\022.\n\020vector_state_f16\030\010 \003(\0132\024.gsbn."
    "VectorStateF16\022.\n\020vector_state_f32\030\t \003(\013"
    "2\024.gsbn.VectorStateF32\022.\n\020vector_state_f"
    "64\030\n \003(\0132\024.gsbn.VectorStateF64\"6\n\nTableS"
    "tate\022\014\n\004name\030\001 \002(\t\022\014\n\004desc\030\002 \002(\014\022\014\n\004data"
    "\030\003 \002(\014\">\n\rVectorStateI8\022\014\n\004name\030\001 \002(\t\022\r\n"
    "\002ld\030\002 \001(\r:\0011\022\020\n\004data\030\003 \003(\005B\002\020\001\"\?\n\016Vector"
    "StateI16\022\014\n\004name\030\001 \002(\t\022\r\n\002ld\030\002 \001(\r:\0011\022\020\n"
    "\004data\030\003 \003(\005B\002\020\001\"\?\n\016VectorStateI32\022\014\n\004nam"
    "e\030\001 \002(\t\022\r\n\002ld\030\002 \001(\r:\0011\022\020\n\004data\030\003 \003(\005B\002\020\001"
    "\"\?\n\016VectorStateI64\022\014\n\004name\030\001 \002(\t\022\r\n\002ld\030\002"
    " \001(\r:\0011\022\020\n\004data\030\003 \003(\003B\002\020\001\"\?\n\016VectorState"
    "F16\022\014\n\004name\030\001 \002(\t\022\r\n\002ld\030\002 \001(\r:\0011\022\020\n\004data"
    "\030\003 \003(\002B\002\020\001\"\?\n\016VectorStateF32\022\014\n\004name\030\001 \002"
    "(\t\022\r\n\002ld\030\002 \001(\r:\0011\022\020\n\004data\030\003 \003(\002B\002\020\001\"\?\n\016V"
    "ectorStateF64\022\014\n\004name\030\001 \002(\t\022\r\n\002ld\030\002 \001(\r:"
    "\0011\022\020\n\004data\030\003 \003(\001B\002\020\001\"}\n\013StimRawData\022\021\n\td"
    "ata_rows\030\001 \002(\r\022\021\n\tdata_cols\030\002 \002(\r\022\020\n\004dat"
    "a\030\003 \003(\rB\002\020\001\022\021\n\tmask_rows\030\004 \002(\r\022\021\n\tmask_c"
    "ols\030\005 \002(\r\022\020\n\004mask\030\006 \003(\002B\002\020\001", 2547);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gsbn.proto", &protobuf_RegisterTypes);
  SolverParam::default_instance_ = new SolverParam();
  GenParam::default_instance_ = new GenParam();
  ModeParam::default_instance_ = new ModeParam();
  NetParam::default_instance_ = new NetParam();
  PopParam::default_instance_ = new PopParam();
  ProjParam::default_instance_ = new ProjParam();
  RecParam::_default_directory_ =
      new ::std::string(".", 1);
  RecParam::default_instance_ = new RecParam();
  ProcParam::default_instance_ = new ProcParam();
  ProcParamArgI::default_instance_ = new ProcParamArgI();
  ProcParamArgF::default_instance_ = new ProcParamArgF();
  ProcParamArgS::default_instance_ = new ProcParamArgS();
  SolverState::default_instance_ = new SolverState();
  TableState::default_instance_ = new TableState();
  VectorStateI8::default_instance_ = new VectorStateI8();
  VectorStateI16::default_instance_ = new VectorStateI16();
  VectorStateI32::default_instance_ = new VectorStateI32();
  VectorStateI64::default_instance_ = new VectorStateI64();
  VectorStateF16::default_instance_ = new VectorStateF16();
  VectorStateF32::default_instance_ = new VectorStateF32();
  VectorStateF64::default_instance_ = new VectorStateF64();
  StimRawData::default_instance_ = new StimRawData();
  SolverParam::default_instance_->InitAsDefaultInstance();
  GenParam::default_instance_->InitAsDefaultInstance();
  ModeParam::default_instance_->InitAsDefaultInstance();
  NetParam::default_instance_->InitAsDefaultInstance();
  PopParam::default_instance_->InitAsDefaultInstance();
  ProjParam::default_instance_->InitAsDefaultInstance();
  RecParam::default_instance_->InitAsDefaultInstance();
  ProcParam::default_instance_->InitAsDefaultInstance();
  ProcParamArgI::default_instance_->InitAsDefaultInstance();
  ProcParamArgF::default_instance_->InitAsDefaultInstance();
  ProcParamArgS::default_instance_->InitAsDefaultInstance();
  SolverState::default_instance_->InitAsDefaultInstance();
  TableState::default_instance_->InitAsDefaultInstance();
  VectorStateI8::default_instance_->InitAsDefaultInstance();
  VectorStateI16::default_instance_->InitAsDefaultInstance();
  VectorStateI32::default_instance_->InitAsDefaultInstance();
  VectorStateI64::default_instance_->InitAsDefaultInstance();
  VectorStateF16::default_instance_->InitAsDefaultInstance();
  VectorStateF32::default_instance_->InitAsDefaultInstance();
  VectorStateF64::default_instance_->InitAsDefaultInstance();
  StimRawData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_gsbn_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_gsbn_2eproto {
  StaticDescriptorInitializer_gsbn_2eproto() {
    protobuf_AddDesc_gsbn_2eproto();
  }
} static_descriptor_initializer_gsbn_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SolverParam::kGenParamFieldNumber;
const int SolverParam::kNetParamFieldNumber;
const int SolverParam::kRecParamFieldNumber;
const int SolverParam::kProcParamFieldNumber;
#endif  // !_MSC_VER

SolverParam::SolverParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SolverParam::InitAsDefaultInstance() {
  gen_param_ = const_cast< ::gsbn::GenParam*>(&::gsbn::GenParam::default_instance());
  net_param_ = const_cast< ::gsbn::NetParam*>(&::gsbn::NetParam::default_instance());
  rec_param_ = const_cast< ::gsbn::RecParam*>(&::gsbn::RecParam::default_instance());
}

SolverParam::SolverParam(const SolverParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SolverParam::SharedCtor() {
  _cached_size_ = 0;
  gen_param_ = NULL;
  net_param_ = NULL;
  rec_param_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SolverParam::~SolverParam() {
  SharedDtor();
}

void SolverParam::SharedDtor() {
  if (this != default_instance_) {
    delete gen_param_;
    delete net_param_;
    delete rec_param_;
  }
}

void SolverParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SolverParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SolverParam_descriptor_;
}

const SolverParam& SolverParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gsbn_2eproto();
  return *default_instance_;
}

SolverParam* SolverParam::default_instance_ = NULL;

SolverParam* SolverParam::New() const {
  return new SolverParam;
}

void SolverParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_gen_param()) {
      if (gen_param_ != NULL) gen_param_->::gsbn::GenParam::Clear();
    }
    if (has_net_param()) {
      if (net_param_ != NULL) net_param_->::gsbn::NetParam::Clear();
    }
    if (has_rec_param()) {
      if (rec_param_ != NULL) rec_param_->::gsbn::RecParam::Clear();
    }
  }
  proc_param_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SolverParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gsbn.GenParam gen_param = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gen_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_net_param;
        break;
      }

      // required .gsbn.NetParam net_param = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_net_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_net_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rec_param;
        break;
      }

      // required .gsbn.RecParam rec_param = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rec_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rec_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_proc_param;
        break;
      }

      // repeated .gsbn.ProcParam proc_param = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_proc_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_proc_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_proc_param;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SolverParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .gsbn.GenParam gen_param = 1;
  if (has_gen_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gen_param(), output);
  }

  // required .gsbn.NetParam net_param = 2;
  if (has_net_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->net_param(), output);
  }

  // required .gsbn.RecParam rec_param = 3;
  if (has_rec_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rec_param(), output);
  }

  // repeated .gsbn.ProcParam proc_param = 4;
  for (int i = 0; i < this->proc_param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->proc_param(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SolverParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .gsbn.GenParam gen_param = 1;
  if (has_gen_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gen_param(), target);
  }

  // required .gsbn.NetParam net_param = 2;
  if (has_net_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->net_param(), target);
  }

  // required .gsbn.RecParam rec_param = 3;
  if (has_rec_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rec_param(), target);
  }

  // repeated .gsbn.ProcParam proc_param = 4;
  for (int i = 0; i < this->proc_param_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->proc_param(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SolverParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .gsbn.GenParam gen_param = 1;
    if (has_gen_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gen_param());
    }

    // required .gsbn.NetParam net_param = 2;
    if (has_net_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->net_param());
    }

    // required .gsbn.RecParam rec_param = 3;
    if (has_rec_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rec_param());
    }

  }
  // repeated .gsbn.ProcParam proc_param = 4;
  total_size += 1 * this->proc_param_size();
  for (int i = 0; i < this->proc_param_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->proc_param(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SolverParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SolverParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SolverParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SolverParam::MergeFrom(const SolverParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  proc_param_.MergeFrom(from.proc_param_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gen_param()) {
      mutable_gen_param()->::gsbn::GenParam::MergeFrom(from.gen_param());
    }
    if (from.has_net_param()) {
      mutable_net_param()->::gsbn::NetParam::MergeFrom(from.net_param());
    }
    if (from.has_rec_param()) {
      mutable_rec_param()->::gsbn::RecParam::MergeFrom(from.rec_param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SolverParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SolverParam::CopyFrom(const SolverParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SolverParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_gen_param()) {
    if (!this->gen_param().IsInitialized()) return false;
  }
  if (has_net_param()) {
    if (!this->net_param().IsInitialized()) return false;
  }
  for (int i = 0; i < proc_param_size(); i++) {
    if (!this->proc_param(i).IsInitialized()) return false;
  }
  return true;
}

void SolverParam::Swap(SolverParam* other) {
  if (other != this) {
    std::swap(gen_param_, other->gen_param_);
    std::swap(net_param_, other->net_param_);
    std::swap(rec_param_, other->rec_param_);
    proc_param_.Swap(&other->proc_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SolverParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SolverParam_descriptor_;
  metadata.reflection = SolverParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GenParam::kStimFileFieldNumber;
const int GenParam::kDtFieldNumber;
const int GenParam::kEpsFieldNumber;
const int GenParam::kModeParamFieldNumber;
const int GenParam::kProcedureFieldNumber;
#endif  // !_MSC_VER

GenParam::GenParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GenParam::InitAsDefaultInstance() {
}

GenParam::GenParam(const GenParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GenParam::SharedCtor() {
  _cached_size_ = 0;
  stim_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dt_ = 0;
  eps_ = 0.001f;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GenParam::~GenParam() {
  SharedDtor();
}

void GenParam::SharedDtor() {
  if (stim_file_ != &::google::protobuf::internal::kEmptyString) {
    delete stim_file_;
  }
  if (this != default_instance_) {
  }
}

void GenParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GenParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GenParam_descriptor_;
}

const GenParam& GenParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gsbn_2eproto();
  return *default_instance_;
}

GenParam* GenParam::default_instance_ = NULL;

GenParam* GenParam::New() const {
  return new GenParam;
}

void GenParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stim_file()) {
      if (stim_file_ != &::google::protobuf::internal::kEmptyString) {
        stim_file_->clear();
      }
    }
    dt_ = 0;
    eps_ = 0.001f;
  }
  mode_param_.Clear();
  procedure_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GenParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string stim_file = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stim_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stim_file().data(), this->stim_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_dt;
        break;
      }

      // required float dt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dt_)));
          set_has_dt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_eps;
        break;
      }

      // required float eps = 3 [default = 0.001];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_eps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &eps_)));
          set_has_eps();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_mode_param;
        break;
      }

      // repeated .gsbn.ModeParam mode_param = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mode_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mode_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_mode_param;
        if (input->ExpectTag(42)) goto parse_procedure;
        break;
      }

      // repeated string procedure = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_procedure:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_procedure()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->procedure(this->procedure_size() - 1).data(),
            this->procedure(this->procedure_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_procedure;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GenParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string stim_file = 1;
  if (has_stim_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stim_file().data(), this->stim_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->stim_file(), output);
  }

  // required float dt = 2;
  if (has_dt()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->dt(), output);
  }

  // required float eps = 3 [default = 0.001];
  if (has_eps()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->eps(), output);
  }

  // repeated .gsbn.ModeParam mode_param = 4;
  for (int i = 0; i < this->mode_param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->mode_param(i), output);
  }

  // repeated string procedure = 5;
  for (int i = 0; i < this->procedure_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->procedure(i).data(), this->procedure(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->procedure(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GenParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string stim_file = 1;
  if (has_stim_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stim_file().data(), this->stim_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stim_file(), target);
  }

  // required float dt = 2;
  if (has_dt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->dt(), target);
  }

  // required float eps = 3 [default = 0.001];
  if (has_eps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->eps(), target);
  }

  // repeated .gsbn.ModeParam mode_param = 4;
  for (int i = 0; i < this->mode_param_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->mode_param(i), target);
  }

  // repeated string procedure = 5;
  for (int i = 0; i < this->procedure_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->procedure(i).data(), this->procedure(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->procedure(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GenParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string stim_file = 1;
    if (has_stim_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stim_file());
    }

    // required float dt = 2;
    if (has_dt()) {
      total_size += 1 + 4;
    }

    // required float eps = 3 [default = 0.001];
    if (has_eps()) {
      total_size += 1 + 4;
    }

  }
  // repeated .gsbn.ModeParam mode_param = 4;
  total_size += 1 * this->mode_param_size();
  for (int i = 0; i < this->mode_param_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mode_param(i));
  }

  // repeated string procedure = 5;
  total_size += 1 * this->procedure_size();
  for (int i = 0; i < this->procedure_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->procedure(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GenParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GenParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GenParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GenParam::MergeFrom(const GenParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  mode_param_.MergeFrom(from.mode_param_);
  procedure_.MergeFrom(from.procedure_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stim_file()) {
      set_stim_file(from.stim_file());
    }
    if (from.has_dt()) {
      set_dt(from.dt());
    }
    if (from.has_eps()) {
      set_eps(from.eps());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GenParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenParam::CopyFrom(const GenParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  for (int i = 0; i < mode_param_size(); i++) {
    if (!this->mode_param(i).IsInitialized()) return false;
  }
  return true;
}

void GenParam::Swap(GenParam* other) {
  if (other != this) {
    std::swap(stim_file_, other->stim_file_);
    std::swap(dt_, other->dt_);
    std::swap(eps_, other->eps_);
    mode_param_.Swap(&other->mode_param_);
    procedure_.Swap(&other->procedure_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GenParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GenParam_descriptor_;
  metadata.reflection = GenParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModeParam::kBeginTimeFieldNumber;
const int ModeParam::kEndTimeFieldNumber;
const int ModeParam::kBeginLgidxIdFieldNumber;
const int ModeParam::kBeginLgexpIdFieldNumber;
const int ModeParam::kBeginWmaskIdFieldNumber;
const int ModeParam::kTimeStepFieldNumber;
const int ModeParam::kLgidxStepFieldNumber;
const int ModeParam::kLgexpStepFieldNumber;
const int ModeParam::kWmaskStepFieldNumber;
const int ModeParam::kPrnFieldNumber;
const int ModeParam::kPlasticityFieldNumber;
#endif  // !_MSC_VER

ModeParam::ModeParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModeParam::InitAsDefaultInstance() {
}

ModeParam::ModeParam(const ModeParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModeParam::SharedCtor() {
  _cached_size_ = 0;
  begin_time_ = 0;
  end_time_ = 0;
  begin_lgidx_id_ = 0u;
  begin_lgexp_id_ = 0u;
  begin_wmask_id_ = 0u;
  time_step_ = 1u;
  lgidx_step_ = 1u;
  lgexp_step_ = 1u;
  wmask_step_ = 1u;
  prn_ = 1;
  plasticity_ = 1u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModeParam::~ModeParam() {
  SharedDtor();
}

void ModeParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ModeParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModeParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModeParam_descriptor_;
}

const ModeParam& ModeParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gsbn_2eproto();
  return *default_instance_;
}

ModeParam* ModeParam::default_instance_ = NULL;

ModeParam* ModeParam::New() const {
  return new ModeParam;
}

void ModeParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    begin_time_ = 0;
    end_time_ = 0;
    begin_lgidx_id_ = 0u;
    begin_lgexp_id_ = 0u;
    begin_wmask_id_ = 0u;
    time_step_ = 1u;
    lgidx_step_ = 1u;
    lgexp_step_ = 1u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    wmask_step_ = 1u;
    prn_ = 1;
    plasticity_ = 1u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModeParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float begin_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &begin_time_)));
          set_has_begin_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_end_time;
        break;
      }

      // required float end_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_begin_lgidx_id;
        break;
      }

      // optional uint32 begin_lgidx_id = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_begin_lgidx_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &begin_lgidx_id_)));
          set_has_begin_lgidx_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_begin_lgexp_id;
        break;
      }

      // optional uint32 begin_lgexp_id = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_begin_lgexp_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &begin_lgexp_id_)));
          set_has_begin_lgexp_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_begin_wmask_id;
        break;
      }

      // optional uint32 begin_wmask_id = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_begin_wmask_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &begin_wmask_id_)));
          set_has_begin_wmask_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_time_step;
        break;
      }

      // optional uint32 time_step = 6 [default = 1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_step_)));
          set_has_time_step();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_lgidx_step;
        break;
      }

      // optional uint32 lgidx_step = 7 [default = 1];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lgidx_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lgidx_step_)));
          set_has_lgidx_step();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_lgexp_step;
        break;
      }

      // optional uint32 lgexp_step = 8 [default = 1];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lgexp_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lgexp_step_)));
          set_has_lgexp_step();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_wmask_step;
        break;
      }

      // optional uint32 wmask_step = 9 [default = 1];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wmask_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wmask_step_)));
          set_has_wmask_step();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_prn;
        break;
      }

      // optional float prn = 10 [default = 1];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_prn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &prn_)));
          set_has_prn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_plasticity;
        break;
      }

      // optional uint32 plasticity = 11 [default = 1];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_plasticity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &plasticity_)));
          set_has_plasticity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModeParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float begin_time = 1;
  if (has_begin_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->begin_time(), output);
  }

  // required float end_time = 2;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->end_time(), output);
  }

  // optional uint32 begin_lgidx_id = 3 [default = 0];
  if (has_begin_lgidx_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->begin_lgidx_id(), output);
  }

  // optional uint32 begin_lgexp_id = 4 [default = 0];
  if (has_begin_lgexp_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->begin_lgexp_id(), output);
  }

  // optional uint32 begin_wmask_id = 5 [default = 0];
  if (has_begin_wmask_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->begin_wmask_id(), output);
  }

  // optional uint32 time_step = 6 [default = 1];
  if (has_time_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->time_step(), output);
  }

  // optional uint32 lgidx_step = 7 [default = 1];
  if (has_lgidx_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->lgidx_step(), output);
  }

  // optional uint32 lgexp_step = 8 [default = 1];
  if (has_lgexp_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->lgexp_step(), output);
  }

  // optional uint32 wmask_step = 9 [default = 1];
  if (has_wmask_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->wmask_step(), output);
  }

  // optional float prn = 10 [default = 1];
  if (has_prn()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->prn(), output);
  }

  // optional uint32 plasticity = 11 [default = 1];
  if (has_plasticity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->plasticity(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModeParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float begin_time = 1;
  if (has_begin_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->begin_time(), target);
  }

  // required float end_time = 2;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->end_time(), target);
  }

  // optional uint32 begin_lgidx_id = 3 [default = 0];
  if (has_begin_lgidx_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->begin_lgidx_id(), target);
  }

  // optional uint32 begin_lgexp_id = 4 [default = 0];
  if (has_begin_lgexp_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->begin_lgexp_id(), target);
  }

  // optional uint32 begin_wmask_id = 5 [default = 0];
  if (has_begin_wmask_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->begin_wmask_id(), target);
  }

  // optional uint32 time_step = 6 [default = 1];
  if (has_time_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->time_step(), target);
  }

  // optional uint32 lgidx_step = 7 [default = 1];
  if (has_lgidx_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->lgidx_step(), target);
  }

  // optional uint32 lgexp_step = 8 [default = 1];
  if (has_lgexp_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->lgexp_step(), target);
  }

  // optional uint32 wmask_step = 9 [default = 1];
  if (has_wmask_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->wmask_step(), target);
  }

  // optional float prn = 10 [default = 1];
  if (has_prn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->prn(), target);
  }

  // optional uint32 plasticity = 11 [default = 1];
  if (has_plasticity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->plasticity(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModeParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float begin_time = 1;
    if (has_begin_time()) {
      total_size += 1 + 4;
    }

    // required float end_time = 2;
    if (has_end_time()) {
      total_size += 1 + 4;
    }

    // optional uint32 begin_lgidx_id = 3 [default = 0];
    if (has_begin_lgidx_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->begin_lgidx_id());
    }

    // optional uint32 begin_lgexp_id = 4 [default = 0];
    if (has_begin_lgexp_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->begin_lgexp_id());
    }

    // optional uint32 begin_wmask_id = 5 [default = 0];
    if (has_begin_wmask_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->begin_wmask_id());
    }

    // optional uint32 time_step = 6 [default = 1];
    if (has_time_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_step());
    }

    // optional uint32 lgidx_step = 7 [default = 1];
    if (has_lgidx_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lgidx_step());
    }

    // optional uint32 lgexp_step = 8 [default = 1];
    if (has_lgexp_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lgexp_step());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 wmask_step = 9 [default = 1];
    if (has_wmask_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wmask_step());
    }

    // optional float prn = 10 [default = 1];
    if (has_prn()) {
      total_size += 1 + 4;
    }

    // optional uint32 plasticity = 11 [default = 1];
    if (has_plasticity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->plasticity());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModeParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModeParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModeParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModeParam::MergeFrom(const ModeParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_begin_time()) {
      set_begin_time(from.begin_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_begin_lgidx_id()) {
      set_begin_lgidx_id(from.begin_lgidx_id());
    }
    if (from.has_begin_lgexp_id()) {
      set_begin_lgexp_id(from.begin_lgexp_id());
    }
    if (from.has_begin_wmask_id()) {
      set_begin_wmask_id(from.begin_wmask_id());
    }
    if (from.has_time_step()) {
      set_time_step(from.time_step());
    }
    if (from.has_lgidx_step()) {
      set_lgidx_step(from.lgidx_step());
    }
    if (from.has_lgexp_step()) {
      set_lgexp_step(from.lgexp_step());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_wmask_step()) {
      set_wmask_step(from.wmask_step());
    }
    if (from.has_prn()) {
      set_prn(from.prn());
    }
    if (from.has_plasticity()) {
      set_plasticity(from.plasticity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModeParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModeParam::CopyFrom(const ModeParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModeParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ModeParam::Swap(ModeParam* other) {
  if (other != this) {
    std::swap(begin_time_, other->begin_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(begin_lgidx_id_, other->begin_lgidx_id_);
    std::swap(begin_lgexp_id_, other->begin_lgexp_id_);
    std::swap(begin_wmask_id_, other->begin_wmask_id_);
    std::swap(time_step_, other->time_step_);
    std::swap(lgidx_step_, other->lgidx_step_);
    std::swap(lgexp_step_, other->lgexp_step_);
    std::swap(wmask_step_, other->wmask_step_);
    std::swap(prn_, other->prn_);
    std::swap(plasticity_, other->plasticity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModeParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModeParam_descriptor_;
  metadata.reflection = ModeParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NetParam::kPopParamFieldNumber;
const int NetParam::kProjParamFieldNumber;
#endif  // !_MSC_VER

NetParam::NetParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetParam::InitAsDefaultInstance() {
}

NetParam::NetParam(const NetParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetParam::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetParam::~NetParam() {
  SharedDtor();
}

void NetParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetParam_descriptor_;
}

const NetParam& NetParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gsbn_2eproto();
  return *default_instance_;
}

NetParam* NetParam::default_instance_ = NULL;

NetParam* NetParam::New() const {
  return new NetParam;
}

void NetParam::Clear() {
  pop_param_.Clear();
  proj_param_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .gsbn.PopParam pop_param = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pop_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pop_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_pop_param;
        if (input->ExpectTag(18)) goto parse_proj_param;
        break;
      }

      // repeated .gsbn.ProjParam proj_param = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_proj_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_proj_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_proj_param;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .gsbn.PopParam pop_param = 1;
  for (int i = 0; i < this->pop_param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pop_param(i), output);
  }

  // repeated .gsbn.ProjParam proj_param = 2;
  for (int i = 0; i < this->proj_param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->proj_param(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .gsbn.PopParam pop_param = 1;
  for (int i = 0; i < this->pop_param_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pop_param(i), target);
  }

  // repeated .gsbn.ProjParam proj_param = 2;
  for (int i = 0; i < this->proj_param_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->proj_param(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetParam::ByteSize() const {
  int total_size = 0;

  // repeated .gsbn.PopParam pop_param = 1;
  total_size += 1 * this->pop_param_size();
  for (int i = 0; i < this->pop_param_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pop_param(i));
  }

  // repeated .gsbn.ProjParam proj_param = 2;
  total_size += 1 * this->proj_param_size();
  for (int i = 0; i < this->proj_param_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->proj_param(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetParam::MergeFrom(const NetParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  pop_param_.MergeFrom(from.pop_param_);
  proj_param_.MergeFrom(from.proj_param_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetParam::CopyFrom(const NetParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetParam::IsInitialized() const {

  for (int i = 0; i < pop_param_size(); i++) {
    if (!this->pop_param(i).IsInitialized()) return false;
  }
  for (int i = 0; i < proj_param_size(); i++) {
    if (!this->proj_param(i).IsInitialized()) return false;
  }
  return true;
}

void NetParam::Swap(NetParam* other) {
  if (other != this) {
    pop_param_.Swap(&other->pop_param_);
    proj_param_.Swap(&other->proj_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetParam_descriptor_;
  metadata.reflection = NetParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PopParam::kPopNumFieldNumber;
const int PopParam::kHcuNumFieldNumber;
const int PopParam::kMcuNumFieldNumber;
const int PopParam::kFanoutNumFieldNumber;
const int PopParam::kTaumFieldNumber;
const int PopParam::kWtagainFieldNumber;
const int PopParam::kMaxfqFieldNumber;
const int PopParam::kIgainFieldNumber;
const int PopParam::kWgainFieldNumber;
const int PopParam::kLgbiasFieldNumber;
const int PopParam::kSnoiseFieldNumber;
const int PopParam::kAdgainFieldNumber;
const int PopParam::kTauaFieldNumber;
const int PopParam::kPositionFieldNumber;
const int PopParam::kShapeFieldNumber;
const int PopParam::kTypeFieldNumber;
const int PopParam::kRankFieldNumber;
#endif  // !_MSC_VER

PopParam::PopParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PopParam::InitAsDefaultInstance() {
}

PopParam::PopParam(const PopParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PopParam::SharedCtor() {
  _cached_size_ = 0;
  pop_num_ = 0u;
  hcu_num_ = 0u;
  mcu_num_ = 0u;
  fanout_num_ = 0u;
  taum_ = 0.01f;
  wtagain_ = 4;
  maxfq_ = 100;
  igain_ = 1;
  wgain_ = 1;
  lgbias_ = 0;
  snoise_ = 0;
  adgain_ = 1;
  taua_ = 0.05f;
  type_ = 0u;
  rank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PopParam::~PopParam() {
  SharedDtor();
}

void PopParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PopParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PopParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PopParam_descriptor_;
}

const PopParam& PopParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gsbn_2eproto();
  return *default_instance_;
}

PopParam* PopParam::default_instance_ = NULL;

PopParam* PopParam::New() const {
  return new PopParam;
}

void PopParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pop_num_ = 0u;
    hcu_num_ = 0u;
    mcu_num_ = 0u;
    fanout_num_ = 0u;
    taum_ = 0.01f;
    wtagain_ = 4;
    maxfq_ = 100;
    igain_ = 1;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    wgain_ = 1;
    lgbias_ = 0;
    snoise_ = 0;
    adgain_ = 1;
    taua_ = 0.05f;
    type_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    rank_ = 0u;
  }
  position_.Clear();
  shape_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PopParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 pop_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pop_num_)));
          set_has_pop_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hcu_num;
        break;
      }

      // required uint32 hcu_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hcu_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hcu_num_)));
          set_has_hcu_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mcu_num;
        break;
      }

      // required uint32 mcu_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mcu_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcu_num_)));
          set_has_mcu_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fanout_num;
        break;
      }

      // required uint32 fanout_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fanout_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fanout_num_)));
          set_has_fanout_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_taum;
        break;
      }

      // optional float taum = 5 [default = 0.01];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_taum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &taum_)));
          set_has_taum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_wtagain;
        break;
      }

      // optional float wtagain = 6 [default = 4];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_wtagain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wtagain_)));
          set_has_wtagain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_maxfq;
        break;
      }

      // optional float maxfq = 7 [default = 100];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_maxfq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxfq_)));
          set_has_maxfq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_igain;
        break;
      }

      // optional float igain = 8 [default = 1];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_igain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &igain_)));
          set_has_igain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_wgain;
        break;
      }

      // optional float wgain = 9 [default = 1];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_wgain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wgain_)));
          set_has_wgain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_lgbias;
        break;
      }

      // optional float lgbias = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_lgbias:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lgbias_)));
          set_has_lgbias();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_snoise;
        break;
      }

      // optional float snoise = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_snoise:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &snoise_)));
          set_has_snoise();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_adgain;
        break;
      }

      // optional float adgain = 12 [default = 1];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_adgain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &adgain_)));
          set_has_adgain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_taua;
        break;
      }

      // optional float taua = 13 [default = 0.05];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_taua:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &taua_)));
          set_has_taua();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_position;
        break;
      }

      // repeated int32 position = 15 [packed = true];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_position())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 122, input, this->mutable_position())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_shape;
        break;
      }

      // repeated uint32 shape = 16 [packed = true];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shape:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_shape())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 130, input, this->mutable_shape())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_type;
        break;
      }

      // optional uint32 type = 17 [default = 0];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_rank;
        break;
      }

      // optional uint32 rank = 18 [default = 0];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PopParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 pop_num = 1;
  if (has_pop_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pop_num(), output);
  }

  // required uint32 hcu_num = 2;
  if (has_hcu_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hcu_num(), output);
  }

  // required uint32 mcu_num = 3;
  if (has_mcu_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mcu_num(), output);
  }

  // required uint32 fanout_num = 4;
  if (has_fanout_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->fanout_num(), output);
  }

  // optional float taum = 5 [default = 0.01];
  if (has_taum()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->taum(), output);
  }

  // optional float wtagain = 6 [default = 4];
  if (has_wtagain()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->wtagain(), output);
  }

  // optional float maxfq = 7 [default = 100];
  if (has_maxfq()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->maxfq(), output);
  }

  // optional float igain = 8 [default = 1];
  if (has_igain()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->igain(), output);
  }

  // optional float wgain = 9 [default = 1];
  if (has_wgain()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->wgain(), output);
  }

  // optional float lgbias = 10 [default = 0];
  if (has_lgbias()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->lgbias(), output);
  }

  // optional float snoise = 11 [default = 0];
  if (has_snoise()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->snoise(), output);
  }

  // optional float adgain = 12 [default = 1];
  if (has_adgain()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->adgain(), output);
  }

  // optional float taua = 13 [default = 0.05];
  if (has_taua()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->taua(), output);
  }

  // repeated int32 position = 15 [packed = true];
  if (this->position_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(15, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_position_cached_byte_size_);
  }
  for (int i = 0; i < this->position_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->position(i), output);
  }

  // repeated uint32 shape = 16 [packed = true];
  if (this->shape_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(16, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_shape_cached_byte_size_);
  }
  for (int i = 0; i < this->shape_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->shape(i), output);
  }

  // optional uint32 type = 17 [default = 0];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->type(), output);
  }

  // optional uint32 rank = 18 [default = 0];
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PopParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 pop_num = 1;
  if (has_pop_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pop_num(), target);
  }

  // required uint32 hcu_num = 2;
  if (has_hcu_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hcu_num(), target);
  }

  // required uint32 mcu_num = 3;
  if (has_mcu_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mcu_num(), target);
  }

  // required uint32 fanout_num = 4;
  if (has_fanout_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->fanout_num(), target);
  }

  // optional float taum = 5 [default = 0.01];
  if (has_taum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->taum(), target);
  }

  // optional float wtagain = 6 [default = 4];
  if (has_wtagain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->wtagain(), target);
  }

  // optional float maxfq = 7 [default = 100];
  if (has_maxfq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->maxfq(), target);
  }

  // optional float igain = 8 [default = 1];
  if (has_igain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->igain(), target);
  }

  // optional float wgain = 9 [default = 1];
  if (has_wgain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->wgain(), target);
  }

  // optional float lgbias = 10 [default = 0];
  if (has_lgbias()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->lgbias(), target);
  }

  // optional float snoise = 11 [default = 0];
  if (has_snoise()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->snoise(), target);
  }

  // optional float adgain = 12 [default = 1];
  if (has_adgain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->adgain(), target);
  }

  // optional float taua = 13 [default = 0.05];
  if (has_taua()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->taua(), target);
  }

  // repeated int32 position = 15 [packed = true];
  if (this->position_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      15,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _position_cached_byte_size_, target);
  }
  for (int i = 0; i < this->position_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->position(i), target);
  }

  // repeated uint32 shape = 16 [packed = true];
  if (this->shape_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      16,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _shape_cached_byte_size_, target);
  }
  for (int i = 0; i < this->shape_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->shape(i), target);
  }

  // optional uint32 type = 17 [default = 0];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->type(), target);
  }

  // optional uint32 rank = 18 [default = 0];
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PopParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 pop_num = 1;
    if (has_pop_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pop_num());
    }

    // required uint32 hcu_num = 2;
    if (has_hcu_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hcu_num());
    }

    // required uint32 mcu_num = 3;
    if (has_mcu_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcu_num());
    }

    // required uint32 fanout_num = 4;
    if (has_fanout_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fanout_num());
    }

    // optional float taum = 5 [default = 0.01];
    if (has_taum()) {
      total_size += 1 + 4;
    }

    // optional float wtagain = 6 [default = 4];
    if (has_wtagain()) {
      total_size += 1 + 4;
    }

    // optional float maxfq = 7 [default = 100];
    if (has_maxfq()) {
      total_size += 1 + 4;
    }

    // optional float igain = 8 [default = 1];
    if (has_igain()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float wgain = 9 [default = 1];
    if (has_wgain()) {
      total_size += 1 + 4;
    }

    // optional float lgbias = 10 [default = 0];
    if (has_lgbias()) {
      total_size += 1 + 4;
    }

    // optional float snoise = 11 [default = 0];
    if (has_snoise()) {
      total_size += 1 + 4;
    }

    // optional float adgain = 12 [default = 1];
    if (has_adgain()) {
      total_size += 1 + 4;
    }

    // optional float taua = 13 [default = 0.05];
    if (has_taua()) {
      total_size += 1 + 4;
    }

    // optional uint32 type = 17 [default = 0];
    if (has_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 rank = 18 [default = 0];
    if (has_rank()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

  }
  // repeated int32 position = 15 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->position_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->position(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _position_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 shape = 16 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->shape_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->shape(i));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _shape_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PopParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PopParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PopParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PopParam::MergeFrom(const PopParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  position_.MergeFrom(from.position_);
  shape_.MergeFrom(from.shape_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pop_num()) {
      set_pop_num(from.pop_num());
    }
    if (from.has_hcu_num()) {
      set_hcu_num(from.hcu_num());
    }
    if (from.has_mcu_num()) {
      set_mcu_num(from.mcu_num());
    }
    if (from.has_fanout_num()) {
      set_fanout_num(from.fanout_num());
    }
    if (from.has_taum()) {
      set_taum(from.taum());
    }
    if (from.has_wtagain()) {
      set_wtagain(from.wtagain());
    }
    if (from.has_maxfq()) {
      set_maxfq(from.maxfq());
    }
    if (from.has_igain()) {
      set_igain(from.igain());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_wgain()) {
      set_wgain(from.wgain());
    }
    if (from.has_lgbias()) {
      set_lgbias(from.lgbias());
    }
    if (from.has_snoise()) {
      set_snoise(from.snoise());
    }
    if (from.has_adgain()) {
      set_adgain(from.adgain());
    }
    if (from.has_taua()) {
      set_taua(from.taua());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PopParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PopParam::CopyFrom(const PopParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PopParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void PopParam::Swap(PopParam* other) {
  if (other != this) {
    std::swap(pop_num_, other->pop_num_);
    std::swap(hcu_num_, other->hcu_num_);
    std::swap(mcu_num_, other->mcu_num_);
    std::swap(fanout_num_, other->fanout_num_);
    std::swap(taum_, other->taum_);
    std::swap(wtagain_, other->wtagain_);
    std::swap(maxfq_, other->maxfq_);
    std::swap(igain_, other->igain_);
    std::swap(wgain_, other->wgain_);
    std::swap(lgbias_, other->lgbias_);
    std::swap(snoise_, other->snoise_);
    std::swap(adgain_, other->adgain_);
    std::swap(taua_, other->taua_);
    position_.Swap(&other->position_);
    shape_.Swap(&other->shape_);
    std::swap(type_, other->type_);
    std::swap(rank_, other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PopParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PopParam_descriptor_;
  metadata.reflection = PopParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProjParam::kSrcPopFieldNumber;
const int ProjParam::kDestPopFieldNumber;
const int ProjParam::kTauziFieldNumber;
const int ProjParam::kTauzjFieldNumber;
const int ProjParam::kTaueFieldNumber;
const int ProjParam::kTaupFieldNumber;
const int ProjParam::kMaxfqFieldNumber;
const int ProjParam::kBgainFieldNumber;
const int ProjParam::kWgainFieldNumber;
const int ProjParam::kTauepscFieldNumber;
const int ProjParam::kSlotNumFieldNumber;
const int ProjParam::kDistanceFieldNumber;
#endif  // !_MSC_VER

ProjParam::ProjParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProjParam::InitAsDefaultInstance() {
}

ProjParam::ProjParam(const ProjParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProjParam::SharedCtor() {
  _cached_size_ = 0;
  src_pop_ = 0u;
  dest_pop_ = 0u;
  tauzi_ = 0;
  tauzj_ = 0;
  taue_ = 0;
  taup_ = 0;
  maxfq_ = 100;
  bgain_ = 0;
  wgain_ = 0;
  tauepsc_ = 0;
  slot_num_ = 0;
  distance_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProjParam::~ProjParam() {
  SharedDtor();
}

void ProjParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProjParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProjParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProjParam_descriptor_;
}

const ProjParam& ProjParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gsbn_2eproto();
  return *default_instance_;
}

ProjParam* ProjParam::default_instance_ = NULL;

ProjParam* ProjParam::New() const {
  return new ProjParam;
}

void ProjParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    src_pop_ = 0u;
    dest_pop_ = 0u;
    tauzi_ = 0;
    tauzj_ = 0;
    taue_ = 0;
    taup_ = 0;
    maxfq_ = 100;
    bgain_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    wgain_ = 0;
    tauepsc_ = 0;
    slot_num_ = 0;
    distance_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProjParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 src_pop = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &src_pop_)));
          set_has_src_pop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dest_pop;
        break;
      }

      // required uint32 dest_pop = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dest_pop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dest_pop_)));
          set_has_dest_pop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_tauzi;
        break;
      }

      // required float tauzi = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tauzi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tauzi_)));
          set_has_tauzi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_tauzj;
        break;
      }

      // required float tauzj = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tauzj:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tauzj_)));
          set_has_tauzj();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_taue;
        break;
      }

      // required float taue = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_taue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &taue_)));
          set_has_taue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_taup;
        break;
      }

      // required float taup = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_taup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &taup_)));
          set_has_taup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_maxfq;
        break;
      }

      // optional float maxfq = 7 [default = 100];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_maxfq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxfq_)));
          set_has_maxfq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_bgain;
        break;
      }

      // optional float bgain = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_bgain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bgain_)));
          set_has_bgain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_wgain;
        break;
      }

      // optional float wgain = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_wgain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wgain_)));
          set_has_wgain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_tauepsc;
        break;
      }

      // optional float tauepsc = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tauepsc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tauepsc_)));
          set_has_tauepsc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_slot_num;
        break;
      }

      // required float slot_num = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_slot_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &slot_num_)));
          set_has_slot_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_distance;
        break;
      }

      // optional float distance = 12 [default = 0];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance_)));
          set_has_distance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProjParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 src_pop = 1;
  if (has_src_pop()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->src_pop(), output);
  }

  // required uint32 dest_pop = 2;
  if (has_dest_pop()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dest_pop(), output);
  }

  // required float tauzi = 3;
  if (has_tauzi()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->tauzi(), output);
  }

  // required float tauzj = 4;
  if (has_tauzj()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->tauzj(), output);
  }

  // required float taue = 5;
  if (has_taue()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->taue(), output);
  }

  // required float taup = 6;
  if (has_taup()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->taup(), output);
  }

  // optional float maxfq = 7 [default = 100];
  if (has_maxfq()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->maxfq(), output);
  }

  // optional float bgain = 8 [default = 0];
  if (has_bgain()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->bgain(), output);
  }

  // optional float wgain = 9 [default = 0];
  if (has_wgain()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->wgain(), output);
  }

  // optional float tauepsc = 10;
  if (has_tauepsc()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->tauepsc(), output);
  }

  // required float slot_num = 11;
  if (has_slot_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->slot_num(), output);
  }

  // optional float distance = 12 [default = 0];
  if (has_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->distance(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProjParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 src_pop = 1;
  if (has_src_pop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->src_pop(), target);
  }

  // required uint32 dest_pop = 2;
  if (has_dest_pop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dest_pop(), target);
  }

  // required float tauzi = 3;
  if (has_tauzi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->tauzi(), target);
  }

  // required float tauzj = 4;
  if (has_tauzj()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->tauzj(), target);
  }

  // required float taue = 5;
  if (has_taue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->taue(), target);
  }

  // required float taup = 6;
  if (has_taup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->taup(), target);
  }

  // optional float maxfq = 7 [default = 100];
  if (has_maxfq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->maxfq(), target);
  }

  // optional float bgain = 8 [default = 0];
  if (has_bgain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->bgain(), target);
  }

  // optional float wgain = 9 [default = 0];
  if (has_wgain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->wgain(), target);
  }

  // optional float tauepsc = 10;
  if (has_tauepsc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->tauepsc(), target);
  }

  // required float slot_num = 11;
  if (has_slot_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->slot_num(), target);
  }

  // optional float distance = 12 [default = 0];
  if (has_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->distance(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProjParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 src_pop = 1;
    if (has_src_pop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->src_pop());
    }

    // required uint32 dest_pop = 2;
    if (has_dest_pop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dest_pop());
    }

    // required float tauzi = 3;
    if (has_tauzi()) {
      total_size += 1 + 4;
    }

    // required float tauzj = 4;
    if (has_tauzj()) {
      total_size += 1 + 4;
    }

    // required float taue = 5;
    if (has_taue()) {
      total_size += 1 + 4;
    }

    // required float taup = 6;
    if (has_taup()) {
      total_size += 1 + 4;
    }

    // optional float maxfq = 7 [default = 100];
    if (has_maxfq()) {
      total_size += 1 + 4;
    }

    // optional float bgain = 8 [default = 0];
    if (has_bgain()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float wgain = 9 [default = 0];
    if (has_wgain()) {
      total_size += 1 + 4;
    }

    // optional float tauepsc = 10;
    if (has_tauepsc()) {
      total_size += 1 + 4;
    }

    // required float slot_num = 11;
    if (has_slot_num()) {
      total_size += 1 + 4;
    }

    // optional float distance = 12 [default = 0];
    if (has_distance()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProjParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProjParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProjParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProjParam::MergeFrom(const ProjParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src_pop()) {
      set_src_pop(from.src_pop());
    }
    if (from.has_dest_pop()) {
      set_dest_pop(from.dest_pop());
    }
    if (from.has_tauzi()) {
      set_tauzi(from.tauzi());
    }
    if (from.has_tauzj()) {
      set_tauzj(from.tauzj());
    }
    if (from.has_taue()) {
      set_taue(from.taue());
    }
    if (from.has_taup()) {
      set_taup(from.taup());
    }
    if (from.has_maxfq()) {
      set_maxfq(from.maxfq());
    }
    if (from.has_bgain()) {
      set_bgain(from.bgain());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_wgain()) {
      set_wgain(from.wgain());
    }
    if (from.has_tauepsc()) {
      set_tauepsc(from.tauepsc());
    }
    if (from.has_slot_num()) {
      set_slot_num(from.slot_num());
    }
    if (from.has_distance()) {
      set_distance(from.distance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProjParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProjParam::CopyFrom(const ProjParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProjParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000043f) != 0x0000043f) return false;

  return true;
}

void ProjParam::Swap(ProjParam* other) {
  if (other != this) {
    std::swap(src_pop_, other->src_pop_);
    std::swap(dest_pop_, other->dest_pop_);
    std::swap(tauzi_, other->tauzi_);
    std::swap(tauzj_, other->tauzj_);
    std::swap(taue_, other->taue_);
    std::swap(taup_, other->taup_);
    std::swap(maxfq_, other->maxfq_);
    std::swap(bgain_, other->bgain_);
    std::swap(wgain_, other->wgain_);
    std::swap(tauepsc_, other->tauepsc_);
    std::swap(slot_num_, other->slot_num_);
    std::swap(distance_, other->distance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProjParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProjParam_descriptor_;
  metadata.reflection = ProjParam_reflection_;
  return metadata;
}


// ===================================================================

::std::string* RecParam::_default_directory_ = NULL;
#ifndef _MSC_VER
const int RecParam::kDirectoryFieldNumber;
#endif  // !_MSC_VER

RecParam::RecParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecParam::InitAsDefaultInstance() {
}

RecParam::RecParam(const RecParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecParam::SharedCtor() {
  _cached_size_ = 0;
  directory_ = const_cast< ::std::string*>(_default_directory_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecParam::~RecParam() {
  SharedDtor();
}

void RecParam::SharedDtor() {
  if (directory_ != _default_directory_) {
    delete directory_;
  }
  if (this != default_instance_) {
  }
}

void RecParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecParam_descriptor_;
}

const RecParam& RecParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gsbn_2eproto();
  return *default_instance_;
}

RecParam* RecParam::default_instance_ = NULL;

RecParam* RecParam::New() const {
  return new RecParam;
}

void RecParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_directory()) {
      if (directory_ != _default_directory_) {
        directory_->assign(*_default_directory_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string directory = 1 [default = "."];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_directory()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->directory().data(), this->directory().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string directory = 1 [default = "."];
  if (has_directory()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->directory().data(), this->directory().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->directory(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string directory = 1 [default = "."];
  if (has_directory()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->directory().data(), this->directory().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->directory(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string directory = 1 [default = "."];
    if (has_directory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->directory());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecParam::MergeFrom(const RecParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_directory()) {
      set_directory(from.directory());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecParam::CopyFrom(const RecParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecParam::IsInitialized() const {

  return true;
}

void RecParam::Swap(RecParam* other) {
  if (other != this) {
    std::swap(directory_, other->directory_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecParam_descriptor_;
  metadata.reflection = RecParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProcParam::kNameFieldNumber;
const int ProcParam::kArgiFieldNumber;
const int ProcParam::kArgfFieldNumber;
const int ProcParam::kArgsFieldNumber;
#endif  // !_MSC_VER

ProcParam::ProcParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProcParam::InitAsDefaultInstance() {
}

ProcParam::ProcParam(const ProcParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProcParam::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProcParam::~ProcParam() {
  SharedDtor();
}

void ProcParam::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ProcParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProcParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProcParam_descriptor_;
}

const ProcParam& ProcParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gsbn_2eproto();
  return *default_instance_;
}

ProcParam* ProcParam::default_instance_ = NULL;

ProcParam* ProcParam::New() const {
  return new ProcParam;
}

void ProcParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  argi_.Clear();
  argf_.Clear();
  args_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProcParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_argi;
        break;
      }

      // repeated .gsbn.ProcParamArgI argi = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_argi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_argi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_argi;
        if (input->ExpectTag(26)) goto parse_argf;
        break;
      }

      // repeated .gsbn.ProcParamArgF argf = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_argf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_argf()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_argf;
        if (input->ExpectTag(34)) goto parse_args;
        break;
      }

      // repeated .gsbn.ProcParamArgS args = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_args()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_args;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProcParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // repeated .gsbn.ProcParamArgI argi = 2;
  for (int i = 0; i < this->argi_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->argi(i), output);
  }

  // repeated .gsbn.ProcParamArgF argf = 3;
  for (int i = 0; i < this->argf_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->argf(i), output);
  }

  // repeated .gsbn.ProcParamArgS args = 4;
  for (int i = 0; i < this->args_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->args(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProcParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .gsbn.ProcParamArgI argi = 2;
  for (int i = 0; i < this->argi_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->argi(i), target);
  }

  // repeated .gsbn.ProcParamArgF argf = 3;
  for (int i = 0; i < this->argf_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->argf(i), target);
  }

  // repeated .gsbn.ProcParamArgS args = 4;
  for (int i = 0; i < this->args_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->args(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProcParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .gsbn.ProcParamArgI argi = 2;
  total_size += 1 * this->argi_size();
  for (int i = 0; i < this->argi_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->argi(i));
  }

  // repeated .gsbn.ProcParamArgF argf = 3;
  total_size += 1 * this->argf_size();
  for (int i = 0; i < this->argf_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->argf(i));
  }

  // repeated .gsbn.ProcParamArgS args = 4;
  total_size += 1 * this->args_size();
  for (int i = 0; i < this->args_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->args(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProcParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProcParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProcParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProcParam::MergeFrom(const ProcParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  argi_.MergeFrom(from.argi_);
  argf_.MergeFrom(from.argf_);
  args_.MergeFrom(from.args_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProcParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcParam::CopyFrom(const ProcParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < argi_size(); i++) {
    if (!this->argi(i).IsInitialized()) return false;
  }
  for (int i = 0; i < argf_size(); i++) {
    if (!this->argf(i).IsInitialized()) return false;
  }
  for (int i = 0; i < args_size(); i++) {
    if (!this->args(i).IsInitialized()) return false;
  }
  return true;
}

void ProcParam::Swap(ProcParam* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    argi_.Swap(&other->argi_);
    argf_.Swap(&other->argf_);
    args_.Swap(&other->args_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProcParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProcParam_descriptor_;
  metadata.reflection = ProcParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProcParamArgI::kKeyFieldNumber;
const int ProcParamArgI::kValFieldNumber;
#endif  // !_MSC_VER

ProcParamArgI::ProcParamArgI()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProcParamArgI::InitAsDefaultInstance() {
}

ProcParamArgI::ProcParamArgI(const ProcParamArgI& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProcParamArgI::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  val_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProcParamArgI::~ProcParamArgI() {
  SharedDtor();
}

void ProcParamArgI::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void ProcParamArgI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProcParamArgI::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProcParamArgI_descriptor_;
}

const ProcParamArgI& ProcParamArgI::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gsbn_2eproto();
  return *default_instance_;
}

ProcParamArgI* ProcParamArgI::default_instance_ = NULL;

ProcParamArgI* ProcParamArgI::New() const {
  return new ProcParamArgI;
}

void ProcParamArgI::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    val_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProcParamArgI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_val;
        break;
      }

      // required int32 val = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &val_)));
          set_has_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProcParamArgI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }

  // required int32 val = 2;
  if (has_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->val(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProcParamArgI::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required int32 val = 2;
  if (has_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->val(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProcParamArgI::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // required int32 val = 2;
    if (has_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->val());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProcParamArgI::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProcParamArgI* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProcParamArgI*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProcParamArgI::MergeFrom(const ProcParamArgI& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_val()) {
      set_val(from.val());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProcParamArgI::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcParamArgI::CopyFrom(const ProcParamArgI& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcParamArgI::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ProcParamArgI::Swap(ProcParamArgI* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(val_, other->val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProcParamArgI::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProcParamArgI_descriptor_;
  metadata.reflection = ProcParamArgI_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProcParamArgF::kKeyFieldNumber;
const int ProcParamArgF::kValFieldNumber;
#endif  // !_MSC_VER

ProcParamArgF::ProcParamArgF()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProcParamArgF::InitAsDefaultInstance() {
}

ProcParamArgF::ProcParamArgF(const ProcParamArgF& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProcParamArgF::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  val_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProcParamArgF::~ProcParamArgF() {
  SharedDtor();
}

void ProcParamArgF::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void ProcParamArgF::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProcParamArgF::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProcParamArgF_descriptor_;
}

const ProcParamArgF& ProcParamArgF::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gsbn_2eproto();
  return *default_instance_;
}

ProcParamArgF* ProcParamArgF::default_instance_ = NULL;

ProcParamArgF* ProcParamArgF::New() const {
  return new ProcParamArgF;
}

void ProcParamArgF::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    val_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProcParamArgF::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_val;
        break;
      }

      // required float val = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &val_)));
          set_has_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProcParamArgF::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }

  // required float val = 2;
  if (has_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->val(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProcParamArgF::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required float val = 2;
  if (has_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->val(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProcParamArgF::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // required float val = 2;
    if (has_val()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProcParamArgF::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProcParamArgF* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProcParamArgF*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProcParamArgF::MergeFrom(const ProcParamArgF& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_val()) {
      set_val(from.val());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProcParamArgF::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcParamArgF::CopyFrom(const ProcParamArgF& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcParamArgF::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ProcParamArgF::Swap(ProcParamArgF* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(val_, other->val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProcParamArgF::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProcParamArgF_descriptor_;
  metadata.reflection = ProcParamArgF_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProcParamArgS::kKeyFieldNumber;
const int ProcParamArgS::kValFieldNumber;
#endif  // !_MSC_VER

ProcParamArgS::ProcParamArgS()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProcParamArgS::InitAsDefaultInstance() {
}

ProcParamArgS::ProcParamArgS(const ProcParamArgS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProcParamArgS::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  val_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProcParamArgS::~ProcParamArgS() {
  SharedDtor();
}

void ProcParamArgS::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (val_ != &::google::protobuf::internal::kEmptyString) {
    delete val_;
  }
  if (this != default_instance_) {
  }
}

void ProcParamArgS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProcParamArgS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProcParamArgS_descriptor_;
}

const ProcParamArgS& ProcParamArgS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gsbn_2eproto();
  return *default_instance_;
}

ProcParamArgS* ProcParamArgS::default_instance_ = NULL;

ProcParamArgS* ProcParamArgS::New() const {
  return new ProcParamArgS;
}

void ProcParamArgS::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_val()) {
      if (val_ != &::google::protobuf::internal::kEmptyString) {
        val_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProcParamArgS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_val;
        break;
      }

      // required string val = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_val:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_val()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->val().data(), this->val().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProcParamArgS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }

  // required string val = 2;
  if (has_val()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->val().data(), this->val().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->val(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProcParamArgS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required string val = 2;
  if (has_val()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->val().data(), this->val().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->val(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProcParamArgS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // required string val = 2;
    if (has_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->val());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProcParamArgS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProcParamArgS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProcParamArgS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProcParamArgS::MergeFrom(const ProcParamArgS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_val()) {
      set_val(from.val());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProcParamArgS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcParamArgS::CopyFrom(const ProcParamArgS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcParamArgS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ProcParamArgS::Swap(ProcParamArgS* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(val_, other->val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProcParamArgS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProcParamArgS_descriptor_;
  metadata.reflection = ProcParamArgS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SolverState::kTimestampFieldNumber;
const int SolverState::kPrnFieldNumber;
const int SolverState::kTableStateFieldNumber;
const int SolverState::kVectorStateI8FieldNumber;
const int SolverState::kVectorStateI16FieldNumber;
const int SolverState::kVectorStateI32FieldNumber;
const int SolverState::kVectorStateI64FieldNumber;
const int SolverState::kVectorStateF16FieldNumber;
const int SolverState::kVectorStateF32FieldNumber;
const int SolverState::kVectorStateF64FieldNumber;
#endif  // !_MSC_VER

SolverState::SolverState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SolverState::InitAsDefaultInstance() {
}

SolverState::SolverState(const SolverState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SolverState::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = 0;
  prn_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SolverState::~SolverState() {
  SharedDtor();
}

void SolverState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SolverState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SolverState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SolverState_descriptor_;
}

const SolverState& SolverState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gsbn_2eproto();
  return *default_instance_;
}

SolverState* SolverState::default_instance_ = NULL;

SolverState* SolverState::New() const {
  return new SolverState;
}

void SolverState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_ = 0;
    prn_ = 0;
  }
  table_state_.Clear();
  vector_state_i8_.Clear();
  vector_state_i16_.Clear();
  vector_state_i32_.Clear();
  vector_state_i64_.Clear();
  vector_state_f16_.Clear();
  vector_state_f32_.Clear();
  vector_state_f64_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SolverState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_prn;
        break;
      }

      // required float prn = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_prn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &prn_)));
          set_has_prn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_table_state;
        break;
      }

      // repeated .gsbn.TableState table_state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_table_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_table_state;
        if (input->ExpectTag(34)) goto parse_vector_state_i8;
        break;
      }

      // repeated .gsbn.VectorStateI8 vector_state_i8 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vector_state_i8:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vector_state_i8()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_vector_state_i8;
        if (input->ExpectTag(42)) goto parse_vector_state_i16;
        break;
      }

      // repeated .gsbn.VectorStateI16 vector_state_i16 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vector_state_i16:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vector_state_i16()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_vector_state_i16;
        if (input->ExpectTag(50)) goto parse_vector_state_i32;
        break;
      }

      // repeated .gsbn.VectorStateI32 vector_state_i32 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vector_state_i32:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vector_state_i32()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_vector_state_i32;
        if (input->ExpectTag(58)) goto parse_vector_state_i64;
        break;
      }

      // repeated .gsbn.VectorStateI64 vector_state_i64 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vector_state_i64:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vector_state_i64()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_vector_state_i64;
        if (input->ExpectTag(66)) goto parse_vector_state_f16;
        break;
      }

      // repeated .gsbn.VectorStateF16 vector_state_f16 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vector_state_f16:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vector_state_f16()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_vector_state_f16;
        if (input->ExpectTag(74)) goto parse_vector_state_f32;
        break;
      }

      // repeated .gsbn.VectorStateF32 vector_state_f32 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vector_state_f32:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vector_state_f32()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_vector_state_f32;
        if (input->ExpectTag(82)) goto parse_vector_state_f64;
        break;
      }

      // repeated .gsbn.VectorStateF64 vector_state_f64 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vector_state_f64:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vector_state_f64()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_vector_state_f64;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SolverState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->timestamp(), output);
  }

  // required float prn = 2;
  if (has_prn()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->prn(), output);
  }

  // repeated .gsbn.TableState table_state = 3;
  for (int i = 0; i < this->table_state_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->table_state(i), output);
  }

  // repeated .gsbn.VectorStateI8 vector_state_i8 = 4;
  for (int i = 0; i < this->vector_state_i8_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->vector_state_i8(i), output);
  }

  // repeated .gsbn.VectorStateI16 vector_state_i16 = 5;
  for (int i = 0; i < this->vector_state_i16_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->vector_state_i16(i), output);
  }

  // repeated .gsbn.VectorStateI32 vector_state_i32 = 6;
  for (int i = 0; i < this->vector_state_i32_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->vector_state_i32(i), output);
  }

  // repeated .gsbn.VectorStateI64 vector_state_i64 = 7;
  for (int i = 0; i < this->vector_state_i64_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->vector_state_i64(i), output);
  }

  // repeated .gsbn.VectorStateF16 vector_state_f16 = 8;
  for (int i = 0; i < this->vector_state_f16_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->vector_state_f16(i), output);
  }

  // repeated .gsbn.VectorStateF32 vector_state_f32 = 9;
  for (int i = 0; i < this->vector_state_f32_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->vector_state_f32(i), output);
  }

  // repeated .gsbn.VectorStateF64 vector_state_f64 = 10;
  for (int i = 0; i < this->vector_state_f64_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->vector_state_f64(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SolverState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->timestamp(), target);
  }

  // required float prn = 2;
  if (has_prn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->prn(), target);
  }

  // repeated .gsbn.TableState table_state = 3;
  for (int i = 0; i < this->table_state_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->table_state(i), target);
  }

  // repeated .gsbn.VectorStateI8 vector_state_i8 = 4;
  for (int i = 0; i < this->vector_state_i8_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->vector_state_i8(i), target);
  }

  // repeated .gsbn.VectorStateI16 vector_state_i16 = 5;
  for (int i = 0; i < this->vector_state_i16_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->vector_state_i16(i), target);
  }

  // repeated .gsbn.VectorStateI32 vector_state_i32 = 6;
  for (int i = 0; i < this->vector_state_i32_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->vector_state_i32(i), target);
  }

  // repeated .gsbn.VectorStateI64 vector_state_i64 = 7;
  for (int i = 0; i < this->vector_state_i64_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->vector_state_i64(i), target);
  }

  // repeated .gsbn.VectorStateF16 vector_state_f16 = 8;
  for (int i = 0; i < this->vector_state_f16_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->vector_state_f16(i), target);
  }

  // repeated .gsbn.VectorStateF32 vector_state_f32 = 9;
  for (int i = 0; i < this->vector_state_f32_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->vector_state_f32(i), target);
  }

  // repeated .gsbn.VectorStateF64 vector_state_f64 = 10;
  for (int i = 0; i < this->vector_state_f64_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->vector_state_f64(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SolverState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 + 4;
    }

    // required float prn = 2;
    if (has_prn()) {
      total_size += 1 + 4;
    }

  }
  // repeated .gsbn.TableState table_state = 3;
  total_size += 1 * this->table_state_size();
  for (int i = 0; i < this->table_state_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->table_state(i));
  }

  // repeated .gsbn.VectorStateI8 vector_state_i8 = 4;
  total_size += 1 * this->vector_state_i8_size();
  for (int i = 0; i < this->vector_state_i8_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vector_state_i8(i));
  }

  // repeated .gsbn.VectorStateI16 vector_state_i16 = 5;
  total_size += 1 * this->vector_state_i16_size();
  for (int i = 0; i < this->vector_state_i16_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vector_state_i16(i));
  }

  // repeated .gsbn.VectorStateI32 vector_state_i32 = 6;
  total_size += 1 * this->vector_state_i32_size();
  for (int i = 0; i < this->vector_state_i32_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vector_state_i32(i));
  }

  // repeated .gsbn.VectorStateI64 vector_state_i64 = 7;
  total_size += 1 * this->vector_state_i64_size();
  for (int i = 0; i < this->vector_state_i64_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vector_state_i64(i));
  }

  // repeated .gsbn.VectorStateF16 vector_state_f16 = 8;
  total_size += 1 * this->vector_state_f16_size();
  for (int i = 0; i < this->vector_state_f16_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vector_state_f16(i));
  }

  // repeated .gsbn.VectorStateF32 vector_state_f32 = 9;
  total_size += 1 * this->vector_state_f32_size();
  for (int i = 0; i < this->vector_state_f32_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vector_state_f32(i));
  }

  // repeated .gsbn.VectorStateF64 vector_state_f64 = 10;
  total_size += 1 * this->vector_state_f64_size();
  for (int i = 0; i < this->vector_state_f64_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vector_state_f64(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SolverState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SolverState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SolverState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SolverState::MergeFrom(const SolverState& from) {
  GOOGLE_CHECK_NE(&from, this);
  table_state_.MergeFrom(from.table_state_);
  vector_state_i8_.MergeFrom(from.vector_state_i8_);
  vector_state_i16_.MergeFrom(from.vector_state_i16_);
  vector_state_i32_.MergeFrom(from.vector_state_i32_);
  vector_state_i64_.MergeFrom(from.vector_state_i64_);
  vector_state_f16_.MergeFrom(from.vector_state_f16_);
  vector_state_f32_.MergeFrom(from.vector_state_f32_);
  vector_state_f64_.MergeFrom(from.vector_state_f64_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_prn()) {
      set_prn(from.prn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SolverState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SolverState::CopyFrom(const SolverState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SolverState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < table_state_size(); i++) {
    if (!this->table_state(i).IsInitialized()) return false;
  }
  for (int i = 0; i < vector_state_i8_size(); i++) {
    if (!this->vector_state_i8(i).IsInitialized()) return false;
  }
  for (int i = 0; i < vector_state_i16_size(); i++) {
    if (!this->vector_state_i16(i).IsInitialized()) return false;
  }
  for (int i = 0; i < vector_state_i32_size(); i++) {
    if (!this->vector_state_i32(i).IsInitialized()) return false;
  }
  for (int i = 0; i < vector_state_i64_size(); i++) {
    if (!this->vector_state_i64(i).IsInitialized()) return false;
  }
  for (int i = 0; i < vector_state_f16_size(); i++) {
    if (!this->vector_state_f16(i).IsInitialized()) return false;
  }
  for (int i = 0; i < vector_state_f32_size(); i++) {
    if (!this->vector_state_f32(i).IsInitialized()) return false;
  }
  for (int i = 0; i < vector_state_f64_size(); i++) {
    if (!this->vector_state_f64(i).IsInitialized()) return false;
  }
  return true;
}

void SolverState::Swap(SolverState* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(prn_, other->prn_);
    table_state_.Swap(&other->table_state_);
    vector_state_i8_.Swap(&other->vector_state_i8_);
    vector_state_i16_.Swap(&other->vector_state_i16_);
    vector_state_i32_.Swap(&other->vector_state_i32_);
    vector_state_i64_.Swap(&other->vector_state_i64_);
    vector_state_f16_.Swap(&other->vector_state_f16_);
    vector_state_f32_.Swap(&other->vector_state_f32_);
    vector_state_f64_.Swap(&other->vector_state_f64_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SolverState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SolverState_descriptor_;
  metadata.reflection = SolverState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TableState::kNameFieldNumber;
const int TableState::kDescFieldNumber;
const int TableState::kDataFieldNumber;
#endif  // !_MSC_VER

TableState::TableState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TableState::InitAsDefaultInstance() {
}

TableState::TableState(const TableState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TableState::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TableState::~TableState() {
  SharedDtor();
}

void TableState::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void TableState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TableState_descriptor_;
}

const TableState& TableState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gsbn_2eproto();
  return *default_instance_;
}

TableState* TableState::default_instance_ = NULL;

TableState* TableState::New() const {
  return new TableState;
}

void TableState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TableState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_desc;
        break;
      }

      // required bytes desc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_desc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // required bytes data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TableState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required bytes desc = 2;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->desc(), output);
  }

  // required bytes data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TableState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required bytes desc = 2;
  if (has_desc()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->desc(), target);
  }

  // required bytes data = 3;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TableState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required bytes desc = 2;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->desc());
    }

    // required bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TableState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TableState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TableState::MergeFrom(const TableState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TableState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableState::CopyFrom(const TableState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void TableState::Swap(TableState* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(desc_, other->desc_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TableState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TableState_descriptor_;
  metadata.reflection = TableState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VectorStateI8::kNameFieldNumber;
const int VectorStateI8::kLdFieldNumber;
const int VectorStateI8::kDataFieldNumber;
#endif  // !_MSC_VER

VectorStateI8::VectorStateI8()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VectorStateI8::InitAsDefaultInstance() {
}

VectorStateI8::VectorStateI8(const VectorStateI8& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VectorStateI8::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ld_ = 1u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VectorStateI8::~VectorStateI8() {
  SharedDtor();
}

void VectorStateI8::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void VectorStateI8::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VectorStateI8::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VectorStateI8_descriptor_;
}

const VectorStateI8& VectorStateI8::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gsbn_2eproto();
  return *default_instance_;
}

VectorStateI8* VectorStateI8::default_instance_ = NULL;

VectorStateI8* VectorStateI8::New() const {
  return new VectorStateI8;
}

void VectorStateI8::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    ld_ = 1u;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VectorStateI8::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ld;
        break;
      }

      // optional uint32 ld = 2 [default = 1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ld:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ld_)));
          set_has_ld();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // repeated int32 data = 3 [packed = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26, input, this->mutable_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VectorStateI8::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional uint32 ld = 2 [default = 1];
  if (has_ld()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ld(), output);
  }

  // repeated int32 data = 3 [packed = true];
  if (this->data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_data_cached_byte_size_);
  }
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VectorStateI8::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 ld = 2 [default = 1];
  if (has_ld()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ld(), target);
  }

  // repeated int32 data = 3 [packed = true];
  if (this->data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _data_cached_byte_size_, target);
  }
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VectorStateI8::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 ld = 2 [default = 1];
    if (has_ld()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ld());
    }

  }
  // repeated int32 data = 3 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->data_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->data(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _data_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VectorStateI8::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VectorStateI8* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VectorStateI8*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VectorStateI8::MergeFrom(const VectorStateI8& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_ld()) {
      set_ld(from.ld());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VectorStateI8::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorStateI8::CopyFrom(const VectorStateI8& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorStateI8::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void VectorStateI8::Swap(VectorStateI8* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(ld_, other->ld_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VectorStateI8::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VectorStateI8_descriptor_;
  metadata.reflection = VectorStateI8_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VectorStateI16::kNameFieldNumber;
const int VectorStateI16::kLdFieldNumber;
const int VectorStateI16::kDataFieldNumber;
#endif  // !_MSC_VER

VectorStateI16::VectorStateI16()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VectorStateI16::InitAsDefaultInstance() {
}

VectorStateI16::VectorStateI16(const VectorStateI16& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VectorStateI16::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ld_ = 1u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VectorStateI16::~VectorStateI16() {
  SharedDtor();
}

void VectorStateI16::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void VectorStateI16::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VectorStateI16::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VectorStateI16_descriptor_;
}

const VectorStateI16& VectorStateI16::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gsbn_2eproto();
  return *default_instance_;
}

VectorStateI16* VectorStateI16::default_instance_ = NULL;

VectorStateI16* VectorStateI16::New() const {
  return new VectorStateI16;
}

void VectorStateI16::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    ld_ = 1u;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VectorStateI16::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ld;
        break;
      }

      // optional uint32 ld = 2 [default = 1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ld:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ld_)));
          set_has_ld();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // repeated int32 data = 3 [packed = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26, input, this->mutable_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VectorStateI16::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional uint32 ld = 2 [default = 1];
  if (has_ld()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ld(), output);
  }

  // repeated int32 data = 3 [packed = true];
  if (this->data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_data_cached_byte_size_);
  }
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VectorStateI16::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 ld = 2 [default = 1];
  if (has_ld()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ld(), target);
  }

  // repeated int32 data = 3 [packed = true];
  if (this->data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _data_cached_byte_size_, target);
  }
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VectorStateI16::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 ld = 2 [default = 1];
    if (has_ld()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ld());
    }

  }
  // repeated int32 data = 3 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->data_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->data(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _data_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VectorStateI16::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VectorStateI16* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VectorStateI16*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VectorStateI16::MergeFrom(const VectorStateI16& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_ld()) {
      set_ld(from.ld());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VectorStateI16::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorStateI16::CopyFrom(const VectorStateI16& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorStateI16::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void VectorStateI16::Swap(VectorStateI16* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(ld_, other->ld_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VectorStateI16::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VectorStateI16_descriptor_;
  metadata.reflection = VectorStateI16_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VectorStateI32::kNameFieldNumber;
const int VectorStateI32::kLdFieldNumber;
const int VectorStateI32::kDataFieldNumber;
#endif  // !_MSC_VER

VectorStateI32::VectorStateI32()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VectorStateI32::InitAsDefaultInstance() {
}

VectorStateI32::VectorStateI32(const VectorStateI32& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VectorStateI32::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ld_ = 1u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VectorStateI32::~VectorStateI32() {
  SharedDtor();
}

void VectorStateI32::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void VectorStateI32::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VectorStateI32::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VectorStateI32_descriptor_;
}

const VectorStateI32& VectorStateI32::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gsbn_2eproto();
  return *default_instance_;
}

VectorStateI32* VectorStateI32::default_instance_ = NULL;

VectorStateI32* VectorStateI32::New() const {
  return new VectorStateI32;
}

void VectorStateI32::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    ld_ = 1u;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VectorStateI32::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ld;
        break;
      }

      // optional uint32 ld = 2 [default = 1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ld:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ld_)));
          set_has_ld();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // repeated int32 data = 3 [packed = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26, input, this->mutable_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VectorStateI32::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional uint32 ld = 2 [default = 1];
  if (has_ld()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ld(), output);
  }

  // repeated int32 data = 3 [packed = true];
  if (this->data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_data_cached_byte_size_);
  }
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VectorStateI32::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 ld = 2 [default = 1];
  if (has_ld()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ld(), target);
  }

  // repeated int32 data = 3 [packed = true];
  if (this->data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _data_cached_byte_size_, target);
  }
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VectorStateI32::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 ld = 2 [default = 1];
    if (has_ld()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ld());
    }

  }
  // repeated int32 data = 3 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->data_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->data(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _data_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VectorStateI32::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VectorStateI32* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VectorStateI32*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VectorStateI32::MergeFrom(const VectorStateI32& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_ld()) {
      set_ld(from.ld());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VectorStateI32::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorStateI32::CopyFrom(const VectorStateI32& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorStateI32::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void VectorStateI32::Swap(VectorStateI32* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(ld_, other->ld_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VectorStateI32::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VectorStateI32_descriptor_;
  metadata.reflection = VectorStateI32_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VectorStateI64::kNameFieldNumber;
const int VectorStateI64::kLdFieldNumber;
const int VectorStateI64::kDataFieldNumber;
#endif  // !_MSC_VER

VectorStateI64::VectorStateI64()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VectorStateI64::InitAsDefaultInstance() {
}

VectorStateI64::VectorStateI64(const VectorStateI64& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VectorStateI64::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ld_ = 1u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VectorStateI64::~VectorStateI64() {
  SharedDtor();
}

void VectorStateI64::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void VectorStateI64::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VectorStateI64::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VectorStateI64_descriptor_;
}

const VectorStateI64& VectorStateI64::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gsbn_2eproto();
  return *default_instance_;
}

VectorStateI64* VectorStateI64::default_instance_ = NULL;

VectorStateI64* VectorStateI64::New() const {
  return new VectorStateI64;
}

void VectorStateI64::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    ld_ = 1u;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VectorStateI64::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ld;
        break;
      }

      // optional uint32 ld = 2 [default = 1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ld:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ld_)));
          set_has_ld();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // repeated int64 data = 3 [packed = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 26, input, this->mutable_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VectorStateI64::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional uint32 ld = 2 [default = 1];
  if (has_ld()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ld(), output);
  }

  // repeated int64 data = 3 [packed = true];
  if (this->data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_data_cached_byte_size_);
  }
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VectorStateI64::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 ld = 2 [default = 1];
  if (has_ld()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ld(), target);
  }

  // repeated int64 data = 3 [packed = true];
  if (this->data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _data_cached_byte_size_, target);
  }
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VectorStateI64::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 ld = 2 [default = 1];
    if (has_ld()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ld());
    }

  }
  // repeated int64 data = 3 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->data_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->data(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _data_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VectorStateI64::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VectorStateI64* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VectorStateI64*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VectorStateI64::MergeFrom(const VectorStateI64& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_ld()) {
      set_ld(from.ld());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VectorStateI64::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorStateI64::CopyFrom(const VectorStateI64& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorStateI64::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void VectorStateI64::Swap(VectorStateI64* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(ld_, other->ld_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VectorStateI64::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VectorStateI64_descriptor_;
  metadata.reflection = VectorStateI64_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VectorStateF16::kNameFieldNumber;
const int VectorStateF16::kLdFieldNumber;
const int VectorStateF16::kDataFieldNumber;
#endif  // !_MSC_VER

VectorStateF16::VectorStateF16()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VectorStateF16::InitAsDefaultInstance() {
}

VectorStateF16::VectorStateF16(const VectorStateF16& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VectorStateF16::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ld_ = 1u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VectorStateF16::~VectorStateF16() {
  SharedDtor();
}

void VectorStateF16::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void VectorStateF16::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VectorStateF16::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VectorStateF16_descriptor_;
}

const VectorStateF16& VectorStateF16::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gsbn_2eproto();
  return *default_instance_;
}

VectorStateF16* VectorStateF16::default_instance_ = NULL;

VectorStateF16* VectorStateF16::New() const {
  return new VectorStateF16;
}

void VectorStateF16::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    ld_ = 1u;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VectorStateF16::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ld;
        break;
      }

      // optional uint32 ld = 2 [default = 1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ld:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ld_)));
          set_has_ld();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // repeated float data = 3 [packed = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26, input, this->mutable_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VectorStateF16::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional uint32 ld = 2 [default = 1];
  if (has_ld()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ld(), output);
  }

  // repeated float data = 3 [packed = true];
  if (this->data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_data_cached_byte_size_);
  }
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VectorStateF16::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 ld = 2 [default = 1];
  if (has_ld()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ld(), target);
  }

  // repeated float data = 3 [packed = true];
  if (this->data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _data_cached_byte_size_, target);
  }
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VectorStateF16::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 ld = 2 [default = 1];
    if (has_ld()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ld());
    }

  }
  // repeated float data = 3 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->data_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _data_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VectorStateF16::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VectorStateF16* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VectorStateF16*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VectorStateF16::MergeFrom(const VectorStateF16& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_ld()) {
      set_ld(from.ld());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VectorStateF16::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorStateF16::CopyFrom(const VectorStateF16& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorStateF16::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void VectorStateF16::Swap(VectorStateF16* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(ld_, other->ld_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VectorStateF16::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VectorStateF16_descriptor_;
  metadata.reflection = VectorStateF16_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VectorStateF32::kNameFieldNumber;
const int VectorStateF32::kLdFieldNumber;
const int VectorStateF32::kDataFieldNumber;
#endif  // !_MSC_VER

VectorStateF32::VectorStateF32()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VectorStateF32::InitAsDefaultInstance() {
}

VectorStateF32::VectorStateF32(const VectorStateF32& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VectorStateF32::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ld_ = 1u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VectorStateF32::~VectorStateF32() {
  SharedDtor();
}

void VectorStateF32::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void VectorStateF32::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VectorStateF32::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VectorStateF32_descriptor_;
}

const VectorStateF32& VectorStateF32::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gsbn_2eproto();
  return *default_instance_;
}

VectorStateF32* VectorStateF32::default_instance_ = NULL;

VectorStateF32* VectorStateF32::New() const {
  return new VectorStateF32;
}

void VectorStateF32::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    ld_ = 1u;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VectorStateF32::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ld;
        break;
      }

      // optional uint32 ld = 2 [default = 1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ld:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ld_)));
          set_has_ld();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // repeated float data = 3 [packed = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26, input, this->mutable_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VectorStateF32::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional uint32 ld = 2 [default = 1];
  if (has_ld()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ld(), output);
  }

  // repeated float data = 3 [packed = true];
  if (this->data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_data_cached_byte_size_);
  }
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VectorStateF32::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 ld = 2 [default = 1];
  if (has_ld()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ld(), target);
  }

  // repeated float data = 3 [packed = true];
  if (this->data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _data_cached_byte_size_, target);
  }
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VectorStateF32::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 ld = 2 [default = 1];
    if (has_ld()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ld());
    }

  }
  // repeated float data = 3 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->data_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _data_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VectorStateF32::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VectorStateF32* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VectorStateF32*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VectorStateF32::MergeFrom(const VectorStateF32& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_ld()) {
      set_ld(from.ld());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VectorStateF32::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorStateF32::CopyFrom(const VectorStateF32& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorStateF32::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void VectorStateF32::Swap(VectorStateF32* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(ld_, other->ld_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VectorStateF32::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VectorStateF32_descriptor_;
  metadata.reflection = VectorStateF32_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VectorStateF64::kNameFieldNumber;
const int VectorStateF64::kLdFieldNumber;
const int VectorStateF64::kDataFieldNumber;
#endif  // !_MSC_VER

VectorStateF64::VectorStateF64()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VectorStateF64::InitAsDefaultInstance() {
}

VectorStateF64::VectorStateF64(const VectorStateF64& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VectorStateF64::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ld_ = 1u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VectorStateF64::~VectorStateF64() {
  SharedDtor();
}

void VectorStateF64::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void VectorStateF64::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VectorStateF64::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VectorStateF64_descriptor_;
}

const VectorStateF64& VectorStateF64::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gsbn_2eproto();
  return *default_instance_;
}

VectorStateF64* VectorStateF64::default_instance_ = NULL;

VectorStateF64* VectorStateF64::New() const {
  return new VectorStateF64;
}

void VectorStateF64::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    ld_ = 1u;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VectorStateF64::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ld;
        break;
      }

      // optional uint32 ld = 2 [default = 1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ld:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ld_)));
          set_has_ld();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // repeated double data = 3 [packed = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 26, input, this->mutable_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VectorStateF64::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional uint32 ld = 2 [default = 1];
  if (has_ld()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ld(), output);
  }

  // repeated double data = 3 [packed = true];
  if (this->data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_data_cached_byte_size_);
  }
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VectorStateF64::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 ld = 2 [default = 1];
  if (has_ld()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ld(), target);
  }

  // repeated double data = 3 [packed = true];
  if (this->data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _data_cached_byte_size_, target);
  }
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VectorStateF64::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 ld = 2 [default = 1];
    if (has_ld()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ld());
    }

  }
  // repeated double data = 3 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->data_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _data_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VectorStateF64::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VectorStateF64* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VectorStateF64*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VectorStateF64::MergeFrom(const VectorStateF64& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_ld()) {
      set_ld(from.ld());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VectorStateF64::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorStateF64::CopyFrom(const VectorStateF64& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorStateF64::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void VectorStateF64::Swap(VectorStateF64* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(ld_, other->ld_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VectorStateF64::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VectorStateF64_descriptor_;
  metadata.reflection = VectorStateF64_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StimRawData::kDataRowsFieldNumber;
const int StimRawData::kDataColsFieldNumber;
const int StimRawData::kDataFieldNumber;
const int StimRawData::kMaskRowsFieldNumber;
const int StimRawData::kMaskColsFieldNumber;
const int StimRawData::kMaskFieldNumber;
#endif  // !_MSC_VER

StimRawData::StimRawData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StimRawData::InitAsDefaultInstance() {
}

StimRawData::StimRawData(const StimRawData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StimRawData::SharedCtor() {
  _cached_size_ = 0;
  data_rows_ = 0u;
  data_cols_ = 0u;
  mask_rows_ = 0u;
  mask_cols_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StimRawData::~StimRawData() {
  SharedDtor();
}

void StimRawData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StimRawData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StimRawData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StimRawData_descriptor_;
}

const StimRawData& StimRawData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gsbn_2eproto();
  return *default_instance_;
}

StimRawData* StimRawData::default_instance_ = NULL;

StimRawData* StimRawData::New() const {
  return new StimRawData;
}

void StimRawData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    data_rows_ = 0u;
    data_cols_ = 0u;
    mask_rows_ = 0u;
    mask_cols_ = 0u;
  }
  data_.Clear();
  mask_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StimRawData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 data_rows = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_rows_)));
          set_has_data_rows();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_data_cols;
        break;
      }

      // required uint32 data_cols = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data_cols:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_cols_)));
          set_has_data_cols();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // repeated uint32 data = 3 [packed = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26, input, this->mutable_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mask_rows;
        break;
      }

      // required uint32 mask_rows = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mask_rows:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mask_rows_)));
          set_has_mask_rows();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_mask_cols;
        break;
      }

      // required uint32 mask_cols = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mask_cols:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mask_cols_)));
          set_has_mask_cols();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_mask;
        break;
      }

      // repeated float mask = 6 [packed = true];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_mask())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 50, input, this->mutable_mask())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StimRawData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 data_rows = 1;
  if (has_data_rows()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->data_rows(), output);
  }

  // required uint32 data_cols = 2;
  if (has_data_cols()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->data_cols(), output);
  }

  // repeated uint32 data = 3 [packed = true];
  if (this->data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_data_cached_byte_size_);
  }
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->data(i), output);
  }

  // required uint32 mask_rows = 4;
  if (has_mask_rows()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->mask_rows(), output);
  }

  // required uint32 mask_cols = 5;
  if (has_mask_cols()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->mask_cols(), output);
  }

  // repeated float mask = 6 [packed = true];
  if (this->mask_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_mask_cached_byte_size_);
  }
  for (int i = 0; i < this->mask_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->mask(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StimRawData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 data_rows = 1;
  if (has_data_rows()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->data_rows(), target);
  }

  // required uint32 data_cols = 2;
  if (has_data_cols()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->data_cols(), target);
  }

  // repeated uint32 data = 3 [packed = true];
  if (this->data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _data_cached_byte_size_, target);
  }
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->data(i), target);
  }

  // required uint32 mask_rows = 4;
  if (has_mask_rows()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->mask_rows(), target);
  }

  // required uint32 mask_cols = 5;
  if (has_mask_cols()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->mask_cols(), target);
  }

  // repeated float mask = 6 [packed = true];
  if (this->mask_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _mask_cached_byte_size_, target);
  }
  for (int i = 0; i < this->mask_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->mask(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StimRawData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 data_rows = 1;
    if (has_data_rows()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data_rows());
    }

    // required uint32 data_cols = 2;
    if (has_data_cols()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data_cols());
    }

    // required uint32 mask_rows = 4;
    if (has_mask_rows()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mask_rows());
    }

    // required uint32 mask_cols = 5;
    if (has_mask_cols()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mask_cols());
    }

  }
  // repeated uint32 data = 3 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->data_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->data(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _data_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float mask = 6 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->mask_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _mask_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StimRawData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StimRawData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StimRawData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StimRawData::MergeFrom(const StimRawData& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mask_.MergeFrom(from.mask_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data_rows()) {
      set_data_rows(from.data_rows());
    }
    if (from.has_data_cols()) {
      set_data_cols(from.data_cols());
    }
    if (from.has_mask_rows()) {
      set_mask_rows(from.mask_rows());
    }
    if (from.has_mask_cols()) {
      set_mask_cols(from.mask_cols());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StimRawData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StimRawData::CopyFrom(const StimRawData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StimRawData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001b) != 0x0000001b) return false;

  return true;
}

void StimRawData::Swap(StimRawData* other) {
  if (other != this) {
    std::swap(data_rows_, other->data_rows_);
    std::swap(data_cols_, other->data_cols_);
    data_.Swap(&other->data_);
    std::swap(mask_rows_, other->mask_rows_);
    std::swap(mask_cols_, other->mask_cols_);
    mask_.Swap(&other->mask_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StimRawData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StimRawData_descriptor_;
  metadata.reflection = StimRawData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gsbn

// @@protoc_insertion_point(global_scope)
